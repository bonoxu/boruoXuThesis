%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R32DC.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: Administrator
%%CreationDate: 2017/4/6, 13:37:32
%%BoundingBox: 0 0 212 177
%%HiResBoundingBox: 0 0 211.1996 176.2906
%%CropBox: 0 0 211.1996 176.2906
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 822 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2017-04-06T13:36:37+01:00"
   xmp:CreateDate="2017-04-06T13:36:37+01:00"
   xmp:MetadataDate="2017-04-06T13:36:37+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:8cba65dc-1e4f-4504-8a4e-8b416162c2ee"
   xmpMM:InstanceID="uuid:93ceb9b1-114b-4865-bc8f-ff760af67731"
   pdf:Producer="pdfTeX-1.40.17"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -176.291 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 176.291 li
211.2 176.291 li
211.2 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+NimbusRomNo9L-ReguItal Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+NimbusRomNo9L-ReguItal def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle -15.5 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 53 /five put
dup 65 /A put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-169 -270 1010 924} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 432 452 653 673] def
/BlueScale 0.039625 def
/StdHW [23] def
/StdVW [78] def
/StemSnapH [19 23 32 38 43 47 53 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/five <1C60D8A8C9B7A73DCA6EDC04118986735E5649EF5393DE3B82EF5118F
322766CD0BE01EA188349296068A9B498E4486A0882340DC2157EB7FE0233CF8
9924631FEEC511DE4C53D8CF2DB33B93DB6EE9A2DFFA59A571BE2A29B3F40BC2
D54C9EB62F7D036062A996BFD3214A3> |-
/A <1C60D8A8C9B7D8BE6A40C975BB4D1E1B897A90FEA982578C089DE899F707
9788190140A356A0AADFC8C0C8904A0BC758EC37A7E995F76569FB539EEA6DFF
97CE11A88E51E66E7AF27F904EBD39FF18F5A4BCB132652B8178DFC581D1C65E
B9579C4D700DF0921A1BB71A4ED2DDB126F75DA9DBF8C4> |-
/P <1C60D8A8C9B7D8BE6A40C975083C7340CD6906ECF2E3CF1D49E1FDD49037
20EF71B3A78D8667F96783ADBE5D639A1A9294E478A05AB8697E20511C51636C
79CA58D9AC0ED2B24253F3883E4BFA7A7ED2FE6DBB0541A5A1AF05898322C2BF
61032DFB5A3199D8C2D78558FCCAC63830D93433F13102D03E9BD11B84EA92C1
E67DFCB7040B8DBDE8078B21DD19424F2DBFC8E85D438E028391F0884D790AB8> |-
/a <1C60D8A8C9B7A73DCEA80DF8A035E6052CC982C976E52805ECA17E96ED85
358DAEDA8137772CDA5D0D5F7C4275C1A5E4026261E2C3B38D308543B0E1AE71
3B517F7E54F0F5CF956209F612780761A2B71144A88A7046841A56B11D93FFB7
995D2EA00522953A8040D863497047DA14446BB2067ECCA8ED4D837CAE01ACE7
B46971340ABC15D79E32B004512A5DC5059BB56C2E7C594AD5A68E2BF959502E
9DADE6C7214B6F03755BE1A81CA309BC3F4F893EA7111D43D400FD21B368B73A
A2E3205E67> |-
/c <1C60D8A8C9B77FE2B98067ECA4D192682BFDB9E0521383E33AEF2AB13B6C
DDCB44DC5120998F37998811E16806D92A99440332371A54614042CCE9C92086
58B4DA3084C9D34213BEAABE4A6FF1F8DDFDED091410C941873DF78E52217871
1690A9E31F99D607B4F2E450328ADA> |-
/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FB14EBA73D87B1A4
D022DF8523FDF49BC255F6353D4EC7286276F638720F53775551090EF627DE32
99167E228A46C7C9F7600C313C9DB3D95EFD29DAE4921482D8BDA0C17CF165AE
54F2E4EAE86D7BC98FAA78761A40F55BE22953DF97061B> |-
/f <1C60D8A8C9B854D0F80E05032B288E000DCD85BA04E3639668EA8CF33314
967F215DCF3373594481AA451E5349F27E4E02B7A9E0C010FA198738E851F805
AD4075CE4AA02ACAF4D254E4DDB04C264E0C215EB3CF2E44607705BCCF314DA0
049C748EAC09831A6CEFB594251F06374C6655B3BAEBEC9D05EAD5F04F3C23B6
AEAB01831E482C6786E731A0746FA5EDD3EFF368BCED6F94D69606B73365F8A0
6E71> |-
/g <1C60D8A8C9B7A73DB58EA1BABB86F5673E58177B13D1689217184648646A
C0CE49A237A8F103AFCDB5EC056581454943D22FAB127F5C1E1E8B9D6E918057
E41E57DC52684AD5331B647C59B7E247B500C8501462047450C98D0B8241197F
7468EEABB23B6BE6A7CBE76395CF8839E2B115BC98F6FA00D46DDFE6768E493A
3C0344DC7EA7D3699B1F8782B909183D69E072358DA2A49D119AC7EDA36AC077
37F930D0C75C1F1BCB60AF1EAF20DDD5E35335A0BC9EC8E0CE2E4A3CD6851439
F3DA9D850AF5975B35E3C0F98171603731A62B92C94E104B5375FD3CA4280A4C
C5653EBF95230E8F334DA161BDC71F51D2AC3CF2759DA1D1B2BF0F0FB9FBB3DB
4CA56B5DDF9EBC89C937B97D72AE185FFA5EE4F1CC1FCB4460BBA25A82EF5CF4
F8653AA4B26755A26D8BF3E9248CABA6BFFD30E08F> |-
/h <1C60D8A8C9B7A73DCCC2CF5CE401F1233C4539879FDA2315CCD592E8AAFB
2E4918D29F3424D89DEAEFF064A3D792A1490EDBA1C4ABF8210DC7A773E30DF8
24690DCED1024C9B211BDB612AA25F25249E3EF8B551D98FEFC1AAC679EFC32E
B47DBD03361A2D604292AC71EFDCC2750031E6E0FD4D4CE6DFB4E59CC1F5285E
96D5FE62789C95EEA8C79C8EEBD27583EEFA9E932B8E1887683720948D58687C
65BD460CE5031A57CDFE0332B5120E> |-
/i <1C60D8A8C9B854D083AFE4C873AEC1E7FDB9EE859797A45455327B9BDB70
760240E8ACF666DC8D59275277C3F3C252A46BC2A92D5BC509D2A0906FF0489A
6A2863B6C52E12014E0BA262008BDC08AE94865A26FD90663B8FE13B433E5668
3A79BB00550E9151E21E522B2D2B5D71B39AD827ED501C13C2B901FC1670356A
6C436566AF4075B7579EA6C70A85F6C747F08B> |-
/l <1C60D8A8C9B854D0838A1108B53790159DD3B4EA9A1AD8636B0628F820FD
D5F77683DE15235D1FD339E9EA97EC21485FAAD28EC53B019AD5B813C84FDEA8
E91A6EF405E10B821029B8F161246B85F33E1B773CCB78341CFCF787EB8263F3
78D06DE7AFE2110DF0B39030FD> |-
/m <1C60D8A8C9B6079F178B521F79AB859140E406AE0C2925608732DA7C451C
154E79810E39F6B5B32562F5C747F43EAB8EE9FB3FB6AA02E6DDB5B640F73FD8
7203F2815F23DF37ED7B3C3D8C139F5494C5B589021482C0B49E3A45AD6BB8E3
CAD535C1815C616845611D52745E9E3A7F20A4EBDE118920053905EBB7FD273F
CEE0F7C3154EDD9B7922A8B0AA076EDCD5457FC5F23E58EA02963DE27C4A3BF9
950FE2FA1EA72709B44D0C0F0BF575E839D8A98FDCD76D9969A59CC799256EFB
31C8671E64FA561CA954E7B20BA848D7C14B1A853B062E6E8D2D0191BA5377EA
F94B1122C09634F15B> |-
/n <1C60D8A8C9B7A73DCCC2CF5CE401F1233B06D0FCF55836E538C58E814EEA
E6634460655FD290AE7488CE32E814759E0AF2C2482D7ABBAB2541CE23A2082E
8ED41FB38E252A6CF76E3507FBCD76F6FFBE5683A3516B6ED6647539D8D688FE
36EA596FC13D794F6D3DDE908BBDA3068338531638CB57995C08C38697724D14
8D71913F92B471AD67329A2D4B1A2188889C10BEBFE0E915562767D4E2D95C76
B539DE865FC66F5538DC89EE812915B3922908D3579330F65A44> |-
/o <1C60D8A8C9B7A73DCEB4B8D8F0C1B91E5FCECE20C383B5A3A04C5E300C44
73F1758AD6EBD68AF3342250ECA77E8264601968E8BB73C8BCE96E285325E4E5
F9A5427A9867F5E01A213534416D8FA7BD45D53E120FBAFC16324C55CE0B8ECC
A30F4FDCBBCADFF556EA> |-
/r <1C60D8A8C9B7361F7E31A316A5441472A3D5F0BBE187EC79A442CBC96388
45592AF85C4E4C7D40F5739783C28CBA686CB4EDBADD3DF864045E1617F9EF64
EF28B75F06BB7DB3735A4D1B8449A08901B30CEFEBABE09F310BAA3CE48486D6
4D9403EE527234C18BDC9B0C77031AC2437A48321C> |-
/t <1C60D8A8C9B854D083A90EFBC938A92D26787E8A2985BDD732F5F3979320
973AE05469589D37F6710993FA8C4F22B07BA5CDB62E8203EBC0D0A817CECF14
3F719975302FFF456E372C07C4540089BA89691B08F22F6B687DBA322D090528
19E08BEFEC85E919D4B4433340CE06E3E3F5538367ACD04AC81520E078F70831
E1> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLP+NimbusRomNo9L-ReguItal /PBAAAA+NimbusRomNo9L-ReguItal findfont ct_VMDictPut
/BQUHLP+NimbusRomNo9L-ReguItal*1 
[53{/.notdef}rp /five 11{/.notdef}rp /A 14{/.notdef}rp /P 16{/.notdef}rp /a 
/.notdef /c /.notdef /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /.notdef 
/t 139{/.notdef}rp]
BQUHLP+NimbusRomNo9L-ReguItal nf
BQUHLP+NimbusRomNo9L-ReguItal*1 [10.9091 0 0 -10.9091 0 0 ]msf
334.735 -30.5488 mo
(5AlgorithmPerformance)
[16.3636 6.66537 3.03275 5.45453 5.45456 4.24371 3.03275 3.03271 5.45456 10.6036 5.79266 4.84363 
4.24374 3.03271 5.45453 4.24374 7.87637 5.45453 5.45459 4.84363 0 ]xsh
.398 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
.611603 -26.2847 mo
454.155 -26.2847 li
@
gsave
.611603 177.755 mo
218.317 177.755 li
218.317 -6.16156 li
.611603 -6.16156 li
cp
clp
.611603 177.755 mo
218.317 177.755 li
218.317 -5.96962 li
.611603 -5.96962 li
cp
0 0 0 0 cmyk
ef
.09599 lw
.611603 177.755 mo
218.317 177.755 li
218.317 -5.96962 li
.611603 -5.96962 li
cp
@
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
ef
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
@
.28797 lw
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
0 0 0 0 cmyk
ef
.09599 lw
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
@
.28797 lw
22.4013 155.678 mo
209.582 155.678 li
209.582 1.32562 li
22.4013 1.32562 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
22.4013 155.678 mo
209.582 155.678 li
@
%ADOBeginSubsetFont: HIBBAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 2006 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 100 /d put
dup 109 /m put
dup 114 /r put
def
/UniqueID 5082796 def
/FontBBox {0 -218 762 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 -0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/comma <1C60D8A8C9B854D088EEB7F529386F280D9C87121678FF369865635B
5BF594D0E5245872DF2CE7> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE698D771C88C86C56509FCA9984ADDEE
E62525BCFA73F6F6096DC6AB209FB8ACDA0C68CC7730E1CD5079606883572828
58F689C9C57C719E35D45F42EA30959DBC3456AB81A87FFA964899DF319A5E6C
C87FBDC9F2CB0032AA06AD7DA11EFC08423FB55EBA40747867548D26A561251B
E8FD8FC250CEEECB> |-
/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F8
82286BFB8558FFDC99835F6318B6ABFB469C2D573D67D82FA99EC9F21876C471
7CBAE84217C6FFD5894AFF0AD893C16A968DFB7E9C237FD6960A35E15101A9B1
35F0EC0FCFC0C21C> |-
/m <1C60D8A8C9B6B41CC78139463B68644DCDC079B77E252B1BDBC174BFADBB
0D9A7BDB307A532BE37687E1CA9BCA32275A14FC349F464A0A7087C4729843CF
AE7A4B06C7BF18B20329649F3842C3E6CF34DF4774446F4782D13BE644BAD557
DD27E1003518D543606C19098618D0A693A493A79BB7C9200BD4BA1FE64AA809
72BCEC71F0BFD6> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEE
AD40211C367AF1DA849517960C0516775491EC31482B3B870EFC48A00C2F00B7
63C863A6961815FEBF4DBF40402AF9693FE698C7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLQ+Helvetica /HIBBAA+Helvetica findfont ct_VMDictPut
/BQUHLQ+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 46{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a 2{/.notdef}rp /d 8{/.notdef}rp /m 4{/.notdef}rp /r 
141{/.notdef}rp]
BQUHLQ+Helvetica nf
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
181.372 173.106 mo
(, [mrad])sh
%ADOBeginSubsetFont: QJJAAA+Symbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Symbol def
/FontInfo 6 dict dup begin
/Notice (URW Software, Copyright 1997 by URW) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /theta put
def
/UniqueID 5021339 def
/FontBBox {0 -13 485 686} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [673 693] def
/StdHW [0] def
/StdVW [0] def
/StemSnapH [0] def
/StemSnapV [0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B7B2022385262600573CDCE830A2FA77423CED543FA1D6
7D54B20D78A8EDC74F41F13A32EEAB51A0DEFE1B70EB7BEA49A3FBD84BFDEE51
F6D9303079017C494589EA671542B39D94C14BCA2B92BF8A83457C1E7CE1DFEA
BA3EE264E9696C3D3C16D7720A4C523F1B3B2638D6CA26BD3319588390552E66
4959B3C5944737BA2321F9F3DBD520BE4C843CDCA0F76F94D977B6AD725E73> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLR+Symbol /QJJAAA+Symbol findfont ct_VMDictPut
/BQUHLR+Symbol*1 
[113{/.notdef}rp /theta 142{/.notdef}rp]
BQUHLR+Symbol nf
BQUHLR+Symbol*1 [8.47741 0 0 -8.47741 0 0 ]msf
176.996 173.106 mo
(q)sh
23.7452 150.974 mo
23.7452 155.678 li
@
27.4888 153.374 mo
27.4888 155.678 li
@
31.3284 153.374 mo
31.3284 155.678 li
@
35.072 153.374 mo
35.072 155.678 li
@
38.8156 153.374 mo
38.8156 155.678 li
@
42.5592 150.974 mo
42.5592 155.678 li
@
46.3028 153.374 mo
46.3028 155.678 li
@
50.0465 153.374 mo
50.0465 155.678 li
@
53.7901 153.374 mo
53.7901 155.678 li
@
57.6297 153.374 mo
57.6297 155.678 li
@
61.3733 150.974 mo
61.3733 155.678 li
@
65.1169 153.374 mo
65.1169 155.678 li
@
68.8605 153.374 mo
68.8605 155.678 li
@
72.6041 153.374 mo
72.6041 155.678 li
@
76.3477 153.374 mo
76.3477 155.678 li
@
80.0913 150.974 mo
80.0913 155.678 li
@
83.9309 153.374 mo
83.9309 155.678 li
@
87.6745 153.374 mo
87.6745 155.678 li
@
91.4181 153.374 mo
91.4181 155.678 li
@
95.1618 153.374 mo
95.1618 155.678 li
@
98.9054 150.974 mo
98.9054 155.678 li
@
102.649 153.374 mo
102.649 155.678 li
@
106.489 153.374 mo
106.489 155.678 li
@
110.232 153.374 mo
110.232 155.678 li
@
113.976 153.374 mo
113.976 155.678 li
@
117.719 150.974 mo
117.719 155.678 li
@
121.463 153.374 mo
121.463 155.678 li
@
125.207 153.374 mo
125.207 155.678 li
@
128.95 153.374 mo
128.95 155.678 li
@
132.79 153.374 mo
132.79 155.678 li
@
136.533 150.974 mo
136.533 155.678 li
@
140.277 153.374 mo
140.277 155.678 li
@
144.021 153.374 mo
144.021 155.678 li
@
147.764 153.374 mo
147.764 155.678 li
@
151.508 153.374 mo
151.508 155.678 li
@
155.251 150.974 mo
155.251 155.678 li
@
159.091 153.374 mo
159.091 155.678 li
@
162.835 153.374 mo
162.835 155.678 li
@
166.578 153.374 mo
166.578 155.678 li
@
170.322 153.374 mo
170.322 155.678 li
@
174.066 150.974 mo
174.066 155.678 li
@
177.809 153.374 mo
177.809 155.678 li
@
181.649 153.374 mo
181.649 155.678 li
@
185.392 153.374 mo
185.392 155.678 li
@
189.136 153.374 mo
189.136 155.678 li
@
192.88 150.974 mo
192.88 155.678 li
@
23.7452 150.974 mo
23.7452 155.678 li
@
192.88 150.974 mo
192.88 155.678 li
@
196.623 153.374 mo
196.623 155.678 li
@
200.367 153.374 mo
200.367 155.678 li
@
204.11 153.374 mo
204.11 155.678 li
@
207.95 153.374 mo
207.95 155.678 li
@
%ADOBeginSubsetFont: HIBBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE5490E84494879DAC7533FE79B0256F53440E
0AA1FDA19C90971C126F7AE6F7C41F95A43E590807CA0BD577DD0147F6C043AF
9CE3D8A8F9C6D7C4AC7> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB95849747F92E4D8A332E5C5AB9FDCF9
0F4289CCBB278D891A1FC484D9B01C052B70FE6728FE7A9E2AF2529C0A694683
0FA7062544D6A38D4F48EA97D15E9834E0BF39269B3716> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B844952183B5229D50C4F29A2A4C4
2A85C453A4C716C52BBDD204179B08875273251EB47710D08D89961D07728375
781AC7A945EB0AD3FBDC001DB7DC483D88696371882ACE1BACDE42DAB6AE5257
1CC98003A9EF9D7C128B7F3A81042281211BABCF79126E619D6F14E7453935FB
24E0982124CDC6449D7C9DA22815434F82F52BDFF2324636C0> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F221FE8B4B4093F76F8EAFAB6691BB9DD73FDFA
50AA1325852CCF216CCF3A9F7D8A160F5B580DB952C84976D8C86428AAC8A0FB
D65F16934B2A77657116707C31969> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLQ+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
/BQUHLQ+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /five 37{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a 2{/.notdef}rp /d 8{/.notdef}rp /m 4{/.notdef}rp /r 141{/.notdef}rp]
BQUHLQ+Helvetica nf
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
21.3949 163.809 mo
(5101520253035404550)
[16.4079 4.71344 14.1557 4.71344 13.8822 4.71345 14.1557 4.71345 14.1553 4.71343 13.8827 4.71344 
14.1553 4.71342 14.1563 4.71346 14.1553 4.71344 0 ]xsh
22.4013 155.678 mo
22.4013 1.32562 li
@
gsave
.611603 177.755 mo
218.317 177.755 li
218.317 -5.96962 li
.611603 -5.96962 li
cp
clp
%ADOBeginSubsetFont: QJJAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLR+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/epsilon <1C60D8A8C9B76427592999C0F26B0BF134D0D5328EE4B5447D3866
6DD18B114D4EBA09C91606CBA8B42E36CF4373D9F404EFC67F0407A0635AC2EF
8B13A2EC5B3717DDF09399791F2F51C40FFEF7B37874C6EFA1B41E522C6A6112
7A3403EA89EA2C00DC64E0CD87767C6E5513A3544757008B398CB13F56206726
DB756A5881A6FF52EC5EE5AA7E029120FCE1F173203945E29FBD7DC71D0E5F0C
6A1684C59D8482157F8C3080C01C1B68BFE21329A4BAF2067BCC6217EB649120
1ED969FA765BD56666334EC326EA5D8316198794E32A36BFB44D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLR+Symbol /Encoding get
dup 101 /epsilon put
pop
%ADOEndSubsetFont
/BQUHLR+Symbol*1 
[101{/.notdef}rp /epsilon 11{/.notdef}rp /theta 142{/.notdef}rp]
BQUHLR+Symbol nf
BQUHLR+Symbol*1 [0 -8.47742 -8.47741 0 0 0 ]msf
6.6278 4.92525 mo
(e)sh
BQUHLQ+Helvetica*1 [0 -8.47742 -8.47741 0 0 0 ]msf
6.6278 7.93364 mo
( )sh
grestore
27.8728 155.678 mo
22.4013 155.678 li
@
25.0891 148.67 mo
22.4013 148.67 li
@
25.0891 141.663 mo
22.4013 141.663 li
@
25.0891 134.656 mo
22.4013 134.656 li
@
27.8728 127.648 mo
22.4013 127.648 li
@
25.0891 120.641 mo
22.4013 120.641 li
@
25.0891 113.634 mo
22.4013 113.634 li
@
25.0891 106.627 mo
22.4013 106.627 li
@
27.8728 99.5234 mo
22.4013 99.5234 li
@
25.0891 92.5161 mo
22.4013 92.5161 li
@
25.0891 85.5089 mo
22.4013 85.5089 li
@
25.0891 78.5016 mo
22.4013 78.5016 li
@
27.8728 71.4943 mo
22.4013 71.4943 li
@
25.0891 64.487 mo
22.4013 64.487 li
@
25.0891 57.4798 mo
22.4013 57.4798 li
@
25.0891 50.4725 mo
22.4013 50.4725 li
@
27.8728 43.4652 mo
22.4013 43.4652 li
@
25.0891 36.458 mo
22.4013 36.458 li
@
25.0891 29.4507 mo
22.4013 29.4507 li
@
25.0891 22.3474 mo
22.4013 22.3474 li
@
27.8728 15.3402 mo
22.4013 15.3402 li
@
27.8728 15.3402 mo
22.4013 15.3402 li
@
25.0891 8.33289 mo
22.4013 8.33289 li
@
%ADOBeginSubsetFont: HIBBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813126F14B1BED1AC76AA2A1CCFE51BCEF0355E
2F92ADB0755238EAD8803AAE5C10A893B5C1B4C13063BB843C978E7B1BC21E5A
B7DC9BB4B2094771CE67FBC04C6F6A99CAF7513E7267961B2DFFF1E73D8D4D8F
F014B4CEECD0DBED1E> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171DDD5DB2DFFDD93641B
601913DF140CAEF11CC6211A8571FF8C4823382AB3E20F8556CBDC9702D99488
3E99AB02B5B10E7030FAD6E381BCCAED1D68AC77A33EB31810AB2D7F0DF8F57D
CC422D156CA351599BCA0DB9C35CD96AAA023392D4F5E585BA984064F2EFC882
E33A9BBBF580C61EF590F17C472AF0A47082255229545020E9D42B853CCCFEF8
3EDEC759331B43AE4B6FBC07B32BD34C16546C58218B91A661B398C6F47D5C92
75842B3E7A33764B6405A2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLQ+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/BQUHLQ+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
34{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 
8{/.notdef}rp /m 4{/.notdef}rp /r 141{/.notdef}rp]
BQUHLQ+Helvetica nf
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
16.746 158.613 mo
(0)sh
9.63601 130.446 mo
(0.2)sh
9.63601 102.552 mo
(0.4)sh
9.63601 74.3855 mo
(0.6)sh
9.63601 46.2182 mo
(0.8)sh
18.1134 18.599 mo
(1)sh
194.031 155.678 mo
194.031 154.776 193.301 154.046 192.4 154.046 cv
191.498 154.046 190.768 154.776 190.768 155.678 cv
190.768 156.579 191.498 157.309 192.4 157.309 cv
193.301 157.309 194.031 156.579 194.031 155.678 cv
ef
190.96 155.678 mo
190.96 154.776 190.229 154.046 189.328 154.046 cv
188.427 154.046 187.696 154.776 187.696 155.678 cv
187.696 156.579 188.427 157.309 189.328 157.309 cv
190.229 157.309 190.96 156.579 190.96 155.678 cv
ef
187.792 155.678 mo
187.792 154.776 187.061 154.046 186.16 154.046 cv
185.259 154.046 184.528 154.776 184.528 155.678 cv
184.528 156.579 185.259 157.309 186.16 157.309 cv
187.061 157.309 187.792 156.579 187.792 155.678 cv
ef
184.72 155.678 mo
184.72 154.776 183.99 154.046 183.089 154.046 cv
182.187 154.046 181.457 154.776 181.457 155.678 cv
181.457 156.579 182.187 157.309 183.089 157.309 cv
183.99 157.309 184.72 156.579 184.72 155.678 cv
ef
181.553 155.678 mo
181.553 154.776 180.822 154.046 179.921 154.046 cv
179.02 154.046 178.289 154.776 178.289 155.678 cv
178.289 156.579 179.02 157.309 179.921 157.309 cv
180.822 157.309 181.553 156.579 181.553 155.678 cv
ef
178.481 155.678 mo
178.481 154.776 177.75 154.046 176.849 154.046 cv
175.948 154.046 175.217 154.776 175.217 155.678 cv
175.217 156.579 175.948 157.309 176.849 157.309 cv
177.75 157.309 178.481 156.579 178.481 155.678 cv
ef
175.313 155.678 mo
175.313 154.776 174.583 154.046 173.682 154.046 cv
172.78 154.046 172.05 154.776 172.05 155.678 cv
172.05 156.579 172.78 157.309 173.682 157.309 cv
174.583 157.309 175.313 156.579 175.313 155.678 cv
ef
172.242 155.678 mo
172.242 154.776 171.511 154.046 170.61 154.046 cv
169.709 154.046 168.978 154.776 168.978 155.678 cv
168.978 156.579 169.709 157.309 170.61 157.309 cv
171.511 157.309 172.242 156.579 172.242 155.678 cv
ef
169.074 155.678 mo
169.074 154.776 168.343 154.046 167.442 154.046 cv
166.541 154.046 165.81 154.776 165.81 155.678 cv
165.81 156.579 166.541 157.309 167.442 157.309 cv
168.343 157.309 169.074 156.579 169.074 155.678 cv
ef
166.002 155.678 mo
166.002 154.776 165.272 154.046 164.371 154.046 cv
163.469 154.046 162.739 154.776 162.739 155.678 cv
162.739 156.579 163.469 157.309 164.371 157.309 cv
165.272 157.309 166.002 156.579 166.002 155.678 cv
ef
162.835 155.678 mo
162.835 154.776 162.104 154.046 161.203 154.046 cv
160.302 154.046 159.571 154.776 159.571 155.678 cv
159.571 156.579 160.302 157.309 161.203 157.309 cv
162.104 157.309 162.835 156.579 162.835 155.678 cv
ef
159.763 155.678 mo
159.763 154.776 159.032 154.046 158.131 154.046 cv
157.23 154.046 156.499 154.776 156.499 155.678 cv
156.499 156.579 157.23 157.309 158.131 157.309 cv
159.032 157.309 159.763 156.579 159.763 155.678 cv
ef
156.595 155.678 mo
156.595 154.776 155.865 154.046 154.964 154.046 cv
154.062 154.046 153.332 154.776 153.332 155.678 cv
153.332 156.579 154.062 157.309 154.964 157.309 cv
155.865 157.309 156.595 156.579 156.595 155.678 cv
ef
153.524 155.678 mo
153.524 154.776 152.793 154.046 151.892 154.046 cv
150.991 154.046 150.26 154.776 150.26 155.678 cv
150.26 156.579 150.991 157.309 151.892 157.309 cv
152.793 157.309 153.524 156.579 153.524 155.678 cv
ef
150.356 155.678 mo
150.356 154.776 149.625 154.046 148.724 154.046 cv
147.823 154.046 147.092 154.776 147.092 155.678 cv
147.092 156.579 147.823 157.309 148.724 157.309 cv
149.625 157.309 150.356 156.579 150.356 155.678 cv
ef
147.284 155.678 mo
147.284 154.776 146.554 154.046 145.652 154.046 cv
144.751 154.046 144.021 154.776 144.021 155.678 cv
144.021 156.579 144.751 157.309 145.652 157.309 cv
146.554 157.309 147.284 156.579 147.284 155.678 cv
ef
144.117 155.678 mo
144.117 154.776 143.386 154.046 142.485 154.046 cv
141.584 154.046 140.853 154.776 140.853 155.678 cv
140.853 156.579 141.584 157.309 142.485 157.309 cv
143.386 157.309 144.117 156.579 144.117 155.678 cv
ef
141.045 155.678 mo
141.045 154.776 140.314 154.046 139.413 154.046 cv
138.512 154.046 137.781 154.776 137.781 155.678 cv
137.781 156.579 138.512 157.309 139.413 157.309 cv
140.314 157.309 141.045 156.579 141.045 155.678 cv
ef
137.877 78.7896 mo
137.877 77.8884 137.147 77.1577 136.245 77.1577 cv
135.344 77.1577 134.614 77.8884 134.614 78.7896 cv
134.614 79.6907 135.344 80.4214 136.245 80.4214 cv
137.147 80.4214 137.877 79.6907 137.877 78.7896 cv
ef
134.806 15.3402 mo
134.806 14.439 134.075 13.7083 133.174 13.7083 cv
132.273 13.7083 131.542 14.439 131.542 15.3402 cv
131.542 16.2413 132.273 16.972 133.174 16.972 cv
134.075 16.972 134.806 16.2413 134.806 15.3402 cv
ef
131.638 15.3402 mo
131.638 14.439 130.907 13.7083 130.006 13.7083 cv
129.105 13.7083 128.374 14.439 128.374 15.3402 cv
128.374 16.2413 129.105 16.972 130.006 16.972 cv
130.907 16.972 131.638 16.2413 131.638 15.3402 cv
ef
128.566 15.3402 mo
128.566 14.439 127.836 13.7083 126.934 13.7083 cv
126.033 13.7083 125.303 14.439 125.303 15.3402 cv
125.303 16.2413 126.033 16.972 126.934 16.972 cv
127.836 16.972 128.566 16.2413 128.566 15.3402 cv
ef
125.399 15.3402 mo
125.399 14.439 124.668 13.7083 123.767 13.7083 cv
122.866 13.7083 122.135 14.439 122.135 15.3402 cv
122.135 16.2413 122.866 16.972 123.767 16.972 cv
124.668 16.972 125.399 16.2413 125.399 15.3402 cv
ef
122.327 15.3402 mo
122.327 14.439 121.596 13.7083 120.695 13.7083 cv
119.794 13.7083 119.063 14.439 119.063 15.3402 cv
119.063 16.2413 119.794 16.972 120.695 16.972 cv
121.596 16.972 122.327 16.2413 122.327 15.3402 cv
ef
119.159 15.3402 mo
119.159 14.439 118.429 13.7083 117.527 13.7083 cv
116.626 13.7083 115.896 14.439 115.896 15.3402 cv
115.896 16.2413 116.626 16.972 117.527 16.972 cv
118.429 16.972 119.159 16.2413 119.159 15.3402 cv
ef
116.088 15.3402 mo
116.088 14.439 115.357 13.7083 114.456 13.7083 cv
113.555 13.7083 112.824 14.439 112.824 15.3402 cv
112.824 16.2413 113.555 16.972 114.456 16.972 cv
115.357 16.972 116.088 16.2413 116.088 15.3402 cv
ef
112.92 15.3402 mo
112.92 14.439 112.189 13.7083 111.288 13.7083 cv
110.387 13.7083 109.656 14.439 109.656 15.3402 cv
109.656 16.2413 110.387 16.972 111.288 16.972 cv
112.189 16.972 112.92 16.2413 112.92 15.3402 cv
ef
109.848 15.3402 mo
109.848 14.439 109.118 13.7083 108.216 13.7083 cv
107.315 13.7083 106.585 14.439 106.585 15.3402 cv
106.585 16.2413 107.315 16.972 108.216 16.972 cv
109.118 16.972 109.848 16.2413 109.848 15.3402 cv
ef
106.681 15.3402 mo
106.681 14.439 105.95 13.7083 105.049 13.7083 cv
104.148 13.7083 103.417 14.439 103.417 15.3402 cv
103.417 16.2413 104.148 16.972 105.049 16.972 cv
105.95 16.972 106.681 16.2413 106.681 15.3402 cv
ef
103.609 15.3402 mo
103.609 14.439 102.878 13.7083 101.977 13.7083 cv
101.076 13.7083 100.345 14.439 100.345 15.3402 cv
100.345 16.2413 101.076 16.972 101.977 16.972 cv
102.878 16.972 103.609 16.2413 103.609 15.3402 cv
ef
100.441 15.3402 mo
100.441 14.439 99.7105 13.7083 98.8094 13.7083 cv
97.9082 13.7083 97.1775 14.439 97.1775 15.3402 cv
97.1775 16.2413 97.9082 16.972 98.8094 16.972 cv
99.7105 16.972 100.441 16.2413 100.441 15.3402 cv
ef
97.3695 15.3402 mo
97.3695 14.439 96.6388 13.7083 95.7377 13.7083 cv
94.8365 13.7083 94.1059 14.439 94.1059 15.3402 cv
94.1059 16.2413 94.8365 16.972 95.7377 16.972 cv
96.6388 16.972 97.3695 16.2413 97.3695 15.3402 cv
ef
94.2019 16.396 mo
94.2019 15.4949 93.4712 14.7642 92.57 14.7642 cv
91.6689 14.7642 90.9382 15.4949 90.9382 16.396 cv
90.9382 17.2972 91.6689 18.0279 92.57 18.0279 cv
93.4712 18.0279 94.2019 17.2972 94.2019 16.396 cv
ef
91.1302 15.3402 mo
91.1302 14.439 90.3995 13.7083 89.4983 13.7083 cv
88.5972 13.7083 87.8665 14.439 87.8665 15.3402 cv
87.8665 16.2413 88.5972 16.972 89.4983 16.972 cv
90.3995 16.972 91.1302 16.2413 91.1302 15.3402 cv
ef
87.9625 16.78 mo
87.9625 15.8788 87.2318 15.1482 86.3307 15.1482 cv
85.4295 15.1482 84.6988 15.8788 84.6988 16.78 cv
84.6988 17.6812 85.4295 18.4118 86.3307 18.4118 cv
87.2318 18.4118 87.9625 17.6812 87.9625 16.78 cv
ef
84.8908 18.6998 mo
84.8908 17.7986 84.1601 17.068 83.259 17.068 cv
82.3578 17.068 81.6272 17.7986 81.6272 18.6998 cv
81.6272 19.601 82.3578 20.3316 83.259 20.3316 cv
84.1601 20.3316 84.8908 19.601 84.8908 18.6998 cv
ef
81.7232 19.5637 mo
81.7232 18.6626 80.9925 17.9319 80.0913 17.9319 cv
79.1902 17.9319 78.4595 18.6626 78.4595 19.5637 cv
78.4595 20.4649 79.1902 21.1955 80.0913 21.1955 cv
80.9925 21.1955 81.7232 20.4649 81.7232 19.5637 cv
ef
78.6515 20.9076 mo
78.6515 20.0064 77.9208 19.2757 77.0196 19.2757 cv
76.1185 19.2757 75.3878 20.0064 75.3878 20.9076 cv
75.3878 21.8087 76.1185 22.5394 77.0196 22.5394 cv
77.9208 22.5394 78.6515 21.8087 78.6515 20.9076 cv
ef
75.4838 17.8359 mo
75.4838 16.9347 74.7531 16.2041 73.852 16.2041 cv
72.9508 16.2041 72.2201 16.9347 72.2201 17.8359 cv
72.2201 18.7371 72.9508 19.4677 73.852 19.4677 cv
74.7531 19.4677 75.4838 18.7371 75.4838 17.8359 cv
ef
72.4121 19.2757 mo
72.4121 18.3746 71.6814 17.6439 70.7803 17.6439 cv
69.8791 17.6439 69.1485 18.3746 69.1485 19.2757 cv
69.1485 20.1769 69.8791 20.9076 70.7803 20.9076 cv
71.6814 20.9076 72.4121 20.1769 72.4121 19.2757 cv
ef
69.2445 26.571 mo
69.2445 25.6698 68.5138 24.9392 67.6126 24.9392 cv
66.7115 24.9392 65.9808 25.6698 65.9808 26.571 cv
65.9808 27.4722 66.7115 28.2028 67.6126 28.2028 cv
68.5138 28.2028 69.2445 27.4722 69.2445 26.571 cv
ef
66.1728 23.7873 mo
66.1728 22.8861 65.4421 22.1554 64.5409 22.1554 cv
63.6398 22.1554 62.9091 22.8861 62.9091 23.7873 cv
62.9091 24.6884 63.6398 25.4191 64.5409 25.4191 cv
65.4421 25.4191 66.1728 24.6884 66.1728 23.7873 cv
ef
63.0051 36.074 mo
63.0051 35.1729 62.2744 34.4422 61.3733 34.4422 cv
60.4721 34.4422 59.7414 35.1729 59.7414 36.074 cv
59.7414 36.9752 60.4721 37.7058 61.3733 37.7058 cv
62.2744 37.7058 63.0051 36.9752 63.0051 36.074 cv
ef
59.9334 48.9367 mo
59.9334 48.0355 59.2027 47.3048 58.3016 47.3048 cv
57.4004 47.3048 56.6698 48.0355 56.6698 48.9367 cv
56.6698 49.8378 57.4004 50.5685 58.3016 50.5685 cv
59.2027 50.5685 59.9334 49.8378 59.9334 48.9367 cv
ef
56.7658 40.2016 mo
56.7658 39.3004 56.0351 38.5697 55.1339 38.5697 cv
54.2328 38.5697 53.5021 39.3004 53.5021 40.2016 cv
53.5021 41.1027 54.2328 41.8334 55.1339 41.8334 cv
56.0351 41.8334 56.7658 41.1027 56.7658 40.2016 cv
ef
53.6941 47.7848 mo
53.6941 46.8836 52.9634 46.153 52.0622 46.153 cv
51.1611 46.153 50.4304 46.8836 50.4304 47.7848 cv
50.4304 48.6859 51.1611 49.4166 52.0622 49.4166 cv
52.9634 49.4166 53.6941 48.6859 53.6941 47.7848 cv
ef
50.5264 76.8698 mo
50.5264 75.9686 49.7957 75.2379 48.8946 75.2379 cv
47.9934 75.2379 47.2627 75.9686 47.2627 76.8698 cv
47.2627 77.7709 47.9934 78.5016 48.8946 78.5016 cv
49.7957 78.5016 50.5264 77.7709 50.5264 76.8698 cv
ef
47.4547 72.9342 mo
47.4547 72.033 46.724 71.3023 45.8229 71.3023 cv
44.9217 71.3023 44.1911 72.033 44.1911 72.9342 cv
44.1911 73.8353 44.9217 74.566 45.8229 74.566 cv
46.724 74.566 47.4547 73.8353 47.4547 72.9342 cv
ef
44.2871 117.761 mo
44.2871 116.86 43.5564 116.13 42.6552 116.13 cv
41.7541 116.13 41.0234 116.86 41.0234 117.761 cv
41.0234 118.663 41.7541 119.393 42.6552 119.393 cv
43.5564 119.393 44.2871 118.663 44.2871 117.761 cv
ef
41.2154 129.28 mo
41.2154 128.379 40.4847 127.648 39.5835 127.648 cv
38.6824 127.648 37.9517 128.379 37.9517 129.28 cv
37.9517 130.181 38.6824 130.912 39.5835 130.912 cv
40.4847 130.912 41.2154 130.181 41.2154 129.28 cv
ef
192.4 154.046 mo
190.768 157.309 li
194.031 157.309 li
.269902 .816403 0 0 cmyk
ef
189.328 154.046 mo
187.696 157.309 li
190.96 157.309 li
ef
186.16 154.046 mo
184.528 157.309 li
187.792 157.309 li
ef
183.089 154.046 mo
181.457 157.309 li
184.72 157.309 li
ef
179.921 154.046 mo
178.289 157.309 li
181.553 157.309 li
ef
176.849 154.046 mo
175.217 157.309 li
178.481 157.309 li
ef
173.682 154.046 mo
172.05 157.309 li
175.313 157.309 li
ef
170.61 154.046 mo
168.978 157.309 li
172.242 157.309 li
ef
167.442 154.046 mo
165.81 157.309 li
169.074 157.309 li
ef
164.371 154.046 mo
162.739 157.309 li
166.002 157.309 li
ef
161.203 154.046 mo
159.571 157.309 li
162.835 157.309 li
ef
158.131 154.046 mo
156.499 157.309 li
159.763 157.309 li
ef
154.964 154.046 mo
153.332 157.309 li
156.595 157.309 li
ef
151.892 154.046 mo
150.26 157.309 li
153.524 157.309 li
ef
148.724 154.046 mo
147.092 157.309 li
150.356 157.309 li
ef
145.652 154.046 mo
144.021 157.309 li
147.284 157.309 li
ef
142.485 154.046 mo
140.853 157.309 li
144.117 157.309 li
ef
139.413 154.046 mo
137.781 157.309 li
141.045 157.309 li
ef
136.245 72.3582 mo
134.614 75.6219 li
137.877 75.6219 li
ef
133.174 13.7083 mo
131.542 16.972 li
134.806 16.972 li
ef
130.006 15.0522 mo
128.374 18.3158 li
131.638 18.3158 li
ef
126.934 13.7083 mo
125.303 16.972 li
128.566 16.972 li
ef
123.767 13.7083 mo
122.135 16.972 li
125.399 16.972 li
ef
120.695 13.7083 mo
119.063 16.972 li
122.327 16.972 li
ef
117.527 13.7083 mo
115.896 16.972 li
119.159 16.972 li
ef
114.456 13.7083 mo
112.824 16.972 li
116.088 16.972 li
ef
111.288 13.7083 mo
109.656 16.972 li
112.92 16.972 li
ef
108.216 13.7083 mo
106.585 16.972 li
109.848 16.972 li
ef
105.049 13.7083 mo
103.417 16.972 li
106.681 16.972 li
ef
101.977 13.7083 mo
100.345 16.972 li
103.609 16.972 li
ef
98.8094 13.7083 mo
97.1775 16.972 li
100.441 16.972 li
ef
95.7377 13.7083 mo
94.1059 16.972 li
97.3695 16.972 li
ef
92.57 14.7642 mo
90.9382 18.0279 li
94.2019 18.0279 li
ef
89.4983 13.7083 mo
87.8665 16.972 li
91.1302 16.972 li
ef
86.3307 15.1482 mo
84.6988 18.4118 li
87.9625 18.4118 li
ef
83.259 14.8602 mo
81.6272 18.1239 li
84.8908 18.1239 li
ef
80.0913 16.492 mo
78.4595 19.7557 li
81.7232 19.7557 li
ef
77.0196 19.2757 mo
75.3878 22.5394 li
78.6515 22.5394 li
ef
73.852 16.2041 mo
72.2201 19.4677 li
75.4838 19.4677 li
ef
70.7803 16.396 mo
69.1485 19.6597 li
72.4121 19.6597 li
ef
67.6126 23.6913 mo
65.9808 26.9549 li
69.2445 26.9549 li
ef
64.5409 18.5078 mo
62.9091 21.7715 li
66.1728 21.7715 li
ef
61.3733 30.7946 mo
59.7414 34.0582 li
63.0051 34.0582 li
ef
58.3016 42.5053 mo
56.6698 45.769 li
59.9334 45.769 li
ef
55.1339 37.3219 mo
53.5021 40.5855 li
56.7658 40.5855 li
ef
52.0622 32.9063 mo
50.4304 36.17 li
53.6941 36.17 li
ef
48.8946 76.3898 mo
47.2627 79.6535 li
50.5264 79.6535 li
ef
45.8229 84.549 mo
44.1911 87.8126 li
47.4547 87.8126 li
ef
42.6552 118.625 mo
41.0234 121.889 li
44.2871 121.889 li
ef
39.5835 150.494 mo
37.9517 153.758 li
41.2154 153.758 li
ef
194.031 155.678 mo
194.031 154.776 193.301 154.046 192.4 154.046 cv
191.498 154.046 190.768 154.776 190.768 155.678 cv
190.768 156.579 191.498 157.309 192.4 157.309 cv
193.301 157.309 194.031 156.579 194.031 155.678 cv
1 /0 /CSD get_res sepcs
1 sep
@
190.96 155.678 mo
190.96 154.776 190.229 154.046 189.328 154.046 cv
188.427 154.046 187.696 154.776 187.696 155.678 cv
187.696 156.579 188.427 157.309 189.328 157.309 cv
190.229 157.309 190.96 156.579 190.96 155.678 cv
@
187.792 155.678 mo
187.792 154.776 187.061 154.046 186.16 154.046 cv
185.259 154.046 184.528 154.776 184.528 155.678 cv
184.528 156.579 185.259 157.309 186.16 157.309 cv
187.061 157.309 187.792 156.579 187.792 155.678 cv
@
184.72 155.678 mo
184.72 154.776 183.99 154.046 183.089 154.046 cv
182.187 154.046 181.457 154.776 181.457 155.678 cv
181.457 156.579 182.187 157.309 183.089 157.309 cv
183.99 157.309 184.72 156.579 184.72 155.678 cv
@
181.553 155.678 mo
181.553 154.776 180.822 154.046 179.921 154.046 cv
179.02 154.046 178.289 154.776 178.289 155.678 cv
178.289 156.579 179.02 157.309 179.921 157.309 cv
180.822 157.309 181.553 156.579 181.553 155.678 cv
@
178.481 155.678 mo
178.481 154.776 177.75 154.046 176.849 154.046 cv
175.948 154.046 175.217 154.776 175.217 155.678 cv
175.217 156.579 175.948 157.309 176.849 157.309 cv
177.75 157.309 178.481 156.579 178.481 155.678 cv
@
175.313 155.678 mo
175.313 154.776 174.583 154.046 173.682 154.046 cv
172.78 154.046 172.05 154.776 172.05 155.678 cv
172.05 156.579 172.78 157.309 173.682 157.309 cv
174.583 157.309 175.313 156.579 175.313 155.678 cv
@
172.242 155.678 mo
172.242 154.776 171.511 154.046 170.61 154.046 cv
169.709 154.046 168.978 154.776 168.978 155.678 cv
168.978 156.579 169.709 157.309 170.61 157.309 cv
171.511 157.309 172.242 156.579 172.242 155.678 cv
@
169.074 155.678 mo
169.074 154.776 168.343 154.046 167.442 154.046 cv
166.541 154.046 165.81 154.776 165.81 155.678 cv
165.81 156.579 166.541 157.309 167.442 157.309 cv
168.343 157.309 169.074 156.579 169.074 155.678 cv
@
166.002 155.678 mo
166.002 154.776 165.272 154.046 164.371 154.046 cv
163.469 154.046 162.739 154.776 162.739 155.678 cv
162.739 156.579 163.469 157.309 164.371 157.309 cv
165.272 157.309 166.002 156.579 166.002 155.678 cv
@
162.835 155.678 mo
162.835 154.776 162.104 154.046 161.203 154.046 cv
160.302 154.046 159.571 154.776 159.571 155.678 cv
159.571 156.579 160.302 157.309 161.203 157.309 cv
162.104 157.309 162.835 156.579 162.835 155.678 cv
@
159.763 155.678 mo
159.763 154.776 159.032 154.046 158.131 154.046 cv
157.23 154.046 156.499 154.776 156.499 155.678 cv
156.499 156.579 157.23 157.309 158.131 157.309 cv
159.032 157.309 159.763 156.579 159.763 155.678 cv
@
156.595 155.678 mo
156.595 154.776 155.865 154.046 154.964 154.046 cv
154.062 154.046 153.332 154.776 153.332 155.678 cv
153.332 156.579 154.062 157.309 154.964 157.309 cv
155.865 157.309 156.595 156.579 156.595 155.678 cv
@
153.524 155.678 mo
153.524 154.776 152.793 154.046 151.892 154.046 cv
150.991 154.046 150.26 154.776 150.26 155.678 cv
150.26 156.579 150.991 157.309 151.892 157.309 cv
152.793 157.309 153.524 156.579 153.524 155.678 cv
@
150.356 155.678 mo
150.356 154.776 149.625 154.046 148.724 154.046 cv
147.823 154.046 147.092 154.776 147.092 155.678 cv
147.092 156.579 147.823 157.309 148.724 157.309 cv
149.625 157.309 150.356 156.579 150.356 155.678 cv
@
147.284 155.678 mo
147.284 154.776 146.554 154.046 145.652 154.046 cv
144.751 154.046 144.021 154.776 144.021 155.678 cv
144.021 156.579 144.751 157.309 145.652 157.309 cv
146.554 157.309 147.284 156.579 147.284 155.678 cv
@
144.117 155.678 mo
144.117 154.776 143.386 154.046 142.485 154.046 cv
141.584 154.046 140.853 154.776 140.853 155.678 cv
140.853 156.579 141.584 157.309 142.485 157.309 cv
143.386 157.309 144.117 156.579 144.117 155.678 cv
@
141.045 155.678 mo
141.045 154.776 140.314 154.046 139.413 154.046 cv
138.512 154.046 137.781 154.776 137.781 155.678 cv
137.781 156.579 138.512 157.309 139.413 157.309 cv
140.314 157.309 141.045 156.579 141.045 155.678 cv
@
137.877 77.6377 mo
137.877 76.7365 137.147 76.0058 136.245 76.0058 cv
135.344 76.0058 134.614 76.7365 134.614 77.6377 cv
134.614 78.5388 135.344 79.2695 136.245 79.2695 cv
137.147 79.2695 137.877 78.5388 137.877 77.6377 cv
@
134.806 15.3402 mo
134.806 14.439 134.075 13.7083 133.174 13.7083 cv
132.273 13.7083 131.542 14.439 131.542 15.3402 cv
131.542 16.2413 132.273 16.972 133.174 16.972 cv
134.075 16.972 134.806 16.2413 134.806 15.3402 cv
@
131.638 15.3402 mo
131.638 14.439 130.907 13.7083 130.006 13.7083 cv
129.105 13.7083 128.374 14.439 128.374 15.3402 cv
128.374 16.2413 129.105 16.972 130.006 16.972 cv
130.907 16.972 131.638 16.2413 131.638 15.3402 cv
@
128.566 15.3402 mo
128.566 14.439 127.836 13.7083 126.934 13.7083 cv
126.033 13.7083 125.303 14.439 125.303 15.3402 cv
125.303 16.2413 126.033 16.972 126.934 16.972 cv
127.836 16.972 128.566 16.2413 128.566 15.3402 cv
@
125.399 15.3402 mo
125.399 14.439 124.668 13.7083 123.767 13.7083 cv
122.866 13.7083 122.135 14.439 122.135 15.3402 cv
122.135 16.2413 122.866 16.972 123.767 16.972 cv
124.668 16.972 125.399 16.2413 125.399 15.3402 cv
@
122.327 15.3402 mo
122.327 14.439 121.596 13.7083 120.695 13.7083 cv
119.794 13.7083 119.063 14.439 119.063 15.3402 cv
119.063 16.2413 119.794 16.972 120.695 16.972 cv
121.596 16.972 122.327 16.2413 122.327 15.3402 cv
@
119.159 15.3402 mo
119.159 14.439 118.429 13.7083 117.527 13.7083 cv
116.626 13.7083 115.896 14.439 115.896 15.3402 cv
115.896 16.2413 116.626 16.972 117.527 16.972 cv
118.429 16.972 119.159 16.2413 119.159 15.3402 cv
@
116.088 15.3402 mo
116.088 14.439 115.357 13.7083 114.456 13.7083 cv
113.555 13.7083 112.824 14.439 112.824 15.3402 cv
112.824 16.2413 113.555 16.972 114.456 16.972 cv
115.357 16.972 116.088 16.2413 116.088 15.3402 cv
@
112.92 15.3402 mo
112.92 14.439 112.189 13.7083 111.288 13.7083 cv
110.387 13.7083 109.656 14.439 109.656 15.3402 cv
109.656 16.2413 110.387 16.972 111.288 16.972 cv
112.189 16.972 112.92 16.2413 112.92 15.3402 cv
@
109.848 15.3402 mo
109.848 14.439 109.118 13.7083 108.216 13.7083 cv
107.315 13.7083 106.585 14.439 106.585 15.3402 cv
106.585 16.2413 107.315 16.972 108.216 16.972 cv
109.118 16.972 109.848 16.2413 109.848 15.3402 cv
@
106.681 15.3402 mo
106.681 14.439 105.95 13.7083 105.049 13.7083 cv
104.148 13.7083 103.417 14.439 103.417 15.3402 cv
103.417 16.2413 104.148 16.972 105.049 16.972 cv
105.95 16.972 106.681 16.2413 106.681 15.3402 cv
@
103.609 15.3402 mo
103.609 14.439 102.878 13.7083 101.977 13.7083 cv
101.076 13.7083 100.345 14.439 100.345 15.3402 cv
100.345 16.2413 101.076 16.972 101.977 16.972 cv
102.878 16.972 103.609 16.2413 103.609 15.3402 cv
@
100.441 15.3402 mo
100.441 14.439 99.7105 13.7083 98.8094 13.7083 cv
97.9082 13.7083 97.1775 14.439 97.1775 15.3402 cv
97.1775 16.2413 97.9082 16.972 98.8094 16.972 cv
99.7105 16.972 100.441 16.2413 100.441 15.3402 cv
@
97.3695 15.3402 mo
97.3695 14.439 96.6388 13.7083 95.7377 13.7083 cv
94.8365 13.7083 94.1059 14.439 94.1059 15.3402 cv
94.1059 16.2413 94.8365 16.972 95.7377 16.972 cv
96.6388 16.972 97.3695 16.2413 97.3695 15.3402 cv
@
94.2019 16.396 mo
94.2019 15.4949 93.4712 14.7642 92.57 14.7642 cv
91.6689 14.7642 90.9382 15.4949 90.9382 16.396 cv
90.9382 17.2972 91.6689 18.0279 92.57 18.0279 cv
93.4712 18.0279 94.2019 17.2972 94.2019 16.396 cv
@
91.1302 15.3402 mo
91.1302 14.439 90.3995 13.7083 89.4983 13.7083 cv
88.5972 13.7083 87.8665 14.439 87.8665 15.3402 cv
87.8665 16.2413 88.5972 16.972 89.4983 16.972 cv
90.3995 16.972 91.1302 16.2413 91.1302 15.3402 cv
@
87.9625 16.78 mo
87.9625 15.8788 87.2318 15.1482 86.3307 15.1482 cv
85.4295 15.1482 84.6988 15.8788 84.6988 16.78 cv
84.6988 17.6812 85.4295 18.4118 86.3307 18.4118 cv
87.2318 18.4118 87.9625 17.6812 87.9625 16.78 cv
@
84.8908 17.5479 mo
84.8908 16.6468 84.1601 15.9161 83.259 15.9161 cv
82.3578 15.9161 81.6272 16.6468 81.6272 17.5479 cv
81.6272 18.4491 82.3578 19.1798 83.259 19.1798 cv
84.1601 19.1798 84.8908 18.4491 84.8908 17.5479 cv
@
81.7232 18.1239 mo
81.7232 17.2227 80.9925 16.492 80.0913 16.492 cv
79.1902 16.492 78.4595 17.2227 78.4595 18.1239 cv
78.4595 19.025 79.1902 19.7557 80.0913 19.7557 cv
80.9925 19.7557 81.7232 19.025 81.7232 18.1239 cv
@
78.6515 20.9076 mo
78.6515 20.0064 77.9208 19.2757 77.0196 19.2757 cv
76.1185 19.2757 75.3878 20.0064 75.3878 20.9076 cv
75.3878 21.8087 76.1185 22.5394 77.0196 22.5394 cv
77.9208 22.5394 78.6515 21.8087 78.6515 20.9076 cv
@
75.4838 19.0838 mo
75.4838 18.1826 74.7531 17.4519 73.852 17.4519 cv
72.9508 17.4519 72.2201 18.1826 72.2201 19.0838 cv
72.2201 19.9849 72.9508 20.7156 73.852 20.7156 cv
74.7531 20.7156 75.4838 19.9849 75.4838 19.0838 cv
@
72.4121 18.0279 mo
72.4121 17.1267 71.6814 16.396 70.7803 16.396 cv
69.8791 16.396 69.1485 17.1267 69.1485 18.0279 cv
69.1485 18.929 69.8791 19.6597 70.7803 19.6597 cv
71.6814 19.6597 72.4121 18.929 72.4121 18.0279 cv
@
69.2445 26.571 mo
69.2445 25.6698 68.5138 24.9392 67.6126 24.9392 cv
66.7115 24.9392 65.9808 25.6698 65.9808 26.571 cv
65.9808 27.4722 66.7115 28.2028 67.6126 28.2028 cv
68.5138 28.2028 69.2445 27.4722 69.2445 26.571 cv
@
66.1728 20.1397 mo
66.1728 19.2385 65.4421 18.5078 64.5409 18.5078 cv
63.6398 18.5078 62.9091 19.2385 62.9091 20.1397 cv
62.9091 21.0408 63.6398 21.7715 64.5409 21.7715 cv
65.4421 21.7715 66.1728 21.0408 66.1728 20.1397 cv
@
63.0051 26.379 mo
63.0051 25.4779 62.2744 24.7472 61.3733 24.7472 cv
60.4721 24.7472 59.7414 25.4779 59.7414 26.379 cv
59.7414 27.2802 60.4721 28.0108 61.3733 28.0108 cv
62.2744 28.0108 63.0051 27.2802 63.0051 26.379 cv
@
59.9334 47.7848 mo
59.9334 46.8836 59.2027 46.153 58.3016 46.153 cv
57.4004 46.153 56.6698 46.8836 56.6698 47.7848 cv
56.6698 48.6859 57.4004 49.4166 58.3016 49.4166 cv
59.2027 49.4166 59.9334 48.6859 59.9334 47.7848 cv
@
56.7658 46.4409 mo
56.7658 45.5398 56.0351 44.8091 55.1339 44.8091 cv
54.2328 44.8091 53.5021 45.5398 53.5021 46.4409 cv
53.5021 47.3421 54.2328 48.0728 55.1339 48.0728 cv
56.0351 48.0728 56.7658 47.3421 56.7658 46.4409 cv
@
53.6941 52.5843 mo
53.6941 51.6831 52.9634 50.9525 52.0622 50.9525 cv
51.1611 50.9525 50.4304 51.6831 50.4304 52.5843 cv
50.4304 53.4854 51.1611 54.2161 52.0622 54.2161 cv
52.9634 54.2161 53.6941 53.4854 53.6941 52.5843 cv
@
50.5264 84.9329 mo
50.5264 84.0318 49.7957 83.3011 48.8946 83.3011 cv
47.9934 83.3011 47.2627 84.0318 47.2627 84.9329 cv
47.2627 85.8341 47.9934 86.5647 48.8946 86.5647 cv
49.7957 86.5647 50.5264 85.8341 50.5264 84.9329 cv
@
47.4547 66.9828 mo
47.4547 66.0816 46.724 65.351 45.8229 65.351 cv
44.9217 65.351 44.1911 66.0816 44.1911 66.9828 cv
44.1911 67.8839 44.9217 68.6146 45.8229 68.6146 cv
46.724 68.6146 47.4547 67.8839 47.4547 66.9828 cv
@
44.2871 114.018 mo
44.2871 113.117 43.5564 112.386 42.6552 112.386 cv
41.7541 112.386 41.0234 113.117 41.0234 114.018 cv
41.0234 114.919 41.7541 115.65 42.6552 115.65 cv
43.5564 115.65 44.2871 114.919 44.2871 114.018 cv
@
41.2154 125.729 mo
41.2154 124.828 40.4847 124.097 39.5835 124.097 cv
38.6824 124.097 37.9517 124.828 37.9517 125.729 cv
37.9517 126.63 38.6824 127.36 39.5835 127.36 cv
40.4847 127.36 41.2154 126.63 41.2154 125.729 cv
@
192.4 154.046 mo
190.768 157.309 li
194.031 157.309 li
cp
.269902 .816403 0 0 cmyk
@
189.328 154.046 mo
187.696 157.309 li
190.96 157.309 li
cp
@
186.16 154.046 mo
184.528 157.309 li
187.792 157.309 li
cp
@
183.089 154.046 mo
181.457 157.309 li
184.72 157.309 li
cp
@
179.921 154.046 mo
178.289 157.309 li
181.553 157.309 li
cp
@
176.849 154.046 mo
175.217 157.309 li
178.481 157.309 li
cp
@
173.682 154.046 mo
172.05 157.309 li
175.313 157.309 li
cp
@
170.61 154.046 mo
168.978 157.309 li
172.242 157.309 li
cp
@
167.442 154.046 mo
165.81 157.309 li
169.074 157.309 li
cp
@
164.371 154.046 mo
162.739 157.309 li
166.002 157.309 li
cp
@
161.203 154.046 mo
159.571 157.309 li
162.835 157.309 li
cp
@
158.131 154.046 mo
156.499 157.309 li
159.763 157.309 li
cp
@
154.964 154.046 mo
153.332 157.309 li
156.595 157.309 li
cp
@
151.892 154.046 mo
150.26 157.309 li
153.524 157.309 li
cp
@
148.724 154.046 mo
147.092 157.309 li
150.356 157.309 li
cp
@
145.652 154.046 mo
144.021 157.309 li
147.284 157.309 li
cp
@
142.485 154.046 mo
140.853 157.309 li
144.117 157.309 li
cp
@
139.413 154.046 mo
137.781 157.309 li
141.045 157.309 li
cp
@
136.245 72.3582 mo
134.614 75.6219 li
137.877 75.6219 li
cp
@
133.174 13.7083 mo
131.542 16.972 li
134.806 16.972 li
cp
@
130.006 15.0522 mo
128.374 18.3158 li
131.638 18.3158 li
cp
@
126.934 13.7083 mo
125.303 16.972 li
128.566 16.972 li
cp
@
123.767 13.7083 mo
122.135 16.972 li
125.399 16.972 li
cp
@
120.695 13.7083 mo
119.063 16.972 li
122.327 16.972 li
cp
@
117.527 13.7083 mo
115.896 16.972 li
119.159 16.972 li
cp
@
114.456 13.7083 mo
112.824 16.972 li
116.088 16.972 li
cp
@
111.288 13.7083 mo
109.656 16.972 li
112.92 16.972 li
cp
@
108.216 13.7083 mo
106.585 16.972 li
109.848 16.972 li
cp
@
105.049 13.7083 mo
103.417 16.972 li
106.681 16.972 li
cp
@
101.977 13.7083 mo
100.345 16.972 li
103.609 16.972 li
cp
@
98.8094 13.7083 mo
97.1775 16.972 li
100.441 16.972 li
cp
@
95.7377 13.7083 mo
94.1059 16.972 li
97.3695 16.972 li
cp
@
92.57 14.7642 mo
90.9382 18.0279 li
94.2019 18.0279 li
cp
@
89.4983 13.7083 mo
87.8665 16.972 li
91.1302 16.972 li
cp
@
86.3307 15.1482 mo
84.6988 18.4118 li
87.9625 18.4118 li
cp
@
83.259 14.8602 mo
81.6272 18.1239 li
84.8908 18.1239 li
cp
@
80.0913 16.492 mo
78.4595 19.7557 li
81.7232 19.7557 li
cp
@
77.0196 16.492 mo
75.3878 19.7557 li
78.6515 19.7557 li
cp
@
73.852 16.2041 mo
72.2201 19.4677 li
75.4838 19.4677 li
cp
@
70.7803 16.396 mo
69.1485 19.6597 li
72.4121 19.6597 li
cp
@
67.6126 16.2041 mo
65.9808 19.4677 li
69.2445 19.4677 li
cp
@
64.5409 16.1081 mo
62.9091 19.3717 li
66.1728 19.3717 li
cp
@
61.3733 19.8517 mo
59.7414 23.1153 li
63.0051 23.1153 li
cp
@
58.3016 19.7557 mo
56.6698 23.0194 li
59.9334 23.0194 li
cp
@
55.1339 17.4519 mo
53.5021 20.7156 li
56.7658 20.7156 li
cp
@
52.0622 18.5078 mo
50.4304 21.7715 li
53.6941 21.7715 li
cp
@
48.8946 36.9379 mo
47.2627 40.2016 li
50.5264 40.2016 li
cp
@
45.8229 38.9537 mo
44.1911 42.2174 li
47.4547 42.2174 li
cp
@
42.6552 68.1347 mo
41.0234 71.3983 li
44.2871 71.3983 li
cp
@
39.5835 150.494 mo
37.9517 153.758 li
41.2154 153.758 li
cp
@
100.729 144.639 mo
207.374 144.639 li
207.374 95.0119 li
100.729 95.0119 li
cp
0 0 0 0 cmyk
ef
.09599 lw
100.729 144.639 mo
207.374 144.639 li
207.374 95.0119 li
100.729 95.0119 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B7F37489A06F9529783C031558988C863E410A0DF584A6
9C5F43BA5C59A31785C289BA346D> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9957E54B02A1B91
7BC7F58F0AFBE439533E1ED46D143AB7B6719EE7E0A26AAD917CFE50F9D86916
60D06C3609FC503F9ECA5CDB98AFE470AC59DBE98B6FDB230F8752671ED6E8FF
1CA85C9DF60AA97812A58FCE5F562EE9FCD8C494B7D75B4D71BD5A39C61E27> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/b <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF0C4A70B10635B01529BB5E
E6AEAE58EA247A0F91A593B31240628F951C79A5DD142AB857206089096697F2
55FD0BC09DAAB839BE79130A44C5BFC02FF0EF17919902CE2A5F543D8E5371CC
4CC55ED1F5B047> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1097DCFFBFA904FBC8BD2781B69097605934011255CC1E77D9
74D42A5734080EC34301EC4BC5AA107FFDCEDB9EBE2B62B885971DC22E> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20B78B29FDD6FEE0B6539DE8A33498C1030568392
E61F4D3AC749A9AF964BAC7AE995A2B5418E7F9778BBEB9A720A5B1929175BE1
4597229641042269FF> |-
/g <1C60D8A8C9B7EF3227B253BA0513287033C8093CD601937B772648EA572C
C1F007E60EAC5321180CAEF3B4CD4B7C2758F76BC22FC84DB4A94F7544889552
5DEAB206C682769EE7900A7C0DAC28B7B90B70137B62344CD13E6DE3F4C31E8C
9856BC9B1ADDAC3624D7E74BF1CF3CD5C2FFB5E1A0EE3D580B04A652A3D783FD
FDB61EBCCCBC89D286E63D953A1423DBF70AE168D78C192EEA9D64476A412048> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93CCC5A502AC76AA3605F6F842E0C
6884B1AC78E4F6F7E0C35601D9142672E63805C6C437F58826490DDF1942A9DD
9E1CCD138DDFD598A3C09163CA0FC236518D17D98D39776EB3E76C4DB2FFD5> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE00CD8FF68F0C83CA1093E2917BE43AC2B76913
74CEEBA4813FABE9DE36AFBA9AD7E27F79F4267782F8C1880C04EB5A86ABB72C
F3AA7E2A7A1DC5A3046E365650C02D117CFC31976F1DE30127C1A59F7C584532
62B9834D30557E406234> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF7911330405AF7E6F0
1E787476F0618434BE96954E00B578FFB147A39DAD333F304533F66B3B7418B0
4EE5BF9C8839EFB740337F67A7CADF9BAF26C32B55149B7D6557640A956083A5> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD662709034A2A779D529AF125A278342C76D9DA0
E4C390660AA8DCC02CC67E9DE7> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69FB1B9D669614BD5BE9BBF7
73402916AA1AB18ABAFACA395E7B6EB52820B5969441875A0179F798326186BE
61C9F2FFB5B271B31D4CC387231EAE08C0E3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLQ+Helvetica /Encoding get
dup 61 /equal put
dup 69 /E put
dup 71 /G put
dup 86 /V put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/BQUHLQ+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
4{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 
4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c 
/d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 
/m /n /.notdef /p /.notdef /r /s /t 
/u 138{/.notdef}rp]
BQUHLQ+Helvetica nf
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
111.639 102.005 mo
(=500GeV)sh
BQUHLQ+Helvetica*1 [5.74277 0 0 -5.74277 0 0 ]msf
108.63 103.92 mo
(e)sh
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
103.161 102.005 mo
(E)sh
127.226 112.124 mo
(clustering, pregen bg)sh
104.761 113.442 mo
123.383 113.442 li
123.383 106.435 li
104.761 106.435 li
cp
0 0 0 .0468452 cmyk
ef
.28797 lw
104.761 109.986 mo
123.383 109.986 li
1 /0 /CSD get_res sepcs
1 sep
@
115.704 109.986 mo
115.704 109.085 114.973 108.354 114.072 108.354 cv
113.171 108.354 112.44 109.085 112.44 109.986 cv
112.44 110.887 113.171 111.618 114.072 111.618 cv
114.973 111.618 115.704 110.887 115.704 109.986 cv
ef
%ADOBeginSubsetFont: HIBBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EF743A44597C4F61CE6B8578AF705EBC4640B3DF516FF9DF739A5A37FECD
DF523B0115500A789A26F0B116775E> |-
/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD7
8AB956CD4302BB789AA6D333FFADD104DB65C1220150F33A25DDB6D0C3E3F2A1
02DFCFBF07D5AE34546281AAAE18BB2A6A1D8790> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A53F97
896760D132F78F6B167CFAFA8CFB5D9561B5531C39C66F4BF3CE151A4BF4C30B
42EB3D2B9A0463149463A6874D98E475CE2B3B76FD4C2B> |-
/w <1C60D8A8C9B6079F1E495238D734F67FB5E2A2BA6F1F073975099C282372
72C5E468B93051F423D5D62417FF2745759EEEF7FD240DC4B0B2C13B5678A844> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLQ+Helvetica /Encoding get
dup 102 /f put
dup 104 /h put
dup 111 /o put
dup 119 /w put
pop
%ADOEndSubsetFont
/BQUHLQ+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
4{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 
4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c 
/d /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w 136{/.notdef}rp]
BQUHLQ+Helvetica nf
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
127.226 121.969 mo
(shower fit, pregen bg)sh
104.761 123.329 mo
123.383 123.329 li
123.383 116.418 li
104.761 116.418 li
cp
0 0 0 .0468452 cmyk
ef
104.761 119.873 mo
123.383 119.873 li
1 /0 /CSD get_res sepcs
1 sep
@
114.072 118.241 mo
112.44 121.505 li
115.704 121.505 li
.269902 .816403 0 0 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
127.226 131.813 mo
(clustering, gausian bg)sh
104.761 133.312 mo
123.383 133.312 li
123.383 126.305 li
104.761 126.305 li
cp
0 0 0 .0468452 cmyk
ef
104.761 129.76 mo
123.383 129.76 li
1 /0 /CSD get_res sepcs
1 sep
@
115.704 129.76 mo
115.704 128.859 114.973 128.128 114.072 128.128 cv
113.171 128.128 112.44 128.859 112.44 129.76 cv
112.44 130.661 113.171 131.392 114.072 131.392 cv
114.973 131.392 115.704 130.661 115.704 129.76 cv
@
BQUHLQ+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
127.226 141.931 mo
(shower fit, gausian bg)sh
104.761 143.199 mo
123.383 143.199 li
123.383 136.288 li
104.761 136.288 li
cp
0 0 0 .0468452 cmyk
ef
104.761 139.743 mo
123.383 139.743 li
1 /0 /CSD get_res sepcs
1 sep
@
114.072 138.111 mo
112.44 141.375 li
115.704 141.375 li
cp
.269902 .816403 0 0 cmyk
@
grestore
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+NimbusRomNo9L-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 97 /a put
def
/FontBBox {-168 -281 1000 924} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/BlueScale 0.039625 def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38 43 53 60 73] def
/StemSnapV [78 85 91 103 109 115] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B81F2C34C10FB5B45A8FF20C81B99897830644196B
9F0B77D18F1E2415B32643B9BEFB32917C4D47B1853CE389710AFD496390E0F7
93FB9D427EA0C5D4BB5FDA148EAFEE0C20062EA421DE85BAC5> |-
/parenright <1C60D8A8C9B81F2C34C10FB5F8CB4FB0C01CBD8EB5118892552
E140106D8CE6C92507D29757CD6290403441A1EA7693B4F3C96FFB476C2C573B
7D2E57D40483AABB12672AA2C522BCD98D28F543A66D4C9ADFF> |-
/a <1C60D8A8C9B77FE2B8A4D22D65455054518A9081A02F6171B4D6753717B5
C4BCFBE68C976641B0DA567300A37FD1F7BE0E53E951AF39FE7187820E58AB7E
16899451090BE178FB9A491AFEF8E37FF1C5BDD8D0256C28A39196FBCF43F894
58E78497ED2727A4DE9FADAB50CC878B363C604914D69E8722C78AB472A690DE
86045D5F8F45A8F711931993BC8981E4EC5F1265B4496A3A3138E85E75C304A4
1129F5747FC321FC219DE10F0876B8AE64C30F976EE673CA77E26C723368D2A5
BAFCD92094CBCB0C1DAAAB41901C661D72AF00> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu /GFNBAA+NimbusRomNo9L-Regu findfont ct_VMDictPut
/BQUHLS+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 55{/.notdef}rp /a 158{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
103.932 192.101 mo
(\(a\))sh
gsave
236.457 177.755 mo
454.162 177.755 li
454.162 -6.16156 li
236.457 -6.16156 li
cp
clp
236.457 177.755 mo
454.162 177.755 li
454.162 -5.96962 li
236.457 -5.96962 li
cp
0 0 0 0 cmyk
ef
.09599 lw
236.457 177.755 mo
454.162 177.755 li
454.162 -5.96962 li
236.457 -5.96962 li
cp
@
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
ef
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
@
.28797 lw
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
0 0 0 0 cmyk
ef
.09599 lw
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
@
.28797 lw
258.246 155.678 mo
445.427 155.678 li
445.427 1.32562 li
258.246 1.32562 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
258.246 155.678 mo
445.427 155.678 li
@
%ADOBeginSubsetFont: HJCBAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HJCBAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 2006 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 100 /d put
dup 109 /m put
dup 114 /r put
def
/UniqueID 5082796 def
/FontBBox {0 -218 762 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 -0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/comma <1C60D8A8C9B854D088EEB7F529386F280D9C87121678FF369865635B
5BF594D0E5245872DF2CE7> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE698D771C88C86C56509FCA9984ADDEE
E62525BCFA73F6F6096DC6AB209FB8ACDA0C68CC7730E1CD5079606883572828
58F689C9C57C719E35D45F42EA30959DBC3456AB81A87FFA964899DF319A5E6C
C87FBDC9F2CB0032AA06AD7DA11EFC08423FB55EBA40747867548D26A561251B
E8FD8FC250CEEECB> |-
/d <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF6821E2B45DACFBE66781F8
82286BFB8558FFDC99835F6318B6ABFB469C2D573D67D82FA99EC9F21876C471
7CBAE84217C6FFD5894AFF0AD893C16A968DFB7E9C237FD6960A35E15101A9B1
35F0EC0FCFC0C21C> |-
/m <1C60D8A8C9B6B41CC78139463B68644DCDC079B77E252B1BDBC174BFADBB
0D9A7BDB307A532BE37687E1CA9BCA32275A14FC349F464A0A7087C4729843CF
AE7A4B06C7BF18B20329649F3842C3E6CF34DF4774446F4782D13BE644BAD557
DD27E1003518D543606C19098618D0A693A493A79BB7C9200BD4BA1FE64AA809
72BCEC71F0BFD6> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEE
AD40211C367AF1DA849517960C0516775491EC31482B3B870EFC48A00C2F00B7
63C863A6961815FEBF4DBF40402AF9693FE698C7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLT+Helvetica /HJCBAA+Helvetica findfont ct_VMDictPut
/BQUHLT+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 46{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a 2{/.notdef}rp /d 8{/.notdef}rp /m 4{/.notdef}rp /r 
141{/.notdef}rp]
BQUHLT+Helvetica nf
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
417.217 173.106 mo
(, [mrad])sh
%ADOBeginSubsetFont: UGXAAA+Symbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /UGXAAA+Symbol def
/FontInfo 6 dict dup begin
/Notice (URW Software, Copyright 1997 by URW) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /theta put
def
/UniqueID 5021339 def
/FontBBox {0 -13 485 686} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [673 693] def
/StdHW [0] def
/StdVW [0] def
/StemSnapH [0] def
/StemSnapV [0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B7B2022385262600573CDCE830A2FA77423CED543FA1D6
7D54B20D78A8EDC74F41F13A32EEAB51A0DEFE1B70EB7BEA49A3FBD84BFDEE51
F6D9303079017C494589EA671542B39D94C14BCA2B92BF8A83457C1E7CE1DFEA
BA3EE264E9696C3D3C16D7720A4C523F1B3B2638D6CA26BD3319588390552E66
4959B3C5944737BA2321F9F3DBD520BE4C843CDCA0F76F94D977B6AD725E73> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLU+Symbol /UGXAAA+Symbol findfont ct_VMDictPut
/BQUHLU+Symbol*1 
[113{/.notdef}rp /theta 142{/.notdef}rp]
BQUHLU+Symbol nf
BQUHLU+Symbol*1 [8.47741 0 0 -8.47741 0 0 ]msf
412.841 173.106 mo
(q)sh
259.59 150.974 mo
259.59 155.678 li
@
263.334 153.374 mo
263.334 155.678 li
@
267.173 153.374 mo
267.173 155.678 li
@
270.917 153.374 mo
270.917 155.678 li
@
274.661 153.374 mo
274.661 155.678 li
@
278.404 150.974 mo
278.404 155.678 li
@
282.148 153.374 mo
282.148 155.678 li
@
285.891 153.374 mo
285.891 155.678 li
@
289.635 153.374 mo
289.635 155.678 li
@
293.475 153.374 mo
293.475 155.678 li
@
297.218 150.974 mo
297.218 155.678 li
@
300.962 153.374 mo
300.962 155.678 li
@
304.705 153.374 mo
304.705 155.678 li
@
308.449 153.374 mo
308.449 155.678 li
@
312.193 153.374 mo
312.193 155.678 li
@
315.936 150.974 mo
315.936 155.678 li
@
319.776 153.374 mo
319.776 155.678 li
@
323.52 153.374 mo
323.52 155.678 li
@
327.263 153.374 mo
327.263 155.678 li
@
331.007 153.374 mo
331.007 155.678 li
@
334.75 150.974 mo
334.75 155.678 li
@
338.494 153.374 mo
338.494 155.678 li
@
342.334 153.374 mo
342.334 155.678 li
@
346.077 153.374 mo
346.077 155.678 li
@
349.821 153.374 mo
349.821 155.678 li
@
353.564 150.974 mo
353.564 155.678 li
@
357.308 153.374 mo
357.308 155.678 li
@
361.052 153.374 mo
361.052 155.678 li
@
364.795 153.374 mo
364.795 155.678 li
@
368.635 153.374 mo
368.635 155.678 li
@
372.378 150.974 mo
372.378 155.678 li
@
376.122 153.374 mo
376.122 155.678 li
@
379.866 153.374 mo
379.866 155.678 li
@
383.609 153.374 mo
383.609 155.678 li
@
387.353 153.374 mo
387.353 155.678 li
@
391.096 150.974 mo
391.096 155.678 li
@
394.936 153.374 mo
394.936 155.678 li
@
398.68 153.374 mo
398.68 155.678 li
@
402.423 153.374 mo
402.423 155.678 li
@
406.167 153.374 mo
406.167 155.678 li
@
409.911 150.974 mo
409.911 155.678 li
@
413.654 153.374 mo
413.654 155.678 li
@
417.494 153.374 mo
417.494 155.678 li
@
421.237 153.374 mo
421.237 155.678 li
@
424.981 153.374 mo
424.981 155.678 li
@
428.725 150.974 mo
428.725 155.678 li
@
259.59 150.974 mo
259.59 155.678 li
@
428.725 150.974 mo
428.725 155.678 li
@
432.468 153.374 mo
432.468 155.678 li
@
436.212 153.374 mo
436.212 155.678 li
@
439.955 153.374 mo
439.955 155.678 li
@
443.795 153.374 mo
443.795 155.678 li
@
%ADOBeginSubsetFont: HJCBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLT+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE5490E84494879DAC7533FE79B0256F53440E
0AA1FDA19C90971C126F7AE6F7C41F95A43E590807CA0BD577DD0147F6C043AF
9CE3D8A8F9C6D7C4AC7> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB95849747F92E4D8A332E5C5AB9FDCF9
0F4289CCBB278D891A1FC484D9B01C052B70FE6728FE7A9E2AF2529C0A694683
0FA7062544D6A38D4F48EA97D15E9834E0BF39269B3716> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B844952183B5229D50C4F29A2A4C4
2A85C453A4C716C52BBDD204179B08875273251EB47710D08D89961D07728375
781AC7A945EB0AD3FBDC001DB7DC483D88696371882ACE1BACDE42DAB6AE5257
1CC98003A9EF9D7C128B7F3A81042281211BABCF79126E619D6F14E7453935FB
24E0982124CDC6449D7C9DA22815434F82F52BDFF2324636C0> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F221FE8B4B4093F76F8EAFAB6691BB9DD73FDFA
50AA1325852CCF216CCF3A9F7D8A160F5B580DB952C84976D8C86428AAC8A0FB
D65F16934B2A77657116707C31969> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLT+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
/BQUHLT+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /five 37{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a 2{/.notdef}rp /d 8{/.notdef}rp /m 4{/.notdef}rp /r 141{/.notdef}rp]
BQUHLT+Helvetica nf
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
257.24 163.809 mo
(5101520253035404550)
[16.4079 4.71344 14.1557 4.71344 13.8822 4.71344 14.1557 4.71344 14.1553 4.71344 13.8827 4.71344 
14.1553 4.71344 14.1563 4.71347 14.1553 4.71344 0 ]xsh
258.246 155.678 mo
258.246 1.32562 li
@
gsave
236.457 177.755 mo
454.162 177.755 li
454.162 -5.96962 li
236.457 -5.96962 li
cp
clp
%ADOBeginSubsetFont: UGXAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLU+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/epsilon <1C60D8A8C9B76427592999C0F26B0BF134D0D5328EE4B5447D3866
6DD18B114D4EBA09C91606CBA8B42E36CF4373D9F404EFC67F0407A0635AC2EF
8B13A2EC5B3717DDF09399791F2F51C40FFEF7B37874C6EFA1B41E522C6A6112
7A3403EA89EA2C00DC64E0CD87767C6E5513A3544757008B398CB13F56206726
DB756A5881A6FF52EC5EE5AA7E029120FCE1F173203945E29FBD7DC71D0E5F0C
6A1684C59D8482157F8C3080C01C1B68BFE21329A4BAF2067BCC6217EB649120
1ED969FA765BD56666334EC326EA5D8316198794E32A36BFB44D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLU+Symbol /Encoding get
dup 101 /epsilon put
pop
%ADOEndSubsetFont
/BQUHLU+Symbol*1 
[101{/.notdef}rp /epsilon 11{/.notdef}rp /theta 142{/.notdef}rp]
BQUHLU+Symbol nf
BQUHLU+Symbol*1 [0 -8.47742 -8.47741 0 0 0 ]msf
242.473 4.92525 mo
(e)sh
BQUHLT+Helvetica*1 [0 -8.47742 -8.47741 0 0 0 ]msf
242.473 7.93364 mo
( )sh
grestore
263.718 155.678 mo
258.246 155.678 li
@
260.934 148.67 mo
258.246 148.67 li
@
260.934 141.663 mo
258.246 141.663 li
@
260.934 134.656 mo
258.246 134.656 li
@
263.718 127.648 mo
258.246 127.648 li
@
260.934 120.641 mo
258.246 120.641 li
@
260.934 113.634 mo
258.246 113.634 li
@
260.934 106.627 mo
258.246 106.627 li
@
263.718 99.5234 mo
258.246 99.5234 li
@
260.934 92.5161 mo
258.246 92.5161 li
@
260.934 85.5089 mo
258.246 85.5089 li
@
260.934 78.5016 mo
258.246 78.5016 li
@
263.718 71.4943 mo
258.246 71.4943 li
@
260.934 64.487 mo
258.246 64.487 li
@
260.934 57.4798 mo
258.246 57.4798 li
@
260.934 50.4725 mo
258.246 50.4725 li
@
263.718 43.4652 mo
258.246 43.4652 li
@
260.934 36.458 mo
258.246 36.458 li
@
260.934 29.4507 mo
258.246 29.4507 li
@
260.934 22.3474 mo
258.246 22.3474 li
@
263.718 15.3402 mo
258.246 15.3402 li
@
263.718 15.3402 mo
258.246 15.3402 li
@
260.934 8.33289 mo
258.246 8.33289 li
@
%ADOBeginSubsetFont: HJCBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLT+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813126F14B1BED1AC76AA2A1CCFE51BCEF0355E
2F92ADB0755238EAD8803AAE5C10A893B5C1B4C13063BB843C978E7B1BC21E5A
B7DC9BB4B2094771CE67FBC04C6F6A99CAF7513E7267961B2DFFF1E73D8D4D8F
F014B4CEECD0DBED1E> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171DDD5DB2DFFDD93641B
601913DF140CAEF11CC6211A8571FF8C4823382AB3E20F8556CBDC9702D99488
3E99AB02B5B10E7030FAD6E381BCCAED1D68AC77A33EB31810AB2D7F0DF8F57D
CC422D156CA351599BCA0DB9C35CD96AAA023392D4F5E585BA984064F2EFC882
E33A9BBBF580C61EF590F17C472AF0A47082255229545020E9D42B853CCCFEF8
3EDEC759331B43AE4B6FBC07B32BD34C16546C58218B91A661B398C6F47D5C92
75842B3E7A33764B6405A2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLT+Helvetica /Encoding get
dup 46 /period put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/BQUHLT+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
34{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 2{/.notdef}rp /d 
8{/.notdef}rp /m 4{/.notdef}rp /r 141{/.notdef}rp]
BQUHLT+Helvetica nf
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
252.591 158.613 mo
(0)sh
245.481 130.446 mo
(0.2)sh
245.481 102.552 mo
(0.4)sh
245.481 74.3855 mo
(0.6)sh
245.481 46.2182 mo
(0.8)sh
253.958 18.599 mo
(1)sh
429.876 155.678 mo
429.876 154.776 429.146 154.046 428.245 154.046 cv
427.343 154.046 426.613 154.776 426.613 155.678 cv
426.613 156.579 427.343 157.309 428.245 157.309 cv
429.146 157.309 429.876 156.579 429.876 155.678 cv
ef
426.805 155.678 mo
426.805 154.776 426.074 154.046 425.173 154.046 cv
424.272 154.046 423.541 154.776 423.541 155.678 cv
423.541 156.579 424.272 157.309 425.173 157.309 cv
426.074 157.309 426.805 156.579 426.805 155.678 cv
ef
423.637 155.678 mo
423.637 154.776 422.906 154.046 422.005 154.046 cv
421.104 154.046 420.373 154.776 420.373 155.678 cv
420.373 156.579 421.104 157.309 422.005 157.309 cv
422.906 157.309 423.637 156.579 423.637 155.678 cv
ef
420.565 155.678 mo
420.565 154.776 419.835 154.046 418.934 154.046 cv
418.032 154.046 417.302 154.776 417.302 155.678 cv
417.302 156.579 418.032 157.309 418.934 157.309 cv
419.835 157.309 420.565 156.579 420.565 155.678 cv
ef
417.398 155.678 mo
417.398 154.776 416.667 154.046 415.766 154.046 cv
414.865 154.046 414.134 154.776 414.134 155.678 cv
414.134 156.579 414.865 157.309 415.766 157.309 cv
416.667 157.309 417.398 156.579 417.398 155.678 cv
ef
414.326 155.678 mo
414.326 154.776 413.595 154.046 412.694 154.046 cv
411.793 154.046 411.062 154.776 411.062 155.678 cv
411.062 156.579 411.793 157.309 412.694 157.309 cv
413.595 157.309 414.326 156.579 414.326 155.678 cv
ef
411.158 155.678 mo
411.158 154.776 410.428 154.046 409.527 154.046 cv
408.625 154.046 407.895 154.776 407.895 155.678 cv
407.895 156.579 408.625 157.309 409.527 157.309 cv
410.428 157.309 411.158 156.579 411.158 155.678 cv
ef
408.087 155.678 mo
408.087 154.776 407.356 154.046 406.455 154.046 cv
405.554 154.046 404.823 154.776 404.823 155.678 cv
404.823 156.579 405.554 157.309 406.455 157.309 cv
407.356 157.309 408.087 156.579 408.087 155.678 cv
ef
404.919 155.678 mo
404.919 154.776 404.188 154.046 403.287 154.046 cv
402.386 154.046 401.655 154.776 401.655 155.678 cv
401.655 156.579 402.386 157.309 403.287 157.309 cv
404.188 157.309 404.919 156.579 404.919 155.678 cv
ef
401.847 155.678 mo
401.847 154.776 401.117 154.046 400.216 154.046 cv
399.314 154.046 398.584 154.776 398.584 155.678 cv
398.584 156.579 399.314 157.309 400.216 157.309 cv
401.117 157.309 401.847 156.579 401.847 155.678 cv
ef
398.68 155.678 mo
398.68 154.776 397.949 154.046 397.048 154.046 cv
396.147 154.046 395.416 154.776 395.416 155.678 cv
395.416 156.579 396.147 157.309 397.048 157.309 cv
397.949 157.309 398.68 156.579 398.68 155.678 cv
ef
395.608 155.678 mo
395.608 154.776 394.877 154.046 393.976 154.046 cv
393.075 154.046 392.344 154.776 392.344 155.678 cv
392.344 156.579 393.075 157.309 393.976 157.309 cv
394.877 157.309 395.608 156.579 395.608 155.678 cv
ef
392.44 155.678 mo
392.44 154.776 391.71 154.046 390.809 154.046 cv
389.907 154.046 389.177 154.776 389.177 155.678 cv
389.177 156.579 389.907 157.309 390.809 157.309 cv
391.71 157.309 392.44 156.579 392.44 155.678 cv
ef
389.369 155.678 mo
389.369 154.776 388.638 154.046 387.737 154.046 cv
386.836 154.046 386.105 154.776 386.105 155.678 cv
386.105 156.579 386.836 157.309 387.737 157.309 cv
388.638 157.309 389.369 156.579 389.369 155.678 cv
ef
386.201 155.678 mo
386.201 154.776 385.47 154.046 384.569 154.046 cv
383.668 154.046 382.937 154.776 382.937 155.678 cv
382.937 156.579 383.668 157.309 384.569 157.309 cv
385.47 157.309 386.201 156.579 386.201 155.678 cv
ef
383.129 155.678 mo
383.129 154.776 382.399 154.046 381.497 154.046 cv
380.596 154.046 379.866 154.776 379.866 155.678 cv
379.866 156.579 380.596 157.309 381.497 157.309 cv
382.399 157.309 383.129 156.579 383.129 155.678 cv
ef
379.962 155.678 mo
379.962 154.776 379.231 154.046 378.33 154.046 cv
377.429 154.046 376.698 154.776 376.698 155.678 cv
376.698 156.579 377.429 157.309 378.33 157.309 cv
379.231 157.309 379.962 156.579 379.962 155.678 cv
ef
376.89 155.678 mo
376.89 154.776 376.159 154.046 375.258 154.046 cv
374.357 154.046 373.626 154.776 373.626 155.678 cv
373.626 156.579 374.357 157.309 375.258 157.309 cv
376.159 157.309 376.89 156.579 376.89 155.678 cv
ef
373.722 54.6001 mo
373.722 53.6989 372.992 52.9682 372.09 52.9682 cv
371.189 52.9682 370.459 53.6989 370.459 54.6001 cv
370.459 55.5012 371.189 56.2319 372.09 56.2319 cv
372.992 56.2319 373.722 55.5012 373.722 54.6001 cv
ef
370.651 15.3402 mo
370.651 14.439 369.92 13.7083 369.019 13.7083 cv
368.118 13.7083 367.387 14.439 367.387 15.3402 cv
367.387 16.2413 368.118 16.972 369.019 16.972 cv
369.92 16.972 370.651 16.2413 370.651 15.3402 cv
ef
367.483 15.3402 mo
367.483 14.439 366.752 13.7083 365.851 13.7083 cv
364.95 13.7083 364.219 14.439 364.219 15.3402 cv
364.219 16.2413 364.95 16.972 365.851 16.972 cv
366.752 16.972 367.483 16.2413 367.483 15.3402 cv
ef
364.411 15.3402 mo
364.411 14.439 363.681 13.7083 362.779 13.7083 cv
361.878 13.7083 361.148 14.439 361.148 15.3402 cv
361.148 16.2413 361.878 16.972 362.779 16.972 cv
363.681 16.972 364.411 16.2413 364.411 15.3402 cv
ef
361.244 15.3402 mo
361.244 14.439 360.513 13.7083 359.612 13.7083 cv
358.711 13.7083 357.98 14.439 357.98 15.3402 cv
357.98 16.2413 358.711 16.972 359.612 16.972 cv
360.513 16.972 361.244 16.2413 361.244 15.3402 cv
ef
358.172 15.3402 mo
358.172 14.439 357.441 13.7083 356.54 13.7083 cv
355.639 13.7083 354.908 14.439 354.908 15.3402 cv
354.908 16.2413 355.639 16.972 356.54 16.972 cv
357.441 16.972 358.172 16.2413 358.172 15.3402 cv
ef
355.004 15.3402 mo
355.004 14.439 354.274 13.7083 353.372 13.7083 cv
352.471 13.7083 351.741 14.439 351.741 15.3402 cv
351.741 16.2413 352.471 16.972 353.372 16.972 cv
354.274 16.972 355.004 16.2413 355.004 15.3402 cv
ef
351.933 15.3402 mo
351.933 14.439 351.202 13.7083 350.301 13.7083 cv
349.4 13.7083 348.669 14.439 348.669 15.3402 cv
348.669 16.2413 349.4 16.972 350.301 16.972 cv
351.202 16.972 351.933 16.2413 351.933 15.3402 cv
ef
348.765 15.3402 mo
348.765 14.439 348.034 13.7083 347.133 13.7083 cv
346.232 13.7083 345.501 14.439 345.501 15.3402 cv
345.501 16.2413 346.232 16.972 347.133 16.972 cv
348.034 16.972 348.765 16.2413 348.765 15.3402 cv
ef
345.693 15.3402 mo
345.693 14.439 344.963 13.7083 344.061 13.7083 cv
343.16 13.7083 342.43 14.439 342.43 15.3402 cv
342.43 16.2413 343.16 16.972 344.061 16.972 cv
344.963 16.972 345.693 16.2413 345.693 15.3402 cv
ef
342.526 15.3402 mo
342.526 14.439 341.795 13.7083 340.894 13.7083 cv
339.993 13.7083 339.262 14.439 339.262 15.3402 cv
339.262 16.2413 339.993 16.972 340.894 16.972 cv
341.795 16.972 342.526 16.2413 342.526 15.3402 cv
ef
339.454 15.3402 mo
339.454 14.439 338.723 13.7083 337.822 13.7083 cv
336.921 13.7083 336.19 14.439 336.19 15.3402 cv
336.19 16.2413 336.921 16.972 337.822 16.972 cv
338.723 16.972 339.454 16.2413 339.454 15.3402 cv
ef
336.286 15.3402 mo
336.286 14.439 335.556 13.7083 334.654 13.7083 cv
333.753 13.7083 333.023 14.439 333.023 15.3402 cv
333.023 16.2413 333.753 16.972 334.654 16.972 cv
335.556 16.972 336.286 16.2413 336.286 15.3402 cv
ef
333.215 15.3402 mo
333.215 14.439 332.484 13.7083 331.583 13.7083 cv
330.682 13.7083 329.951 14.439 329.951 15.3402 cv
329.951 16.2413 330.682 16.972 331.583 16.972 cv
332.484 16.972 333.215 16.2413 333.215 15.3402 cv
ef
330.047 15.3402 mo
330.047 14.439 329.316 13.7083 328.415 13.7083 cv
327.514 13.7083 326.783 14.439 326.783 15.3402 cv
326.783 16.2413 327.514 16.972 328.415 16.972 cv
329.316 16.972 330.047 16.2413 330.047 15.3402 cv
ef
326.975 19.7557 mo
326.975 18.8545 326.244 18.1239 325.343 18.1239 cv
324.442 18.1239 323.711 18.8545 323.711 19.7557 cv
323.711 20.6569 324.442 21.3875 325.343 21.3875 cv
326.244 21.3875 326.975 20.6569 326.975 19.7557 cv
ef
323.807 20.3316 mo
323.807 19.4305 323.077 18.6998 322.176 18.6998 cv
321.275 18.6998 320.544 19.4305 320.544 20.3316 cv
320.544 21.2328 321.275 21.9635 322.176 21.9635 cv
323.077 21.9635 323.807 21.2328 323.807 20.3316 cv
ef
320.736 15.3402 mo
320.736 14.439 320.005 13.7083 319.104 13.7083 cv
318.203 13.7083 317.472 14.439 317.472 15.3402 cv
317.472 16.2413 318.203 16.972 319.104 16.972 cv
320.005 16.972 320.736 16.2413 320.736 15.3402 cv
ef
317.568 18.2199 mo
317.568 17.3187 316.837 16.588 315.936 16.588 cv
315.035 16.588 314.304 17.3187 314.304 18.2199 cv
314.304 19.121 315.035 19.8517 315.936 19.8517 cv
316.837 19.8517 317.568 19.121 317.568 18.2199 cv
ef
314.496 21.0036 mo
314.496 20.1024 313.766 19.3717 312.865 19.3717 cv
311.963 19.3717 311.233 20.1024 311.233 21.0036 cv
311.233 21.9047 311.963 22.6354 312.865 22.6354 cv
313.766 22.6354 314.496 21.9047 314.496 21.0036 cv
ef
311.329 18.9878 mo
311.329 18.0866 310.598 17.3559 309.697 17.3559 cv
308.796 17.3559 308.065 18.0866 308.065 18.9878 cv
308.065 19.8889 308.796 20.6196 309.697 20.6196 cv
310.598 20.6196 311.329 19.8889 311.329 18.9878 cv
ef
308.257 18.0279 mo
308.257 17.1267 307.526 16.396 306.625 16.396 cv
305.724 16.396 304.993 17.1267 304.993 18.0279 cv
304.993 18.929 305.724 19.6597 306.625 19.6597 cv
307.526 19.6597 308.257 18.929 308.257 18.0279 cv
ef
305.089 22.3474 mo
305.089 21.4463 304.359 20.7156 303.458 20.7156 cv
302.556 20.7156 301.826 21.4463 301.826 22.3474 cv
301.826 23.2486 302.556 23.9793 303.458 23.9793 cv
304.359 23.9793 305.089 23.2486 305.089 22.3474 cv
ef
302.018 20.0437 mo
302.018 19.1425 301.287 18.4118 300.386 18.4118 cv
299.485 18.4118 298.754 19.1425 298.754 20.0437 cv
298.754 20.9448 299.485 21.6755 300.386 21.6755 cv
301.287 21.6755 302.018 20.9448 302.018 20.0437 cv
ef
298.85 20.4276 mo
298.85 19.5265 298.119 18.7958 297.218 18.7958 cv
296.317 18.7958 295.586 19.5265 295.586 20.4276 cv
295.586 21.3288 296.317 22.0595 297.218 22.0595 cv
298.119 22.0595 298.85 21.3288 298.85 20.4276 cv
ef
295.778 23.5953 mo
295.778 22.6942 295.048 21.9635 294.147 21.9635 cv
293.245 21.9635 292.515 22.6942 292.515 23.5953 cv
292.515 24.4965 293.245 25.2271 294.147 25.2271 cv
295.048 25.2271 295.778 24.4965 295.778 23.5953 cv
ef
292.611 26.283 mo
292.611 25.3819 291.88 24.6512 290.979 24.6512 cv
290.078 24.6512 289.347 25.3819 289.347 26.283 cv
289.347 27.1842 290.078 27.9148 290.979 27.9148 cv
291.88 27.9148 292.611 27.1842 292.611 26.283 cv
ef
289.539 26.475 mo
289.539 25.5739 288.808 24.8432 287.907 24.8432 cv
287.006 24.8432 286.275 25.5739 286.275 26.475 cv
286.275 27.3762 287.006 28.1068 287.907 28.1068 cv
288.808 28.1068 289.539 27.3762 289.539 26.475 cv
ef
286.371 26.859 mo
286.371 25.9578 285.641 25.2271 284.74 25.2271 cv
283.838 25.2271 283.108 25.9578 283.108 26.859 cv
283.108 27.7601 283.838 28.4908 284.74 28.4908 cv
285.641 28.4908 286.371 27.7601 286.371 26.859 cv
ef
283.3 31.7545 mo
283.3 30.8533 282.569 30.1226 281.668 30.1226 cv
280.767 30.1226 280.036 30.8533 280.036 31.7545 cv
280.036 32.6556 280.767 33.3863 281.668 33.3863 cv
282.569 33.3863 283.3 32.6556 283.3 31.7545 cv
ef
280.132 71.9743 mo
280.132 71.0731 279.401 70.3424 278.5 70.3424 cv
277.599 70.3424 276.868 71.0731 276.868 71.9743 cv
276.868 72.8754 277.599 73.6061 278.5 73.6061 cv
279.401 73.6061 280.132 72.8754 280.132 71.9743 cv
ef
277.06 109.314 mo
277.06 108.413 276.33 107.683 275.429 107.683 cv
274.527 107.683 273.797 108.413 273.797 109.314 cv
273.797 110.216 274.527 110.946 275.429 110.946 cv
276.33 110.946 277.06 110.216 277.06 109.314 cv
ef
428.245 154.046 mo
426.613 157.309 li
429.876 157.309 li
.269902 .816403 0 0 cmyk
ef
425.173 154.046 mo
423.541 157.309 li
426.805 157.309 li
ef
422.005 154.046 mo
420.373 157.309 li
423.637 157.309 li
ef
418.934 154.046 mo
417.302 157.309 li
420.565 157.309 li
ef
415.766 154.046 mo
414.134 157.309 li
417.398 157.309 li
ef
412.694 154.046 mo
411.062 157.309 li
414.326 157.309 li
ef
409.527 154.046 mo
407.895 157.309 li
411.158 157.309 li
ef
406.455 154.046 mo
404.823 157.309 li
408.087 157.309 li
ef
403.287 154.046 mo
401.655 157.309 li
404.919 157.309 li
ef
400.216 154.046 mo
398.584 157.309 li
401.847 157.309 li
ef
397.048 154.046 mo
395.416 157.309 li
398.68 157.309 li
ef
393.976 154.046 mo
392.344 157.309 li
395.608 157.309 li
ef
390.809 154.046 mo
389.177 157.309 li
392.44 157.309 li
ef
387.737 154.046 mo
386.105 157.309 li
389.369 157.309 li
ef
384.569 154.046 mo
382.937 157.309 li
386.201 157.309 li
ef
381.497 154.046 mo
379.866 157.309 li
383.129 157.309 li
ef
378.33 154.046 mo
376.698 157.309 li
379.962 157.309 li
ef
375.258 154.046 mo
373.626 157.309 li
376.89 157.309 li
ef
372.09 51.4324 mo
370.459 54.6961 li
373.722 54.6961 li
ef
369.019 13.7083 mo
367.387 16.972 li
370.651 16.972 li
ef
365.851 13.7083 mo
364.219 16.972 li
367.483 16.972 li
ef
362.779 13.7083 mo
361.148 16.972 li
364.411 16.972 li
ef
359.612 13.7083 mo
357.98 16.972 li
361.244 16.972 li
ef
356.54 13.7083 mo
354.908 16.972 li
358.172 16.972 li
ef
353.372 13.7083 mo
351.741 16.972 li
355.004 16.972 li
ef
350.301 13.7083 mo
348.669 16.972 li
351.933 16.972 li
ef
347.133 13.7083 mo
345.501 16.972 li
348.765 16.972 li
ef
344.061 13.7083 mo
342.43 16.972 li
345.693 16.972 li
ef
340.894 13.7083 mo
339.262 16.972 li
342.526 16.972 li
ef
337.822 13.7083 mo
336.19 16.972 li
339.454 16.972 li
ef
334.654 13.7083 mo
333.023 16.972 li
336.286 16.972 li
ef
331.583 13.7083 mo
329.951 16.972 li
333.215 16.972 li
ef
328.415 13.7083 mo
326.783 16.972 li
330.047 16.972 li
ef
325.343 21.0036 mo
323.711 24.2672 li
326.975 24.2672 li
ef
322.176 18.6998 mo
320.544 21.9635 li
323.807 21.9635 li
ef
319.104 13.7083 mo
317.472 16.972 li
320.736 16.972 li
ef
315.936 16.588 mo
314.304 19.8517 li
317.568 19.8517 li
ef
312.865 19.3717 mo
311.233 22.6354 li
314.496 22.6354 li
ef
309.697 17.3559 mo
308.065 20.6196 li
311.329 20.6196 li
ef
306.625 16.396 mo
304.993 19.6597 li
308.257 19.6597 li
ef
303.458 20.7156 mo
301.826 23.9793 li
305.089 23.9793 li
ef
300.386 17.26 mo
298.754 20.5236 li
302.018 20.5236 li
ef
297.218 16.3001 mo
295.586 19.5637 li
298.85 19.5637 li
ef
294.147 20.8116 mo
292.515 24.0752 li
295.778 24.0752 li
ef
290.979 19.1798 mo
289.347 22.4434 li
292.611 22.4434 li
ef
287.907 20.7156 mo
286.275 23.9793 li
289.539 23.9793 li
ef
284.74 36.6499 mo
283.108 39.9136 li
286.371 39.9136 li
ef
281.668 51.6244 mo
280.036 54.888 li
283.3 54.888 li
ef
278.5 88.3885 mo
276.868 91.6522 li
280.132 91.6522 li
ef
275.429 145.791 mo
273.797 149.054 li
277.06 149.054 li
ef
429.876 155.678 mo
429.876 154.776 429.146 154.046 428.245 154.046 cv
427.343 154.046 426.613 154.776 426.613 155.678 cv
426.613 156.579 427.343 157.309 428.245 157.309 cv
429.146 157.309 429.876 156.579 429.876 155.678 cv
1 /0 /CSD get_res sepcs
1 sep
@
426.805 155.678 mo
426.805 154.776 426.074 154.046 425.173 154.046 cv
424.272 154.046 423.541 154.776 423.541 155.678 cv
423.541 156.579 424.272 157.309 425.173 157.309 cv
426.074 157.309 426.805 156.579 426.805 155.678 cv
@
423.637 155.678 mo
423.637 154.776 422.906 154.046 422.005 154.046 cv
421.104 154.046 420.373 154.776 420.373 155.678 cv
420.373 156.579 421.104 157.309 422.005 157.309 cv
422.906 157.309 423.637 156.579 423.637 155.678 cv
@
420.565 155.678 mo
420.565 154.776 419.835 154.046 418.934 154.046 cv
418.032 154.046 417.302 154.776 417.302 155.678 cv
417.302 156.579 418.032 157.309 418.934 157.309 cv
419.835 157.309 420.565 156.579 420.565 155.678 cv
@
417.398 155.678 mo
417.398 154.776 416.667 154.046 415.766 154.046 cv
414.865 154.046 414.134 154.776 414.134 155.678 cv
414.134 156.579 414.865 157.309 415.766 157.309 cv
416.667 157.309 417.398 156.579 417.398 155.678 cv
@
414.326 155.678 mo
414.326 154.776 413.595 154.046 412.694 154.046 cv
411.793 154.046 411.062 154.776 411.062 155.678 cv
411.062 156.579 411.793 157.309 412.694 157.309 cv
413.595 157.309 414.326 156.579 414.326 155.678 cv
@
411.158 155.678 mo
411.158 154.776 410.428 154.046 409.527 154.046 cv
408.625 154.046 407.895 154.776 407.895 155.678 cv
407.895 156.579 408.625 157.309 409.527 157.309 cv
410.428 157.309 411.158 156.579 411.158 155.678 cv
@
408.087 155.678 mo
408.087 154.776 407.356 154.046 406.455 154.046 cv
405.554 154.046 404.823 154.776 404.823 155.678 cv
404.823 156.579 405.554 157.309 406.455 157.309 cv
407.356 157.309 408.087 156.579 408.087 155.678 cv
@
404.919 155.678 mo
404.919 154.776 404.188 154.046 403.287 154.046 cv
402.386 154.046 401.655 154.776 401.655 155.678 cv
401.655 156.579 402.386 157.309 403.287 157.309 cv
404.188 157.309 404.919 156.579 404.919 155.678 cv
@
401.847 155.678 mo
401.847 154.776 401.117 154.046 400.216 154.046 cv
399.314 154.046 398.584 154.776 398.584 155.678 cv
398.584 156.579 399.314 157.309 400.216 157.309 cv
401.117 157.309 401.847 156.579 401.847 155.678 cv
@
398.68 155.678 mo
398.68 154.776 397.949 154.046 397.048 154.046 cv
396.147 154.046 395.416 154.776 395.416 155.678 cv
395.416 156.579 396.147 157.309 397.048 157.309 cv
397.949 157.309 398.68 156.579 398.68 155.678 cv
@
395.608 155.678 mo
395.608 154.776 394.877 154.046 393.976 154.046 cv
393.075 154.046 392.344 154.776 392.344 155.678 cv
392.344 156.579 393.075 157.309 393.976 157.309 cv
394.877 157.309 395.608 156.579 395.608 155.678 cv
@
392.44 155.678 mo
392.44 154.776 391.71 154.046 390.809 154.046 cv
389.907 154.046 389.177 154.776 389.177 155.678 cv
389.177 156.579 389.907 157.309 390.809 157.309 cv
391.71 157.309 392.44 156.579 392.44 155.678 cv
@
389.369 155.678 mo
389.369 154.776 388.638 154.046 387.737 154.046 cv
386.836 154.046 386.105 154.776 386.105 155.678 cv
386.105 156.579 386.836 157.309 387.737 157.309 cv
388.638 157.309 389.369 156.579 389.369 155.678 cv
@
386.201 155.678 mo
386.201 154.776 385.47 154.046 384.569 154.046 cv
383.668 154.046 382.937 154.776 382.937 155.678 cv
382.937 156.579 383.668 157.309 384.569 157.309 cv
385.47 157.309 386.201 156.579 386.201 155.678 cv
@
383.129 155.678 mo
383.129 154.776 382.399 154.046 381.497 154.046 cv
380.596 154.046 379.866 154.776 379.866 155.678 cv
379.866 156.579 380.596 157.309 381.497 157.309 cv
382.399 157.309 383.129 156.579 383.129 155.678 cv
@
379.962 155.678 mo
379.962 154.776 379.231 154.046 378.33 154.046 cv
377.429 154.046 376.698 154.776 376.698 155.678 cv
376.698 156.579 377.429 157.309 378.33 157.309 cv
379.231 157.309 379.962 156.579 379.962 155.678 cv
@
376.89 155.678 mo
376.89 154.776 376.159 154.046 375.258 154.046 cv
374.357 154.046 373.626 154.776 373.626 155.678 cv
373.626 156.579 374.357 157.309 375.258 157.309 cv
376.159 157.309 376.89 156.579 376.89 155.678 cv
@
373.722 54.6001 mo
373.722 53.6989 372.992 52.9682 372.09 52.9682 cv
371.189 52.9682 370.459 53.6989 370.459 54.6001 cv
370.459 55.5012 371.189 56.2319 372.09 56.2319 cv
372.992 56.2319 373.722 55.5012 373.722 54.6001 cv
@
370.651 15.3402 mo
370.651 14.439 369.92 13.7083 369.019 13.7083 cv
368.118 13.7083 367.387 14.439 367.387 15.3402 cv
367.387 16.2413 368.118 16.972 369.019 16.972 cv
369.92 16.972 370.651 16.2413 370.651 15.3402 cv
@
367.483 15.3402 mo
367.483 14.439 366.752 13.7083 365.851 13.7083 cv
364.95 13.7083 364.219 14.439 364.219 15.3402 cv
364.219 16.2413 364.95 16.972 365.851 16.972 cv
366.752 16.972 367.483 16.2413 367.483 15.3402 cv
@
364.411 15.3402 mo
364.411 14.439 363.681 13.7083 362.779 13.7083 cv
361.878 13.7083 361.148 14.439 361.148 15.3402 cv
361.148 16.2413 361.878 16.972 362.779 16.972 cv
363.681 16.972 364.411 16.2413 364.411 15.3402 cv
@
361.244 15.3402 mo
361.244 14.439 360.513 13.7083 359.612 13.7083 cv
358.711 13.7083 357.98 14.439 357.98 15.3402 cv
357.98 16.2413 358.711 16.972 359.612 16.972 cv
360.513 16.972 361.244 16.2413 361.244 15.3402 cv
@
358.172 15.3402 mo
358.172 14.439 357.441 13.7083 356.54 13.7083 cv
355.639 13.7083 354.908 14.439 354.908 15.3402 cv
354.908 16.2413 355.639 16.972 356.54 16.972 cv
357.441 16.972 358.172 16.2413 358.172 15.3402 cv
@
355.004 15.3402 mo
355.004 14.439 354.274 13.7083 353.372 13.7083 cv
352.471 13.7083 351.741 14.439 351.741 15.3402 cv
351.741 16.2413 352.471 16.972 353.372 16.972 cv
354.274 16.972 355.004 16.2413 355.004 15.3402 cv
@
351.933 15.3402 mo
351.933 14.439 351.202 13.7083 350.301 13.7083 cv
349.4 13.7083 348.669 14.439 348.669 15.3402 cv
348.669 16.2413 349.4 16.972 350.301 16.972 cv
351.202 16.972 351.933 16.2413 351.933 15.3402 cv
@
348.765 15.3402 mo
348.765 14.439 348.034 13.7083 347.133 13.7083 cv
346.232 13.7083 345.501 14.439 345.501 15.3402 cv
345.501 16.2413 346.232 16.972 347.133 16.972 cv
348.034 16.972 348.765 16.2413 348.765 15.3402 cv
@
345.693 15.3402 mo
345.693 14.439 344.963 13.7083 344.061 13.7083 cv
343.16 13.7083 342.43 14.439 342.43 15.3402 cv
342.43 16.2413 343.16 16.972 344.061 16.972 cv
344.963 16.972 345.693 16.2413 345.693 15.3402 cv
@
342.526 15.3402 mo
342.526 14.439 341.795 13.7083 340.894 13.7083 cv
339.993 13.7083 339.262 14.439 339.262 15.3402 cv
339.262 16.2413 339.993 16.972 340.894 16.972 cv
341.795 16.972 342.526 16.2413 342.526 15.3402 cv
@
339.454 15.3402 mo
339.454 14.439 338.723 13.7083 337.822 13.7083 cv
336.921 13.7083 336.19 14.439 336.19 15.3402 cv
336.19 16.2413 336.921 16.972 337.822 16.972 cv
338.723 16.972 339.454 16.2413 339.454 15.3402 cv
@
336.286 15.3402 mo
336.286 14.439 335.556 13.7083 334.654 13.7083 cv
333.753 13.7083 333.023 14.439 333.023 15.3402 cv
333.023 16.2413 333.753 16.972 334.654 16.972 cv
335.556 16.972 336.286 16.2413 336.286 15.3402 cv
@
333.215 15.3402 mo
333.215 14.439 332.484 13.7083 331.583 13.7083 cv
330.682 13.7083 329.951 14.439 329.951 15.3402 cv
329.951 16.2413 330.682 16.972 331.583 16.972 cv
332.484 16.972 333.215 16.2413 333.215 15.3402 cv
@
330.047 15.3402 mo
330.047 14.439 329.316 13.7083 328.415 13.7083 cv
327.514 13.7083 326.783 14.439 326.783 15.3402 cv
326.783 16.2413 327.514 16.972 328.415 16.972 cv
329.316 16.972 330.047 16.2413 330.047 15.3402 cv
@
326.975 19.7557 mo
326.975 18.8545 326.244 18.1239 325.343 18.1239 cv
324.442 18.1239 323.711 18.8545 323.711 19.7557 cv
323.711 20.6569 324.442 21.3875 325.343 21.3875 cv
326.244 21.3875 326.975 20.6569 326.975 19.7557 cv
@
323.807 20.3316 mo
323.807 19.4305 323.077 18.6998 322.176 18.6998 cv
321.275 18.6998 320.544 19.4305 320.544 20.3316 cv
320.544 21.2328 321.275 21.9635 322.176 21.9635 cv
323.077 21.9635 323.807 21.2328 323.807 20.3316 cv
@
320.736 15.3402 mo
320.736 14.439 320.005 13.7083 319.104 13.7083 cv
318.203 13.7083 317.472 14.439 317.472 15.3402 cv
317.472 16.2413 318.203 16.972 319.104 16.972 cv
320.005 16.972 320.736 16.2413 320.736 15.3402 cv
@
317.568 18.2199 mo
317.568 17.3187 316.837 16.588 315.936 16.588 cv
315.035 16.588 314.304 17.3187 314.304 18.2199 cv
314.304 19.121 315.035 19.8517 315.936 19.8517 cv
316.837 19.8517 317.568 19.121 317.568 18.2199 cv
@
314.496 21.0036 mo
314.496 20.1024 313.766 19.3717 312.865 19.3717 cv
311.963 19.3717 311.233 20.1024 311.233 21.0036 cv
311.233 21.9047 311.963 22.6354 312.865 22.6354 cv
313.766 22.6354 314.496 21.9047 314.496 21.0036 cv
@
311.329 18.9878 mo
311.329 18.0866 310.598 17.3559 309.697 17.3559 cv
308.796 17.3559 308.065 18.0866 308.065 18.9878 cv
308.065 19.8889 308.796 20.6196 309.697 20.6196 cv
310.598 20.6196 311.329 19.8889 311.329 18.9878 cv
@
308.257 18.0279 mo
308.257 17.1267 307.526 16.396 306.625 16.396 cv
305.724 16.396 304.993 17.1267 304.993 18.0279 cv
304.993 18.929 305.724 19.6597 306.625 19.6597 cv
307.526 19.6597 308.257 18.929 308.257 18.0279 cv
@
305.089 22.3474 mo
305.089 21.4463 304.359 20.7156 303.458 20.7156 cv
302.556 20.7156 301.826 21.4463 301.826 22.3474 cv
301.826 23.2486 302.556 23.9793 303.458 23.9793 cv
304.359 23.9793 305.089 23.2486 305.089 22.3474 cv
@
302.018 20.0437 mo
302.018 19.1425 301.287 18.4118 300.386 18.4118 cv
299.485 18.4118 298.754 19.1425 298.754 20.0437 cv
298.754 20.9448 299.485 21.6755 300.386 21.6755 cv
301.287 21.6755 302.018 20.9448 302.018 20.0437 cv
@
298.85 20.4276 mo
298.85 19.5265 298.119 18.7958 297.218 18.7958 cv
296.317 18.7958 295.586 19.5265 295.586 20.4276 cv
295.586 21.3288 296.317 22.0595 297.218 22.0595 cv
298.119 22.0595 298.85 21.3288 298.85 20.4276 cv
@
295.778 22.4434 mo
295.778 21.5423 295.048 20.8116 294.147 20.8116 cv
293.245 20.8116 292.515 21.5423 292.515 22.4434 cv
292.515 23.3446 293.245 24.0752 294.147 24.0752 cv
295.048 24.0752 295.778 23.3446 295.778 22.4434 cv
@
292.611 27.6269 mo
292.611 26.7257 291.88 25.995 290.979 25.995 cv
290.078 25.995 289.347 26.7257 289.347 27.6269 cv
289.347 28.528 290.078 29.2587 290.979 29.2587 cv
291.88 29.2587 292.611 28.528 292.611 27.6269 cv
@
289.539 29.2587 mo
289.539 28.3576 288.808 27.6269 287.907 27.6269 cv
287.006 27.6269 286.275 28.3576 286.275 29.2587 cv
286.275 30.1599 287.006 30.8905 287.907 30.8905 cv
288.808 30.8905 289.539 30.1599 289.539 29.2587 cv
@
286.371 26.859 mo
286.371 25.9578 285.641 25.2271 284.74 25.2271 cv
283.838 25.2271 283.108 25.9578 283.108 26.859 cv
283.108 27.7601 283.838 28.4908 284.74 28.4908 cv
285.641 28.4908 286.371 27.7601 286.371 26.859 cv
@
283.3 33.7702 mo
283.3 32.8691 282.569 32.1384 281.668 32.1384 cv
280.767 32.1384 280.036 32.8691 280.036 33.7702 cv
280.036 34.6714 280.767 35.4021 281.668 35.4021 cv
282.569 35.4021 283.3 34.6714 283.3 33.7702 cv
@
280.132 71.9743 mo
280.132 71.0731 279.401 70.3424 278.5 70.3424 cv
277.599 70.3424 276.868 71.0731 276.868 71.9743 cv
276.868 72.8754 277.599 73.6061 278.5 73.6061 cv
279.401 73.6061 280.132 72.8754 280.132 71.9743 cv
@
277.06 109.314 mo
277.06 108.413 276.33 107.683 275.429 107.683 cv
274.527 107.683 273.797 108.413 273.797 109.314 cv
273.797 110.216 274.527 110.946 275.429 110.946 cv
276.33 110.946 277.06 110.216 277.06 109.314 cv
@
428.245 154.046 mo
426.613 157.309 li
429.876 157.309 li
cp
.269902 .816403 0 0 cmyk
@
425.173 154.046 mo
423.541 157.309 li
426.805 157.309 li
cp
@
422.005 154.046 mo
420.373 157.309 li
423.637 157.309 li
cp
@
418.934 154.046 mo
417.302 157.309 li
420.565 157.309 li
cp
@
415.766 154.046 mo
414.134 157.309 li
417.398 157.309 li
cp
@
412.694 154.046 mo
411.062 157.309 li
414.326 157.309 li
cp
@
409.527 154.046 mo
407.895 157.309 li
411.158 157.309 li
cp
@
406.455 154.046 mo
404.823 157.309 li
408.087 157.309 li
cp
@
403.287 154.046 mo
401.655 157.309 li
404.919 157.309 li
cp
@
400.216 154.046 mo
398.584 157.309 li
401.847 157.309 li
cp
@
397.048 154.046 mo
395.416 157.309 li
398.68 157.309 li
cp
@
393.976 154.046 mo
392.344 157.309 li
395.608 157.309 li
cp
@
390.809 154.046 mo
389.177 157.309 li
392.44 157.309 li
cp
@
387.737 154.046 mo
386.105 157.309 li
389.369 157.309 li
cp
@
384.569 154.046 mo
382.937 157.309 li
386.201 157.309 li
cp
@
381.497 154.046 mo
379.866 157.309 li
383.129 157.309 li
cp
@
378.33 154.046 mo
376.698 157.309 li
379.962 157.309 li
cp
@
375.258 154.046 mo
373.626 157.309 li
376.89 157.309 li
cp
@
372.09 51.4324 mo
370.459 54.6961 li
373.722 54.6961 li
cp
@
369.019 13.7083 mo
367.387 16.972 li
370.651 16.972 li
cp
@
365.851 13.7083 mo
364.219 16.972 li
367.483 16.972 li
cp
@
362.779 13.7083 mo
361.148 16.972 li
364.411 16.972 li
cp
@
359.612 13.7083 mo
357.98 16.972 li
361.244 16.972 li
cp
@
356.54 13.7083 mo
354.908 16.972 li
358.172 16.972 li
cp
@
353.372 13.7083 mo
351.741 16.972 li
355.004 16.972 li
cp
@
350.301 13.7083 mo
348.669 16.972 li
351.933 16.972 li
cp
@
347.133 13.7083 mo
345.501 16.972 li
348.765 16.972 li
cp
@
344.061 13.7083 mo
342.43 16.972 li
345.693 16.972 li
cp
@
340.894 13.7083 mo
339.262 16.972 li
342.526 16.972 li
cp
@
337.822 13.7083 mo
336.19 16.972 li
339.454 16.972 li
cp
@
334.654 13.7083 mo
333.023 16.972 li
336.286 16.972 li
cp
@
331.583 13.7083 mo
329.951 16.972 li
333.215 16.972 li
cp
@
328.415 13.7083 mo
326.783 16.972 li
330.047 16.972 li
cp
@
325.343 21.0036 mo
323.711 24.2672 li
326.975 24.2672 li
cp
@
322.176 18.6998 mo
320.544 21.9635 li
323.807 21.9635 li
cp
@
319.104 13.7083 mo
317.472 16.972 li
320.736 16.972 li
cp
@
315.936 16.588 mo
314.304 19.8517 li
317.568 19.8517 li
cp
@
312.865 19.3717 mo
311.233 22.6354 li
314.496 22.6354 li
cp
@
309.697 17.3559 mo
308.065 20.6196 li
311.329 20.6196 li
cp
@
306.625 16.396 mo
304.993 19.6597 li
308.257 19.6597 li
cp
@
303.458 19.5637 mo
301.826 22.8274 li
305.089 22.8274 li
cp
@
300.386 18.4118 mo
298.754 21.6755 li
302.018 21.6755 li
cp
@
297.218 16.3001 mo
295.586 19.5637 li
298.85 19.5637 li
cp
@
294.147 18.4118 mo
292.515 21.6755 li
295.778 21.6755 li
cp
@
290.979 15.1482 mo
289.347 18.4118 li
292.611 18.4118 li
cp
@
287.907 15.1482 mo
286.275 18.4118 li
289.539 18.4118 li
cp
@
284.74 34.0582 mo
283.108 37.3219 li
286.371 37.3219 li
cp
@
281.668 40.3936 mo
280.036 43.6572 li
283.3 43.6572 li
cp
@
278.5 72.8382 mo
276.868 76.1018 li
280.132 76.1018 li
cp
@
275.429 146.942 mo
273.797 150.206 li
277.06 150.206 li
cp
@
336.574 144.639 mo
443.219 144.639 li
443.219 95.0119 li
336.574 95.0119 li
cp
0 0 0 0 cmyk
ef
.09599 lw
336.574 144.639 mo
443.219 144.639 li
443.219 95.0119 li
336.574 95.0119 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HJCBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLT+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B7F37489A06F9529783C031558988C863E410A0DF584A6
9C5F43BA5C59A31785C289BA346D> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9957E54B02A1B91
7BC7F58F0AFBE439533E1ED46D143AB7B6719EE7E0A26AAD917CFE50F9D86916
60D06C3609FC503F9ECA5CDB98AFE470AC59DBE98B6FDB230F8752671ED6E8FF
1CA85C9DF60AA97812A58FCE5F562EE9FCD8C494B7D75B4D71BD5A39C61E27> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/b <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF0C4A70B10635B01529BB5E
E6AEAE58EA247A0F91A593B31240628F951C79A5DD142AB857206089096697F2
55FD0BC09DAAB839BE79130A44C5BFC02FF0EF17919902CE2A5F543D8E5371CC
4CC55ED1F5B047> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1097DCFFBFA904FBC8BD2781B69097605934011255CC1E77D9
74D42A5734080EC34301EC4BC5AA107FFDCEDB9EBE2B62B885971DC22E> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20B78B29FDD6FEE0B6539DE8A33498C1030568392
E61F4D3AC749A9AF964BAC7AE995A2B5418E7F9778BBEB9A720A5B1929175BE1
4597229641042269FF> |-
/g <1C60D8A8C9B7EF3227B253BA0513287033C8093CD601937B772648EA572C
C1F007E60EAC5321180CAEF3B4CD4B7C2758F76BC22FC84DB4A94F7544889552
5DEAB206C682769EE7900A7C0DAC28B7B90B70137B62344CD13E6DE3F4C31E8C
9856BC9B1ADDAC3624D7E74BF1CF3CD5C2FFB5E1A0EE3D580B04A652A3D783FD
FDB61EBCCCBC89D286E63D953A1423DBF70AE168D78C192EEA9D64476A412048> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93CCC5A502AC76AA3605F6F842E0C
6884B1AC78E4F6F7E0C35601D9142672E63805C6C437F58826490DDF1942A9DD
9E1CCD138DDFD598A3C09163CA0FC236518D17D98D39776EB3E76C4DB2FFD5> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE00CD8FF68F0C83CA1093E2917BE43AC2B76913
74CEEBA4813FABE9DE36AFBA9AD7E27F79F4267782F8C1880C04EB5A86ABB72C
F3AA7E2A7A1DC5A3046E365650C02D117CFC31976F1DE30127C1A59F7C584532
62B9834D30557E406234> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF7911330405AF7E6F0
1E787476F0618434BE96954E00B578FFB147A39DAD333F304533F66B3B7418B0
4EE5BF9C8839EFB740337F67A7CADF9BAF26C32B55149B7D6557640A956083A5> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD662709034A2A779D529AF125A278342C76D9DA0
E4C390660AA8DCC02CC67E9DE7> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69FB1B9D669614BD5BE9BBF7
73402916AA1AB18ABAFACA395E7B6EB52820B5969441875A0179F798326186BE
61C9F2FFB5B271B31D4CC387231EAE08C0E3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLT+Helvetica /Encoding get
dup 61 /equal put
dup 69 /E put
dup 71 /G put
dup 86 /V put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/BQUHLT+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
4{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 
4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c 
/d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 
/m /n /.notdef /p /.notdef /r /s /t 
/u 138{/.notdef}rp]
BQUHLT+Helvetica nf
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
347.484 102.005 mo
(=1500GeV)sh
BQUHLT+Helvetica*1 [5.74277 0 0 -5.74277 0 0 ]msf
344.475 103.92 mo
(e)sh
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
339.006 102.005 mo
(E)sh
363.071 112.124 mo
(clustering, pregen bg)sh
340.606 113.442 mo
359.228 113.442 li
359.228 106.435 li
340.606 106.435 li
cp
0 0 0 .0468452 cmyk
ef
.28797 lw
340.606 109.986 mo
359.228 109.986 li
1 /0 /CSD get_res sepcs
1 sep
@
351.549 109.986 mo
351.549 109.085 350.818 108.354 349.917 108.354 cv
349.016 108.354 348.285 109.085 348.285 109.986 cv
348.285 110.887 349.016 111.618 349.917 111.618 cv
350.818 111.618 351.549 110.887 351.549 109.986 cv
ef
%ADOBeginSubsetFont: HJCBAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLT+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EF743A44597C4F61CE6B8578AF705EBC4640B3DF516FF9DF739A5A37FECD
DF523B0115500A789A26F0B116775E> |-
/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD7
8AB956CD4302BB789AA6D333FFADD104DB65C1220150F33A25DDB6D0C3E3F2A1
02DFCFBF07D5AE34546281AAAE18BB2A6A1D8790> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A53F97
896760D132F78F6B167CFAFA8CFB5D9561B5531C39C66F4BF3CE151A4BF4C30B
42EB3D2B9A0463149463A6874D98E475CE2B3B76FD4C2B> |-
/w <1C60D8A8C9B6079F1E495238D734F67FB5E2A2BA6F1F073975099C282372
72C5E468B93051F423D5D62417FF2745759EEEF7FD240DC4B0B2C13B5678A844> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLT+Helvetica /Encoding get
dup 102 /f put
dup 104 /h put
dup 111 /o put
dup 119 /w put
pop
%ADOEndSubsetFont
/BQUHLT+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /three /four /five /six /.notdef /eight 
4{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 
4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c 
/d /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /.notdef /w 136{/.notdef}rp]
BQUHLT+Helvetica nf
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
363.071 121.969 mo
(shower fit, pregen bg)sh
340.606 123.329 mo
359.228 123.329 li
359.228 116.418 li
340.606 116.418 li
cp
0 0 0 .0468452 cmyk
ef
340.606 119.873 mo
359.228 119.873 li
1 /0 /CSD get_res sepcs
1 sep
@
349.917 118.241 mo
348.285 121.505 li
351.549 121.505 li
.269902 .816403 0 0 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
363.071 131.813 mo
(clustering, gausian bg)sh
340.606 133.312 mo
359.228 133.312 li
359.228 126.305 li
340.606 126.305 li
cp
0 0 0 .0468452 cmyk
ef
340.606 129.76 mo
359.228 129.76 li
1 /0 /CSD get_res sepcs
1 sep
@
351.549 129.76 mo
351.549 128.859 350.818 128.128 349.917 128.128 cv
349.016 128.128 348.285 128.859 348.285 129.76 cv
348.285 130.661 349.016 131.392 349.917 131.392 cv
350.818 131.392 351.549 130.661 351.549 129.76 cv
@
BQUHLT+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
363.071 141.931 mo
(shower fit, gausian bg)sh
340.606 143.199 mo
359.228 143.199 li
359.228 136.288 li
340.606 136.288 li
cp
0 0 0 .0468452 cmyk
ef
340.606 139.743 mo
359.228 139.743 li
1 /0 /CSD get_res sepcs
1 sep
@
349.917 138.111 mo
348.285 141.375 li
351.549 141.375 li
cp
.269902 .816403 0 0 cmyk
@
grestore
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CABCFCFB7572BA26C4F342CB44977C4D272DE413
3DB5EF66FB5CBCC13D7> |-
/five <1C60D8A8C9B7A73D33A88FEA12959A734E0957E304D49DC85E4BE1FA3
9EAB2AF48D0318F3CC26662E787C00C247C6E0112180BCE6759D50FF9BBD9846
DFA361CDEB2512314B6E62318760F370D90F648D279E929D53983BF8D2AC98EF
81CED8855AB0EC5338E13ECD1542C111649132984A10E95D5EFD7471329778D6
74DBEAC9048068A00D504E5675BFC58E3AC> |-
/colon <1C60D8A8C9B854D083E206F04B4C3DD188754390434C4FB50EB4672E
AEE8A85520BB1D78CE2A6974387875B94CD46C379E034A7804D304B20C0AC31F
F325F5883A400828> |-
/E <1C60D8A8C9B7D8BE6A6FAF13E57A5D0C2C66821CCEEF24B4E4419847787E
D4C8A98BBE3EBCCE15D1DC333F323E4C7D43FF48D1C1F11091632F6F11174D4D
B924B1BBA6DF69EF4ADB27C45D6BAFF8FAE037CF2DD63F0C99022D146FEDA01C
CFEE96DE599AE8069A8E5F6B8E0F74979F0CC193D875C6765F26CD248D1D0923
817F3CBDA21B14A62B3E828ED4997E1F5E3EED19C373DD0855950863084BA232
08116185FD3DCF> |-
/F <1C60D8A8C9B7EF322BCE349315DC362BCA8CFE4FA18BB639D443336F7111
E2FACF60D2E19F1D435E96E49FD0AF135C8F4D593F674BA833D2635B8F02FCB2
BA0EA4D7637689C705ACF839A843947A142679A187B852855766FB975C8A7F4A
36CBB0767C130BA6A421FFE56B2026B49CFD6C7C20869DFF5A9F134D0B5DB06E
3DBFFEF295> |-
/P <1C60D8A8C9B7EF322BA184F1B466A5F9E0510ACA70CC36BD5B876749AD4F
E16EDC508BA233A1AAAC6BA273FF20CF31BB17B9F1092A4BB71099575FEA4868
93AD4E3A7525913D0CD05606C6D78ACC32E189D016D7274A626F44BE17623E20
CF682C39158B1AF28D3051A12E160F64DF843604F0E5D5C417DF0F4700F18E24
35DD56AAB71313C4C2D0A2D81AEB42E579BF0FFF6DE110A340F6AA3B51D151D4
9C34D4B8C12908> |-
/b <1C60D8A8C9B7A73DCF483CC3D064C5D3508B11AE282C299523D8D2A309C1
7B70A170029C0F65CF90DD2BE591B98673683525C4890D287920F2AE4A535CEF
E47857E6491D69196894FC8103DF0EDDDC2D4539CDA22F565FDFB14A75B6689D
6F3BBF9428A6B06753AEFCDF61504E25> |-
/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD7913AEB5D830EAFE
778D8CA9FE61C9F1D7F341AAC32F9CA6E189A5065ADF2D5F773BF6F8A8426463
FFD760FDD2A3FB2FF93A8F0D901F4D79430D0C49AB088DDE46CA955357CE80E9
61F17603291AD5A9BCF763> |-
/d <1C60D8A8C9B7A73DCF5C5F318A67A421CF99702516EE66DD46F0A19A39CD
2B5B742B889350B6027EFEDA3412AF17D7447FE125ED85A03529B863375064C8
442F844291318DB0203469A078E9359BCEB35DF8F23C36890A37B169F260AC05
C273B3B8D223D18F700437592FBE0590BD27CA2E484106160C2D3CA8D60D3B12
6EF2BAA957015ACD17B66CCB4B5794278CE2D6> |-
/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB4598F87C338598C4F359D15
4701105B91D71789866B8BBDD17C51AE2B80B6E9F47C5014A178B7C760E089E4
D6B50937639285A177B2DF2F9CD9B293DCADC3AA4DBEC7EDEC1EDE937DA59145
B9D8A5509D89ABB6F024A66CDE0F535E3C7B64> |-
/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF
77C72C9CD398FF8891FD585C23641F8AE8F6E3020ADECFAC4A393E9FF54C49FA
B5A21E2F4C1179F83C25D9862068548F63557CBD68840FA2E638617AF24BDFC9
D81568C2C6E1A315E20924BB4D9FEEC5799B976A> |-
/g <1C60D8A8C9B7A73DB582976F788935A228E33A2F9BA837718EB44913857B
7DF2B08937FF3593A626EDE6CCF55DB88F671B0ACF0E0BF6EDE603335F61508C
BD99213F6A996E978EE78EC5AD0C1CE4169AAF8ED27DA5119BB90C33C9447085
BA17B797E462B8F0977A661167FBA44D02B1BE8517861232196A81989A462F7F
2FCF08A5E9EBA1DAEB8CCBF341DCDE2423F1236D5142A49C668E169F9EAF2F25
102C1FB112EB576652F83324C585B8F161182918C8C79BC3194BCD6500A04D2D
22D177CFDF96C8E4C849F7239608F6F7453202FB5504E13F8033A5FE2FB7EA35
06AF00C9E3C825E1554EE013BCEAF50C41410225B6E0A012AC7F7FF737456D43
38> |-
/h <1C60D8A8C9B7A73DC549024A8346FE9FE9D7E1CFA5F3A3542DDBE4C5A916
A5024A59CE0EA5149D6EA79ED65490BEFEF9C3C348201E7A69F357C223E56920
09826F3A927DADAF422165EC130205D6C94EDE841416A6709F1685CEE6DEF083
AF9B4CF1705AC60AB37B96773E8FE945D56F9115B299614B0DC15F528F328117
D5F2914E00B04A31> |-
/i <1C60D8A8C9B854D08887A9543335390AEE4DB40199897ABD16F19F24E0DE
858E4CD6E00B26B1829973C0FE01CFA3E329A9D0E2AFEC96CBC670DB940EEA7C
A262004364C378CC527E7F0DFBFD9ADBA6EF6E2301F19CF6860BAC9BB8A50A02
F9217A15FCE88184A4DF0C717E46391573826F599D2DFE27F4F9D82251BA41CC> |-
/l <1C60D8A8C9B854D08887A941088E15019368529A0C411CDB31B6270BDB21
E6F24215DA6EAB48951C8DAFF38285C17967F3E2D31A5645B4CB7848E783EC24
2D0750B83BCD4D9A2F> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC36CFC8347F
8B8E738CF4CF4D1809A80A85D86BFA110670A045293350272C5F45FB77C527D1
F2930D0378ADEDC7688C13D3561051EFE72DCA1312160E6190220B69FF2CC393
85ADB7B9FA12F1BEBDBD9D878BFF3BD03685B77D07FB95D12B8B813430FA3185
D7AFA5CE12372E2F5699928B2C0F3AE08B114EAE456B389E7295ED8892CA8D2A
68CBEB3EF1E32DB99917A5DF402A16D8590243BEA627189E26BE24948A498003
EC603B5D13E615> |-
/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C630F986F2AB3ECE6D2
578D5DEC50402B578B4E6CE0632E8947CBBCEB7543031081448F167C88EBA303
B4D2C70599E4B2DBCDA2B9DA37C571B7CFFA556EE2B6CDE54270E5EAA3F80E68
09540E2D41E62BFC6D0AC69B3E0C88DD3AF2AA5C4EA7ABFC511536F434A8C9EA
34BFE186> |-
/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34D2E8E7AB07F99
F61992CA50ADD51C5A93B4B134C15D36CEC8323CBBE9C0D3A63155E9EC74B781
308A5B21C88AA604D5E026CDBDC830C30107F5FE4F678EF57725AF37DE4B> |-
/p <1C60D8A8C9B7A73DB58119388AD28C6EB26113B395FAEB5BB1A92787CC00
CD17996991481186ABE86940E24AB594D9A474B01D5D0752783C6F719E685638
4C42FC6FADE6220E0D5360188934499D6C788FD6225163F3ED610B71BFF6B877
481E0736BEF6EB1112BB14B3A87DE8D1E721238F8F2E426DBC236319E17981A4
C07831306A73D6A3E6AC794689B59CA316CE67D8D4C94BF2EB8F108645A3CF1B
50AB6566123326> |-
/r <1C60D8A8C9B81F2C46F2EFDE84D89C8CA27978F2B1BB49B09209CD1A52AA
0883E159C0BCFCEC840E4AF4AFD0AF12CC05AB7610067AFD32B1652EE398EAF1
DF9DCBDAA912A22D36A52AAB2ABE36110186ED1FE34787D24198929398156D9F
0AC35E6BD99313253DDFFC34D01333EFCC> |-
/s <1C60D8A8C9B7361F0DD2D2259B4AE3E4ACCB44FB8872BFAC621D64E450F5
14624BD4700B917EA1CE8D60019D3B1C42E0F7377CE112D5333D1612736D0EDB
07B34DD4BA1403D44985C1A0543D99F912C9BC9DC7E96430EE2781E418322823
5F9935573E82940F1E761BEFBA74A42BEDBB36268156C77D28FAFCF48800821E
AC277DD0C93425B27A2041FB9E67F885F359D5FF9B96714513F4D2945088A893
D87F8B4D3A6600FAAA0EA12384184218B424A8492A8E97821E10762E83A8B2B1
7B9DE8ED2A20C9152C561D7EAED2> |-
/t <1C60D8A8C9B854D082F829CADA2402D0C363E188624B3DC91E66507A8AF7
69E833E0645176BA592C3DD44ECFC4C7D84DE06A044A230214D945DF321A4D72
94F214FA4A69DDBFFDC37CE6C0694F8A402CC82FE94C2B9274D4DCEAB0696C3D
253D2964904B34E1D9065A46BEE535DCD936F67C56C176C8E7F77F2F60DE69B8
6A560016E73AE51935CC218444D0EB76BA0FFF40D1297093F9> |-
/u <1C60D8A8C9B7A73DB6F2A4B59B2312EBBBE2417FA44F369C1F0ED6D6A369
96AE53A137DB00AA7567A9CEC49CE2737379BD17250255FC7E3093655F665038
8D1064F7AC48308F1DF9CB661A2773CC10559E7C61A5DCDB640FF06049B6ADB9
F9495291BF4F69DA004975E0967945B04D0D1E0AADFA85B338744A9D49B5C34C
0392DD8C9A2D5D0FBF7A81667B636E9E308B1316F61183357C46ADD0B9B8732D> |-
/y <1C60D8A8C9B7A73DB5828C8EB6692FACE27F93F009F946C390116926A043
617DCF82B76B3921AD1CAB060694C724481443C88DCE9CCDBD4C5105E503E45C
67DC21FA0E146B65B0F0EA2429259DEF9F5CD456C1B4E1A4CBC49AFDCA5F37B1
AD742660BF135BF9BE1A2789C070C0A4FB4767FBA0411908E30D692396427C73
1EB9FE493ECBA19FDDC5F0C50E54D346D5DA656C79E40808BBE549> |-
/fi <1C60D8A8C9B7EF32570AFF8231DCF4ABC5DEFD5B6D550686CFFCC91C267
F1252BA4F4DAA274A3A6688691900FFEF7A839B52553AB9F891F187F51351F44
C21EAFE0C45D0394141E4F8BAFD06377AA51E37B7097AD1CD66EBD9853CBF817
2875228C37FE0953ECA0AB863FE32A47EEF2B7DF444F4BC2717645C8B4ECA894
32D1027B7AF6DE75966098D9C73E00129B4A704F85D81AF7D80671478639E183
CA75D9BD8666D9EFCDBB6B3C3084DAC79574807631815CB8BE737035BB77F054
C44C971E29217D4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 46 /period put
dup 53 /five put
dup 58 /colon put
dup 69 /E put
dup 70 /F put
dup 80 /P put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 174 /fi put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 6{/.notdef}rp /five 4{/.notdef}rp 
/colon 10{/.notdef}rp /E /F 9{/.notdef}rp /P 16{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 52{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [9.9626 0 0 -9.9626 0 0 ]msf
339.498 192.101 mo
(\(b\))sh
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
.611633 215.134 mo
(Figure)sh
31.8225 215.134 mo
(5)sh
37.277 215.134 mo
(:)sh
43.037 215.134 mo
(Polar)sh
69.4152 215.134 mo
(angle)sh
96.3934 215.134 mo
(dependence)sh
151.233 215.134 mo
(ofthereconstructionef\256ciencyfordifferentmethods.Ef\256ciencyfor)
[5.45456 6.98174 3.03273 5.45456 8.19272 3.63266 4.84363 4.84366 5.45456 5.45453 4.24374 3.03271 
3.63266 5.45453 4.84366 3.03271 3.03271 5.45456 8.80365 4.84363 3.35992 6.06546 4.84363 3.03275 
4.84363 5.45456 4.68002 8.80362 3.63266 5.45456 6.98172 5.45456 3.03271 3.35992 3.63266 4.84366 
3.63263 4.84366 5.45453 6.38184 8.48727 4.84363 3.03275 5.45453 5.45456 5.45456 4.24371 7.97455 
6.66537 3.35989 6.06546 4.84366 3.03271 4.84366 5.45453 4.68002 8.80362 3.63263 5.45459 0 
]xsh
.873533 .244297 1 .131685 cmyk
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
43.0366 228.683 mo
(\(a\))sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A68144D7948D
5D72AF545A4D3C0513F795E10E78346C3F1E06A3A564CAE7C700C7FDC9B087C8
E6354649236E324B711B953A69EB07058EA7506E73C4971A2CD8E7B56CC9E4E9
FEA40EB905B2E375D63C0419CF10FC6C14A0C10D77A69> |-
/G <1C60D8A8C9B6079FE80B2D9587063A0F42FCF180C2C0D9DB89A2D8D27614
F3B775C2888E457B564DD121D768F26DDE098413D22B9A5F0CB2CD19AEDBFFAC
36A33330BDE6B90C658E0E9792E64DB94CF67C391D10BB06977C8574E10F3929
312E77FD1B9E2DD8E6968F0669B7B77DA5CCB2A388D224061BD5C50DA8D6A6F6
BF5A46DBF2EA09B29E7A07A6A0280473B616743851101D4FF591F24A214C14E5
593E25539926> |-
/V <1C60D8A8C9B6079F150BE669E10D0A89FB4B4A79E924F118832305224132
22E2A9A1CA143D92C4493C7C521082241671767794552BBE0C72C572F506851B
9FFC5646BF7C80A1B249DE720E4EBC4B3BAA42C2C22BCB20793D277D6ECFB9BD
2B6241E55E3D01802787A6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 48 /zero put
dup 71 /G put
dup 86 /V put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero 4{/.notdef}rp 
/five 4{/.notdef}rp /colon 10{/.notdef}rp /E /F /G 8{/.notdef}rp 
/P 5{/.notdef}rp /V 10{/.notdef}rp /a /b /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y 52{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
57.8728 228.683 mo
(500)sh
76.0583 228.683 mo
(GeV)sh
99.382 228.683 mo
(and)sh
.873533 .244297 1 .131685 cmyk
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
117.862 228.683 mo
(\(b\))sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC549024A66BCA9F4353026BD17B6210A66FD5D4176
116945A2F6BAB903CF6DE4F4D3C8542E96270F5E403BDB0773406DE9484D2E0E
A2DBD71107DE79DF70216D3BFEAA2172D8D68DEE8378CE1279ABF171> |-
/B <1C60D8A8C9B64EDFFAA969AD09D00E8D9653FC12F936212F509A68D3879C
B174FCC7D5A46C18D84538C45378CB892455EEAEAFDB676B276D7423E2B2282C
1E8DBC52F7314247FC642BF2AF48DDC0873647CF3E52C3BD89A1384DA88214EE
894292E3EE20EB76497CE2F4FA57AC9300F8D961F5243657D0971102F8DE7796
B66A77C96804C10504AD4911A22BED2CB5B7952FC51B55E11A40888D7CC5DEC1
AFCB0DF62C09A61FA14F0F32ABD682D4128A82A5E125C897C44B0038DA792A06
1F8A0B6707C64C7274CEF840B8ECA3B28B4BFA7DE31202662E66E97257814127
E55A1D80A17B130D74B30C51F1F092B0AE50B595EE9813A8BB5030081A> |-
/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1A3F05995A9E21B3
849012DBE3E5D9BEEC357D7966D622D0BDA2A87D7DF76C988A3C6DB72B7AC755
68902A6FAD90FC53E6498F9E166085199E8D84083DB27D286921A07C13F283E6
EF1D868FB1C61773EE28620908EC2A5479956F05B0F020BC9E52293B72C896E3
409360C9D09608CE13546B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 49 /one put
dup 66 /B put
dup 67 /C put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef /zero /one 
3{/.notdef}rp /five 4{/.notdef}rp /colon 7{/.notdef}rp /B /C /.notdef 
/E /F /G 8{/.notdef}rp /P 5{/.notdef}rp /V 10{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y 52{/.notdef}rp /fi 
81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
133.309 228.683 mo
(1500)sh
156.938 228.683 mo
(GeV)sh
180.262 228.683 mo
(electrons)sh
222.371 228.683 mo
(hitting)sh
253.593 228.683 mo
(BeamCal.)sh
gsave
118.534 428.618 mo
336.239 428.618 li
336.239 244.701 li
118.534 244.701 li
cp
clp
118.534 428.618 mo
336.239 428.618 li
336.239 244.893 li
118.534 244.893 li
cp
0 0 0 0 cmyk
ef
.09599 lw
118.534 428.618 mo
336.239 428.618 li
336.239 244.893 li
118.534 244.893 li
cp
@
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
ef
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
@
.28797 lw
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
0 0 0 0 cmyk
ef
.09599 lw
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
@
.28797 lw
146.851 404.717 mo
327.504 404.717 li
327.504 252.189 li
146.851 252.189 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
320.881 356.626 mo
320.881 355.725 320.15 354.994 319.249 354.994 cv
318.348 354.994 317.617 355.725 317.617 356.626 cv
317.617 357.527 318.348 358.258 319.249 358.258 cv
320.15 358.258 320.881 357.527 320.881 356.626 cv
ef
304.466 365.745 mo
304.466 364.844 303.736 364.113 302.834 364.113 cv
301.933 364.113 301.203 364.844 301.203 365.745 cv
301.203 366.646 301.933 367.377 302.834 367.377 cv
303.736 367.377 304.466 366.646 304.466 365.745 cv
ef
288.052 365.361 mo
288.052 364.46 287.321 363.729 286.42 363.729 cv
285.519 363.729 284.788 364.46 284.788 365.361 cv
284.788 366.262 285.519 366.993 286.42 366.993 cv
287.321 366.993 288.052 366.262 288.052 365.361 cv
ef
271.638 365.745 mo
271.638 364.844 270.907 364.113 270.006 364.113 cv
269.105 364.113 268.374 364.844 268.374 365.745 cv
268.374 366.646 269.105 367.377 270.006 367.377 cv
270.907 367.377 271.638 366.646 271.638 365.745 cv
ef
255.223 365.745 mo
255.223 364.844 254.493 364.113 253.592 364.113 cv
252.69 364.113 251.96 364.844 251.96 365.745 cv
251.96 366.646 252.69 367.377 253.592 367.377 cv
254.493 367.377 255.223 366.646 255.223 365.745 cv
ef
238.809 364.881 mo
238.809 363.98 238.078 363.249 237.177 363.249 cv
236.276 363.249 235.545 363.98 235.545 364.881 cv
235.545 365.782 236.276 366.513 237.177 366.513 cv
238.078 366.513 238.809 365.782 238.809 364.881 cv
ef
222.395 365.361 mo
222.395 364.46 221.664 363.729 220.763 363.729 cv
219.862 363.729 219.131 364.46 219.131 365.361 cv
219.131 366.262 219.862 366.993 220.763 366.993 cv
221.664 366.993 222.395 366.262 222.395 365.361 cv
ef
205.98 365.073 mo
205.98 364.172 205.25 363.441 204.349 363.441 cv
203.447 363.441 202.717 364.172 202.717 365.073 cv
202.717 365.974 203.447 366.705 204.349 366.705 cv
205.25 366.705 205.98 365.974 205.98 365.073 cv
ef
189.566 364.305 mo
189.566 363.404 188.836 362.673 187.934 362.673 cv
187.033 362.673 186.303 363.404 186.303 364.305 cv
186.303 365.206 187.033 365.937 187.934 365.937 cv
188.836 365.937 189.566 365.206 189.566 364.305 cv
ef
173.056 363.633 mo
173.056 362.732 172.325 362.001 171.424 362.001 cv
170.523 362.001 169.792 362.732 169.792 363.633 cv
169.792 364.534 170.523 365.265 171.424 365.265 cv
172.325 365.265 173.056 364.534 173.056 363.633 cv
ef
156.642 361.041 mo
156.642 360.14 155.911 359.409 155.01 359.409 cv
154.109 359.409 153.378 360.14 153.378 361.041 cv
153.378 361.942 154.109 362.673 155.01 362.673 cv
155.911 362.673 156.642 361.942 156.642 361.041 cv
ef
146.851 404.717 mo
327.504 404.717 li
@
%ADOBeginSubsetFont: MZQAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /MZQAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 2006 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 69 /E put
dup 71 /G put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 101 /e put
dup 108 /l put
def
/UniqueID 5082796 def
/FontBBox {0 -218 762 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 -0 524 544 729 749 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/comma <1C60D8A8C9B854D088EEB7F529386F280D9C87121678FF369865635B
5BF594D0E5245872DF2CE7> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/G <1C60D8A8C9B6FF86765B178E785106FCD59EB8376382B9957E54B02A1B91
7BC7F58F0AFBE439533E1ED46D143AB7B6719EE7E0A26AAD917CFE50F9D86916
60D06C3609FC503F9ECA5CDB98AFE470AC59DBE98B6FDB230F8752671ED6E8FF
1CA85C9DF60AA97812A58FCE5F562EE9FCD8C494B7D75B4D71BD5A39C61E27> |-
/V <1C60D8A8C9B64EDF88209F74DE48C31924050FF0040AA5A034E0BA481252
B18875F38C0C76ED1A659C37AD61> |-
/bracketleft <1C60D8A8C9B854D0F805B076695C4791B8845952830C7FB551
67992C298DFED4E6540E405268F50CB1674618> |-
/bracketright <1C60D8A8C9B854D0F805B076695C4791847EF8EBB56619F27
FB0CD5233D0EE1F20F643C498EE4922B42BB138> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20B78B29FDD6FEE0B6539DE8A33498C1030568392
E61F4D3AC749A9AF964BAC7AE995A2B5418E7F9778BBEB9A720A5B1929175BE1
4597229641042269FF> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLV+Helvetica /MZQAAA+Helvetica findfont ct_VMDictPut
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 24{/.notdef}rp /E /.notdef /G 
14{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 7{/.notdef}rp /e 
6{/.notdef}rp /l 147{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
301.482 421.782 mo
(, [GeV])sh
BQUHLV+Helvetica*1 [5.74277 0 0 -5.74277 0 0 ]msf
297.379 424.243 mo
(el)
[3.19299 0 ]xsh
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
291.911 421.782 mo
(E)sh
171.424 400.109 mo
171.424 404.717 li
@
179.679 402.413 mo
179.679 404.717 li
@
187.934 402.413 mo
187.934 404.717 li
@
196.094 402.413 mo
196.094 404.717 li
@
204.349 400.109 mo
204.349 404.717 li
@
212.508 402.413 mo
212.508 404.717 li
@
220.763 402.413 mo
220.763 404.717 li
@
228.922 402.413 mo
228.922 404.717 li
@
237.177 400.109 mo
237.177 404.717 li
@
245.336 402.413 mo
245.336 404.717 li
@
253.592 402.413 mo
253.592 404.717 li
@
261.847 402.413 mo
261.847 404.717 li
@
270.006 400.109 mo
270.006 404.717 li
@
278.261 402.413 mo
278.261 404.717 li
@
286.42 402.413 mo
286.42 404.717 li
@
294.675 402.413 mo
294.675 404.717 li
@
302.834 400.109 mo
302.834 404.717 li
@
171.424 400.109 mo
171.424 404.717 li
@
163.265 402.413 mo
163.265 404.717 li
@
155.01 402.413 mo
155.01 404.717 li
@
146.851 402.413 mo
146.851 404.717 li
@
302.834 400.109 mo
302.834 404.717 li
@
311.09 402.413 mo
311.09 404.717 li
@
319.249 402.413 mo
319.249 404.717 li
@
327.504 402.413 mo
327.504 404.717 li
@
%ADOBeginSubsetFont: MZQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE5490E84494879DAC7533FE79B0256F53440E
0AA1FDA19C90971C126F7AE6F7C41F95A43E590807CA0BD577DD0147F6C043AF
9CE3D8A8F9C6D7C4AC7> |-
/one <1C60D8A8C9B7EF32570F06410D4703CEEE7210F729C289AB36488A8971
51E1AAB5D613DEBEA5766F929AE7> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB95849747F92E4D8A332E5C5AB9FDCF9
0F4289CCBB278D891A1FC484D9B01C052B70FE6728FE7A9E2AF2529C0A694683
0FA7062544D6A38D4F48EA97D15E9834E0BF39269B3716> |-
/four <1C60D8A8C9B7EF32570F0641A4BC6DE40C0670E767A368988E5B8570B
4A04A325C9976E0E3BBBF76A1E9F907C1AA5B6CC514F0EBEED16FA6D541D236C
DDF5F1B13> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E71C27D48F1638DA1FDFE10E618A
18554D0E9CCCCE216762AE833813126F14B1BED1AC76AA2A1CCFE51BCEF0355E
2F92ADB0755238EAD8803AAE5C10A893B5C1B4C13063BB843C978E7B1BC21E5A
B7DC9BB4B2094771CE67FBC04C6F6A99CAF7513E7267961B2DFFF1E73D8D4D8F
F014B4CEECD0DBED1E> |-
/eight <1C60D8A8C9B7EF32A838F0A2017E2AF026F171DDD5DB2DFFDD93641B
601913DF140CAEF11CC6211A8571FF8C4823382AB3E20F8556CBDC9702D99488
3E99AB02B5B10E7030FAD6E381BCCAED1D68AC77A33EB31810AB2D7F0DF8F57D
CC422D156CA351599BCA0DB9C35CD96AAA023392D4F5E585BA984064F2EFC882
E33A9BBBF580C61EF590F17C472AF0A47082255229545020E9D42B853CCCFEF8
3EDEC759331B43AE4B6FBC07B32BD34C16546C58218B91A661B398C6F47D5C92
75842B3E7A33764B6405A2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLV+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/.notdef /four /.notdef /six /.notdef /eight 12{/.notdef}rp /E 
/.notdef /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
7{/.notdef}rp /e 6{/.notdef}rp /l 147{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
164.202 412.757 mo
(600)sh
197.018 412.757 mo
(800)sh
227.646 412.757 mo
(1000)sh
260.461 412.757 mo
(1200)sh
293.551 412.757 mo
(1400)sh
146.851 404.717 mo
146.851 252.189 li
@
%ADOBeginSubsetFont: MZQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE698D771C88C86C56509FCA9984ADDEE
E62525BCFA73F6F6096DC6AB209FB8ACDA0C68CC7730E1CD5079606883572828
58F689C9C57C719E35D45F42EA30959DBC3456AB81A87FFA964899DF319A5E6C
C87FBDC9F2CB0032AA06AD7DA11EFC08423FB55EBA40747867548D26A561251B
E8FD8FC250CEEECB> |-
/f <1C60D8A8C9B854D08882A1CDE4CC8CF82C721397EF3C1B7F275F9E0F93B7
3057EF743A44597C4F61CE6B8578AF705EBC4640B3DF516FF9DF739A5A37FECD
DF523B0115500A789A26F0B116775E> |-
/k <1C60D8A8C9B7A73DC54C6E6ED2940920A5D202642285D51DCE0EC69336F7
5FFF3E375A6A6187EFCA6E524D5DB7E076A0F87FA64C1A7D23CAD3D7044CD2DE> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEE
AD40211C367AF1DA849517960C0516775491EC31482B3B870EFC48A00C2F00B7
63C863A6961815FEBF4DBF40402AF9693FE698C7> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD662709034A2A779D529AF125A278342C76D9DA0
E4C390660AA8DCC02CC67E9DE7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLV+Helvetica /Encoding get
dup 97 /a put
dup 102 /f put
dup 107 /k put
dup 114 /r put
dup 116 /t put
pop
%ADOEndSubsetFont
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/.notdef /four /.notdef /six /.notdef /eight 12{/.notdef}rp /E 
/.notdef /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 
3{/.notdef}rp /a 3{/.notdef}rp /e /f 4{/.notdef}rp /k /l 
5{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [0 -8.47742 -8.47741 0 0 0 ]msf
127.831 286.963 mo
( fake rate)
[-2.35672 -2.35672 -4.71344 -4.23871 -4.71344 -2.35672 -2.82291 -4.71344 -2.35672 0 ]ysh
152.226 404.717 mo
146.851 404.717 li
@
149.538 400.877 mo
146.851 400.877 li
@
149.538 397.134 mo
146.851 397.134 li
@
149.538 393.294 mo
146.851 393.294 li
@
152.226 389.454 mo
146.851 389.454 li
@
149.538 385.615 mo
146.851 385.615 li
@
149.538 381.871 mo
146.851 381.871 li
@
149.538 378.031 mo
146.851 378.031 li
@
152.226 374.192 mo
146.851 374.192 li
@
149.538 370.448 mo
146.851 370.448 li
@
149.538 366.609 mo
146.851 366.609 li
@
149.538 362.769 mo
146.851 362.769 li
@
152.226 358.93 mo
146.851 358.93 li
@
149.538 355.186 mo
146.851 355.186 li
@
149.538 351.346 mo
146.851 351.346 li
@
149.538 347.507 mo
146.851 347.507 li
@
152.226 343.763 mo
146.851 343.763 li
@
149.538 339.923 mo
146.851 339.923 li
@
149.538 336.084 mo
146.851 336.084 li
@
149.538 332.244 mo
146.851 332.244 li
@
152.226 328.501 mo
146.851 328.501 li
@
149.538 324.661 mo
146.851 324.661 li
@
149.538 320.821 mo
146.851 320.821 li
@
149.538 316.982 mo
146.851 316.982 li
@
152.226 313.238 mo
146.851 313.238 li
@
149.538 309.399 mo
146.851 309.399 li
@
149.538 305.559 mo
146.851 305.559 li
@
149.538 301.815 mo
146.851 301.815 li
@
152.226 297.976 mo
146.851 297.976 li
@
149.538 294.136 mo
146.851 294.136 li
@
149.538 290.297 mo
146.851 290.297 li
@
149.538 286.553 mo
146.851 286.553 li
@
152.226 282.713 mo
146.851 282.713 li
@
149.538 278.874 mo
146.851 278.874 li
@
149.538 275.034 mo
146.851 275.034 li
@
149.538 271.291 mo
146.851 271.291 li
@
152.226 267.451 mo
146.851 267.451 li
@
149.538 263.611 mo
146.851 263.611 li
@
149.538 259.868 mo
146.851 259.868 li
@
149.538 256.028 mo
146.851 256.028 li
@
152.226 252.189 mo
146.851 252.189 li
@
%ADOBeginSubsetFont: MZQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLV+Helvetica /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /.notdef /four /.notdef /six /.notdef /eight 
12{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e /f 4{/.notdef}rp 
/k /l 5{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
141.231 407.561 mo
(0)sh
129.472 392.247 mo
(0.02)sh
129.199 377.207 mo
(0.04)sh
129.472 361.893 mo
(0.06)sh
129.472 346.579 mo
(0.08)sh
135.488 331.265 mo
(0.1)sh
129.472 315.951 mo
(0.12)sh
129.199 300.91 mo
(0.14)sh
129.472 285.596 mo
(0.16)sh
129.472 270.282 mo
(0.18)sh
134.121 254.967 mo
(0.2)sh
319.249 366.033 mo
317.617 369.296 li
320.881 369.296 li
.269902 .816403 0 0 cmyk
ef
302.834 362.193 mo
301.203 365.457 li
304.466 365.457 li
ef
286.42 363.633 mo
284.788 366.897 li
288.052 366.897 li
ef
270.006 362.193 mo
268.374 365.457 li
271.638 365.457 li
ef
253.592 361.521 mo
251.96 364.785 li
255.223 364.785 li
ef
237.177 361.521 mo
235.545 364.785 li
238.809 364.785 li
ef
220.763 362.769 mo
219.131 366.033 li
222.395 366.033 li
ef
204.349 362.769 mo
202.717 366.033 li
205.98 366.033 li
ef
187.934 362.097 mo
186.303 365.361 li
189.566 365.361 li
ef
171.424 359.985 mo
169.792 363.249 li
173.056 363.249 li
ef
155.01 357.49 mo
153.378 360.753 li
156.642 360.753 li
ef
319.249 359.889 mo
317.617 363.153 li
320.881 363.153 li
cp
@
302.834 363.729 mo
301.203 366.993 li
304.466 366.993 li
cp
@
286.42 361.809 mo
284.788 365.073 li
288.052 365.073 li
cp
@
270.006 362.673 mo
268.374 365.937 li
271.638 365.937 li
cp
@
253.592 362.193 mo
251.96 365.457 li
255.223 365.457 li
cp
@
237.177 362.673 mo
235.545 365.937 li
238.809 365.937 li
cp
@
220.763 362.673 mo
219.131 365.937 li
222.395 365.937 li
cp
@
204.349 362.097 mo
202.717 365.361 li
205.98 365.361 li
cp
@
187.934 362.961 mo
186.303 366.225 li
189.566 366.225 li
cp
@
171.424 362.865 mo
169.792 366.129 li
173.056 366.129 li
cp
@
155.01 362.193 mo
153.378 365.457 li
156.642 365.457 li
cp
@
216.443 290.777 mo
312.241 290.777 li
312.241 265.051 li
216.443 265.051 li
cp
0 0 0 0 cmyk
ef
.09599 lw
216.443 290.777 mo
312.241 290.777 li
312.241 265.051 li
216.443 265.051 li
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: MZQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7EF32A838F0ADA05AA7BE67CAEF0C4A70B10635B01529BB5E
E6AEAE58EA247A0F91A593B31240628F951C79A5DD142AB857206089096697F2
55FD0BC09DAAB839BE79130A44C5BFC02FF0EF17919902CE2A5F543D8E5371CC
4CC55ED1F5B047> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1097DCFFBFA904FBC8BD2781B69097605934011255CC1E77D9
74D42A5734080EC34301EC4BC5AA107FFDCEDB9EBE2B62B885971DC22E> |-
/g <1C60D8A8C9B7EF3227B253BA0513287033C8093CD601937B772648EA572C
C1F007E60EAC5321180CAEF3B4CD4B7C2758F76BC22FC84DB4A94F7544889552
5DEAB206C682769EE7900A7C0DAC28B7B90B70137B62344CD13E6DE3F4C31E8C
9856BC9B1ADDAC3624D7E74BF1CF3CD5C2FFB5E1A0EE3D580B04A652A3D783FD
FDB61EBCCCBC89D286E63D953A1423DBF70AE168D78C192EEA9D64476A412048> |-
/i <1C60D8A8C9B88C080EFCC82E33C60F44B423FBBF2ABF4FE046280527DD15
D9F3F2B0AA5EEEBB0758A1872C56EEA08CC4883F148025E6> |-
/n <1C60D8A8C9B7EF32570F064E9AB268C93CCC5A502AC76AA3605F6F842E0C
6884B1AC78E4F6F7E0C35601D9142672E63805C6C437F58826490DDF1942A9DD
9E1CCD138DDFD598A3C09163CA0FC236518D17D98D39776EB3E76C4DB2FFD5> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE00CD8FF68F0C83CA1093E2917BE43AC2B76913
74CEEBA4813FABE9DE36AFBA9AD7E27F79F4267782F8C1880C04EB5A86ABB72C
F3AA7E2A7A1DC5A3046E365650C02D117CFC31976F1DE30127C1A59F7C584532
62B9834D30557E406234> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF7911330405AF7E6F0
1E787476F0618434BE96954E00B578FFB147A39DAD333F304533F66B3B7418B0
4EE5BF9C8839EFB740337F67A7CADF9BAF26C32B55149B7D6557640A956083A5> |-
/u <1C60D8A8C9B7EF32A8358723FC8D12C202AB69FB1B9D669614BD5BE9BBF7
73402916AA1AB18ABAFACA395E7B6EB52820B5969441875A0179F798326186BE
61C9F2FFB5B271B31D4CC387231EAE08C0E3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLV+Helvetica /Encoding get
dup 98 /b put
dup 99 /c put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /.notdef /four /.notdef /six /.notdef /eight 
12{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /b /c /.notdef /e 
/f /g /.notdef /i /.notdef /k /l /.notdef 
/n /.notdef /p /.notdef /r /s /t /u 
138{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
240.226 271.102 mo
(clustering, pregen bg)sh
220.091 272.347 mo
236.889 272.347 li
236.889 266.395 li
220.091 266.395 li
cp
0 0 0 0 cmyk
ef
.28797 lw
220.091 269.371 mo
236.889 269.371 li
1 .978088 .0454719 .0559396 cmyk
@
230.074 269.371 mo
230.074 268.47 229.343 267.739 228.442 267.739 cv
227.541 267.739 226.81 268.47 226.81 269.371 cv
226.81 270.272 227.541 271.003 228.442 271.003 cv
229.343 271.003 230.074 270.272 230.074 269.371 cv
1 /0 /CSD get_res sepcs
1 sep
ef
%ADOBeginSubsetFont: MZQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLV+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD7
8AB956CD4302BB789AA6D333FFADD104DB65C1220150F33A25DDB6D0C3E3F2A1
02DFCFBF07D5AE34546281AAAE18BB2A6A1D8790> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A53F97
896760D132F78F6B167CFAFA8CFB5D9561B5531C39C66F4BF3CE151A4BF4C30B
42EB3D2B9A0463149463A6874D98E475CE2B3B76FD4C2B> |-
/w <1C60D8A8C9B6079F1E495238D734F67FB5E2A2BA6F1F073975099C282372
72C5E468B93051F423D5D62417FF2745759EEEF7FD240DC4B0B2C13B5678A844> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLV+Helvetica /Encoding get
dup 104 /h put
dup 111 /o put
dup 119 /w put
pop
%ADOEndSubsetFont
/BQUHLV+Helvetica*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /.notdef /period /.notdef /zero 
/one /two /.notdef /four /.notdef /six /.notdef /eight 
12{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 4{/.notdef}rp /bracketleft 
/.notdef /bracketright 3{/.notdef}rp /a /b /c /.notdef /e 
/f /g /h /i /.notdef /k /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w 136{/.notdef}rp]
BQUHLV+Helvetica nf
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
240.226 279.853 mo
(shower fit, pregen bg)sh
220.091 280.89 mo
236.889 280.89 li
236.889 274.938 li
220.091 274.938 li
cp
0 0 0 0 cmyk
ef
220.091 277.914 mo
236.889 277.914 li
@
228.442 276.282 mo
226.81 279.546 li
230.074 279.546 li
.269902 .816403 0 0 cmyk
ef
1 /0 /CSD get_res sepcs
1 sep
BQUHLV+Helvetica*1 [8.47741 0 0 -8.47741 0 0 ]msf
240.226 288.331 mo
(shower fit, gaussian bg)sh
220.091 289.529 mo
236.889 289.529 li
236.889 283.481 li
220.091 283.481 li
cp
0 0 0 0 cmyk
ef
220.091 286.457 mo
236.889 286.457 li
1 .978088 .0454719 .0559396 cmyk
@
228.442 284.825 mo
226.81 288.089 li
230.074 288.089 li
cp
.269902 .816403 0 0 cmyk
@
grestore
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B6B41CC7B7C23F654D8876BCF8213C7160D5A43B1B9A
6F8225A388CEB7863C4FED9B2245EF97151D29A623B6AFA618A9D76C7516DC68
E4DB8EBA71C62656EF4F9A5418124014A50E344DBC8914C20C3682E3AE660282
1544054A5EB0A9CA9DD4C6704A25CF63C7EBF37D9C715FEA30B74EC8AB916767
B56B057BDB076CC134EC77A9485C490C912C5B1644CCE6A03EBE74D32C53BCD5
BD63EAED50BBB84BFF07559D17228F8695C7ACB7EBAA8784EEB49DDB6D85E2F1
B96B1DA09165EB721FF53AF0B0EB1BACC101DE8F508E272C05917B5B1E1410C0
AF6B1B1321F316E284AB893EEA357A2E06A5010C56EAE9CDA570321FBE66B287
46AB57581B5E136E299ACF8EF34A0D602DC88042D9BD9470F9A148E357603098
60EC9F47DE17C51D0F21EA68F9CA44991E55A28788D07F75A968E2B1D5359C5E
D9CBD3E7A5DC940CE5C3091F79B5B4D908> |-
/comma <1C60D8A8C9B8707CA2FD797333ADE4A97DDAD77B582F5CBD0659CEC2
54CCAA47E940636A08F827925CD9A1666856A55DD075D3D80919EBA1DBDA0C08
A49DC0170BF91775E03F0E3F84EA866F24DB4E0E5C25C184B2DD7B> |-
/six <1C60D8A8C9B7A73D33BF1B90A18439D8A405D7C2C2CE39F3D6CF44883E
BC665B1BC22C1A295E570F87EE932C7C5AE5AD7FD71556D1DD18D897666F411A
91C0C83F9464A64F6DBA41188C7B70D6EB3CB783FF623CD0556DEA7D75906C65
3696A52A8075AF3CF1D8B71CA3050CC39364621D99C880412847981F1F9B66A2
73E16CCD8B82> |-
/D <1C60D8A8C9B6079F1E4884847E183CDFB6808979A7FFAABD96864B66E877
4E70985CF395DC1D2FB7C8BCD1A4C47C710B24983ACFD957FDD5209F65A7CC6D
CA7FAB2B31A94757B920900AF55DAFF07E485481F6EE171E97C1FB25B33FFF25
DE136D66C781030917AD5172E37CA4D4A7F6F4BF8A8F873BF0626800AF87A204
C228E1B6C0435E1F9862D6C5EA44C6C9DEA79E98A81138E9957151BC634A5F49
B7895409D9F2A50BD885B883DF4C> |-
/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7A4C9904C14F3C78DD8A216
6C79F417AFFBE3B86093B7A5C9E5643BE68ED9E3DF5945A598D6DBA4A9E1182E
708E6DE986B0C684C3> |-
/T <1C60D8A8C9B7D8BE6A419732DB5F024C0509628A5C1F3C8AEF4E7D00CBC1
830EA50E7630715A3443152766048C069B0A4C72A78E94AB6D91F59E64DF9B5E
3A2935C3883FA28660A00DBD8C0553BBB6DF7158E8BBDF61D18A> |-
/k <1C60D8A8C9B7A73DC549024AEE55A0365CA53932E5214D92E03447BD2708
2733F8BC4B52390213A989FF43E960E136400BFBE15D14D9BA4C2D61B09B4F05
0FBF7DCACD230C4E8767F21A80F637BF5694F2161773ADC9B25B69CFE9C32887
671F39202B1661FF55FACF361DF983E96161F84FF87D28B0AC0FA43709B6CB55
E1E44E07E3A733E7B5F64E7A67A496C0C4D5E21D4A198AB4487F8ABDBAE25A8E
986F6B42BE1053CBBD4E723DD568DBDCFB> |-
/q <1C60D8A8C9B7A73DB5811938DD329AF5702F449C4C3015239F3E0A7732DF
C9E0828332DA51F1D7FDE724DF869BE73384BD1B7136B03BB11DF051325EE7A7
668042B3ABF69CE2C13C47BD4E4C9A86DDCBB9CAE3222F43A69A8FF1ABBDD409
F18B51721F47402665B69C88AC7610BDEE6B922DEBE4B9A5509B50F0E0D3E071
713E6B4ECEE647E52C37F2D1A72629A17EE40EF1260847BDA48E1E19> |-
/v <1C60D8A8C9B7A73D3387F33511357F5C470E09351F77CC276AE129494BAE
19BAE0CA39F2A5A776A3E65DC754DA89AD1C5CC64A59E7F0B5EC70F5692EBE0E
0FB9D1DB1A31CC7BBB43C8920E79F728121E780030958DB645DD328A17F8DFF9
82D1DC59D2D6959A7E783D9C1D0AA54F17D353136E> |-
/w <1C60D8A8C9B6079FE827C15FB749C5E2D59AF07BCDCB23600A9E54DC7F64
C7E827C38E4CA3EDC141AC5EDC06F362661B84CB18900C724B81D9620EF76D18
0ED63FA9D5A5F924854335916B03AA4F91AFA0C7C0C6CB02E2839A0511DD63E5
74762EF80F517D5F038A6BF8C6AA8B2D183A3AB23FCFA16E562D70F6716B39E9
98C527890272681E7128A4D20258D13EE2F2B8FA152F655FEBAEDC8C60259050
DBA81825B0CDCAC66195D9F1022749> |-
/x <1C60D8A8C9B7A73DC54C6E6F1E1B2347F151B660B24776F2E8D8FE0D08BE
B090A51431058F7336381763833F21F79669FB1758E4A45605BCF730FFBF7CFA
2C722F5A25EBB940FDF2BA7B9B5ACDDB0A61662A5F4610A72EC6495E2E42CD0D
A0ABD967E5F1DD106B1FD129929FE9D5A5F6068F5AC837D5D03F8F6EF1AB141A
71105EC102F68544C432C4D0444E5DAB600D38EB3AE2F6AF3A06CD69455C91A5
6BBAB338293B6D0E> |-
/z <1C60D8A8C9B77FE2B2232EA49D913A831C97B47563501A79DCA41E417E74
E20F3E3020C6B422D96B1171C7F6A868EEF4F80EC234E8C81C6D5907680692B3
D53F97E8CC04C61D64F59B524A639C52> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 37 /percent put
dup 44 /comma put
dup 54 /six put
dup 68 /D put
dup 73 /I put
dup 84 /T put
dup 107 /k put
dup 113 /q put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 122 /z put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one 3{/.notdef}rp /five /six 3{/.notdef}rp 
/colon 7{/.notdef}rp /B /C /D /E /F /G 
/.notdef /I 6{/.notdef}rp /P 3{/.notdef}rp /T /.notdef /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
42.6946 448.065 mo
(Figure)sh
73.9055 448.065 mo
(6)sh
79.36 448.065 mo
(:)sh
85.12 448.065 mo
(Dependence)sh
141.76 448.065 mo
(ofthereconstructionfakerateontheincidentelectronenergy.)
[5.45454 6.35994 3.03271 5.45456 7.57091 3.63264 4.84366 4.84363 5.45456 5.45453 4.24374 3.03271 
3.63266 5.45456 4.84363 3.03275 3.03271 5.45453 8.18185 3.52353 4.84366 5.34546 7.57092 3.63266 
4.84363 3.03271 7.57092 5.45456 8.18182 3.03275 5.45453 7.57092 3.03271 5.45456 4.84366 3.03271 
5.45453 4.84366 5.45456 5.76001 4.84363 3.03271 4.84369 4.84363 3.03271 3.63263 5.45459 8.18182 
4.84363 5.45453 4.84369 3.43628 5.45453 4.74548 0 ]xsh
11.5206 483.014 mo
(The)sh
30.6442 483.014 mo
(quality)sh
63.1206 483.014 mo
(ofthereconstructionwascomparedforthreecases:clusteringalgorithmwithpregenerated)
[5.45454 5.79265 3.03273 5.45456 7.01456 3.63263 4.84366 4.84363 5.45456 5.45456 4.24371 3.03273 
3.63264 5.45456 4.84363 3.03275 3.03271 5.45456 7.61455 7.76727 4.84364 6.40372 4.84364 5.45456 
8.48729 5.45453 4.84366 3.63266 4.84363 7.62546 3.63266 5.45453 5.79266 3.03271 5.45456 3.63266 
4.84363 7.01456 4.84366 4.84363 4.24371 4.84366 4.24371 6.13092 4.84363 3.03275 5.45453 4.24374 
3.03271 4.84366 3.63263 3.03275 5.45453 7.61456 4.84366 3.03271 5.45456 5.45453 3.63266 3.03271 
3.03275 5.45456 10.6582 7.87637 3.03271 3.03271 7.61459 5.45453 3.63266 4.68002 5.45453 4.84366 
5.45456 4.84363 3.63266 4.84363 3.03275 4.84363 0 ]xsh
.611603 496.564 mo
(background)sh
56.4661 496.564 mo
(and)sh
76.5825 496.564 mo
(sho)sh
91.4626 496.564 mo
(wer)sh
112.168 496.564 mo
(\256tting)sh
142.593 496.564 mo
(algorithm)sh
189.372 496.564 mo
(with)sh
213.132 496.564 mo
(pre)sh
226.899 496.564 mo
(generated)sh
273.655 496.564 mo
(and)sh
293.761 496.564 mo
(Gaussian)sh
338.106 496.564 mo
(backgrounds)sh
393.852 496.564 mo
(.Inorderto)
[10.9964 3.63263 9.81821 5.45456 3.63266 5.45453 4.84366 7.98538 3.03271 0 ]xsh
.611603 510.113 mo
(perform)sh
39.9387 510.113 mo
(the)sh
57.4587 510.113 mo
(comparison)sh
112.55 510.113 mo
(the)sh
130.07 510.113 mo
(con\256gurations)sh
196.681 510.113 mo
(were)sh
222.066 510.113 mo
(opt)sh
235.997 510.113 mo
(imized)sh
269.881 510.113 mo
(toobtainfakeratesatapproximatelythe)
[3.03275 9.64365 5.45456 5.45453 3.03275 4.84363 3.03275 9.64365 3.52356 4.84363 5.34546 9.03275 
3.63266 4.84363 3.03275 4.84363 8.4328 4.84366 7.2218 4.84366 5.45453 5.45456 3.63266 5.45453 
5.45456 3.03271 8.4873 4.84363 3.03271 4.84366 3.03271 9.64365 3.03271 5.45459 0 ]xsh
.611603 523.662 mo
(same)sh
25.2444 523.662 mo
(valueof5%,asshowninFigure)
[5.18182 4.84364 3.03273 5.45455 7.05819 5.45455 5.84719 5.45454 9.08722 5.0509 4.84364 6.45827 
4.24371 5.45456 5.18182 7.87637 7.6691 3.03273 7.6691 6.06546 3.03273 5.45454 5.45454 3.63266 
0 ]xsh
.873533 .244297 1 .131685 cmyk
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
164.837 523.662 mo
(6)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D33B7A780A4FB6D478F9DFFD1DA2730E109F94628
9022DF44AA9C6B3C7A83D30909F0BAB42A6E1D1548FDDC248F7C953CDE5A28D8
689A27CB59F87D356A314D4EFED0475CC0AAF39DC03786C824DDF509843103FC
7FA496FB5DCC5A8557EAC7C07B47467CFAA928DDE85F766B75A88715FF4FBE39
5D793AA936CD181919EAA5062E994CBA144301D3C748F9AB1671C4DDDDB4E131
7F6796560BFDDC9A58> |-
/eight <1C60D8A8C9B7A73D33BF1B919D399022D2F6E528E0F503CF88603DE7
FA437233B2DBC0032DF4D8AE2FF534C5142A7E298378A5C16B3025C089116D1C
B1764445FF61E92D20420D5DA44DA51161286A50AFBAE16C2F66DB37FC38BB6A
50BB62F9DFC3FAD1A00BC1E24CA62C1F5A9330CB1FF9ECD38CF50A044C9A06EE
C5495DBB6EB5340B25158C0653ABF7415A5A799428C4339A54C58AEF8AFB3D84
CBE2621BC99377BF81DBA8362E6F2D83A2A9425A6C> |-
/A <1C60D8A8C9B6079F1E495237E195FB086879F6BCD60DCB240CDB4816DCDA
7E7D74835F693D24CCD6C338D68869D7AF0A42511BFE8C5AA9C0FDA69D2F0CC3
FEEA1E37C9F5A5B0401E78C533D84B405A09584E86C2A416FFCA03B71FACE3A1
46D6DFD53C2043C5A98FBBF0B70EB7EE652DFCDC5B6B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 51 /three put
dup 56 /eight put
dup 65 /A put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one /.notdef /three /.notdef /five 
/six /.notdef /eight /.notdef /colon 6{/.notdef}rp /A /B 
/C /D /E /F /G /.notdef /I 6{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
51{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
170.292 523.662 mo
(.Toobtainequalfakeratestheshower\256ttingalgorithmparameter)
[5.94547 5.79265 7.6691 5.45453 5.45456 3.03275 4.84363 3.03271 7.66913 4.84363 5.45456 5.45453 
4.84366 5.24725 3.52356 4.84366 5.34546 7.0582 3.63263 4.84366 3.03275 4.84363 6.45825 3.03275 
5.45456 7.06909 4.24371 5.45453 5.18182 7.8764 4.84363 5.8472 6.06546 3.03271 3.03271 3.03275 
5.45456 7.66907 4.84366 3.03275 5.45453 5.45453 3.63269 3.03271 3.03271 5.45456 10.7018 5.45453 
4.84366 3.63266 4.84363 8.4873 4.84363 3.03271 4.84363 0 ]xsh
%ADOBeginSubsetFont: ELRBAA+NimbusMonL-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+NimbusMonL-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 67 /C put
dup 76 /L put
dup 84 /T put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 119 /w put
def
/FontBBox {-12 -237 650 811} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 417 437 563 583 603 623] def
/BlueScale 0.039625 def
/StdHW [43] def
/StdVW [41] def
/StemSnapH [43] def
/StemSnapV [41] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
16 dict dup begin
/two <1C60D8A8C9B7C3C99EC1586826F2A8762F6ADDE25EF45B3AC48DB5A454
9A16D1A31FD10982FBAAEDC82133637FF646EB50A2F5529EAB03976221394E00
09122DF6BCBA2612B66F9CD91D28E11825F8BBB02586568F8005D7DD2A4DEA54
F96812ADC7B8E8DECE0E437EC226366265F2E7DC39E558ED1D972D370B05178D
44750BDD967362> |-
/C <1C60D8A8C9B7C3C96E751C0E769FED29D2932049D6DB1D8C82FE64BEF0E1
06DA61C9C51CDAA22B7F14CF8442DA8132B008D38F77BF29F3521311E24EF64B
AF59B384D8E0694E121F139972B3C03E23B21650030E0F04AA3E4266075A49D9
410E612DC22105C4CCCF5FD1161440D41B64388AFAB1860444B7E434C65DF8BB
0A1123B04407554C80F76B606668C32B6ACA2A758B6437D12D77EB89F26BB6C3
8B> |-
/L <1C60D8A8C9B7C3C99EC158686D32AAC474F7E799F5A2E2E670AC2E572B83
0390E37EE127C442B05586F60D5473263E4B45BF7BAB12563B4647797FE7FE9F
08323C18FC6591B0EBBF45613C6E63790B8E89547744CD68F6A91F2582DFF595> |-
/T <1C60D8A8C9B7C3C99EC15868D5FD173DE9D9D028E7482357836B6D5C7A50
DF4AAB3FDEF30A5BD59F8D69E9096BD4884AA8E789466B9EA7CAC6AF026585ED
85A15F381362508BA1B6CFC74D22E184A94A7596DE2B4994978265DBDD05902D
6DA6B4CC9D0AA7224FD9D6BD> |-
/d <1C60D8A8C9B7C3C96E751C0E4D459EE42C292CFB65478FD596798F486833
E3DD0B30F57574DFE3876E4662AA074F1B3BE2B01379B512C33E2715ED6F9752
1391B4F07A612E7C24447738311A9F24C4C444BFD6291A1B86576E4CBBA3C557
8E887F089B22092E0BDB1C53FFF6963297B7BF7F1A74AB8A3B7B0D2EC14B471A
BDD5E72963A7BE1FD5E43544B62DFE2493C33C9975BD4A8E1DC204A61984AB72
2E9D918D05E50BFD0671D4F0825AA013> |-
/e <1C60D8A8C9B7C3C96E751C01876A5DA8A07BEF0009F1B867094A7924D2A9
4989EBC47E9108D1DE64C0196D6EBD37CD6971BBC0545D904EDF3B3BDCFD8EC3
B8C5EAB9F2D8DBA4F021C3488BD0BDF5D712FD6BA7A0AA1737E47C23F730CED7
127C2C16CEB818C1CA79> |-
/f <1C60D8A8C9B7C3C99EC15868FFF428FA12CD1DF81BF1596D3A6100BD8425
60457BFB7F9A081D35D6FB66FFFD9748094AC935D4F01F599A1F982CE7852ECF
4D2A14A5F8897732AEA0C0E48EBDF6AE1A4B54C6F658915AEEEFD29E78CDCB8B
5AE6FDEDB865BEABD73FBDAA24A1A7F6B204669EFF652EA0BC83880717EE2B3C
58F6E934A8704CA4072C808B> |-
/h <1C60D8A8C9B7C3C99EC15868E9377F0ACCFB44C479C82EE0FB0E87789B8E
FBAB383C6EA190310FA0CFBAD010D0AD8C2F10D92607D9594D49A568B35273FF
7CB010AE5B458DA318CAEE03353E67FCFDC1B2A50D3421C8DC1FD228E2E4BBFD
81BAE9126CD57E42F63319A1930E4B4C6320AAC675E8F12C181E1DDA8CDFEA92
3B2B7A6770A02CE9EE7FFD3686D22DC3E636E5559C3F262C> |-
/i <1C60D8A8C9B7C3C99EC15868FFF428FA4920C85425AAB7D8521091D68A84
0C5C2D43694DF7BFFCB637E7A935C52A0C361FD93985D29151A08200BBDF065F
311A9DF7E68A0AFCF4A3BCD18C64F3659B1FE3C2C14EB1E93DF8BBB4848849EA
3D38A5478188710DE744E21F> |-
/m <1C60D8A8C9B7C3C99EC15868FFF4289466AC0D8FDE9D4A323AFF900CDB87
BCA177BEDDB2A15CFED3B521896A2BD9C05BFCA5AE0B06C0A7AF7135F458F8F0
25EEC3AAABAD5A44D5F737F4B110AC1711EEF8410D20E18EB7B8614583468CE5
E1B8FA6719E78BDC87213FBD39A50AC56C3143F04D7B2B3300EE1BE982147C19
45053B6E1C947CE0459C59FD6B7332E31A4D46DC8B3B7CA5CE96F5839467D66D
0B53A161C52A816A6A6D3BF848E2544E2238007291311ADA3638270B22F5D986
7C32E9F5BA310C33FAB6F0980750BA7DF9BD3BA8836F14AE8F13587BBB29B127
936ED362BF30F38432551A3EC0> |-
/n <1C60D8A8C9B7C3C99EC15868FFF428CEAB4C061E50A3AD59F09A64B3BAB5
02B1309C5F218C5FAED58A53138B2E7679F06E5FFC54A341BF841CC40046CFBB
24FD3C2A54E708F3661A6B37AD1EF061E48C6731F21F70CD2DF554C8A7BD7317
B35890ACB61E7E2AC09CC0055991C31F1F1A4B3949BDF2B9B8A3488034DD684B
FE8C9AE524E4524926EEF6651585D1817D09EEA3757FD4B81F5CEB3B1CD357A5
59990FE63245C2906CE6BD3B1468D6D9E67CE4F8ECDAF1D2CC1F85EBDA2E> |-
/o <1C60D8A8C9B7C3C96E751C0E4D459ECF4885BDA9C6C1D2AD68BD54E53CFE
28C56C5D3626FA1E4FCD629E7E8BFAC8C49A7E48BA7987300849CCB3AA37A19E
2BAB43C8B07B256A020857B456C8B9F5CA22> |-
/r <1C60D8A8C9B7C3C99EC15868FFF428F5AEF474C8671D3FB387776DFB9AB8
70A4465E66ADCC49DCF1629E187AF21C13AC8FEE55AF7128E79EAF7D470A34B0
099C5D3E29148B67D43CB730CA6E13F1E9C69BFD6F5D176235DFDC129FD1C29B
58BCE9065BF8DFE9F45F6B65F1C581FBA94A2C51EFF75C8E4DBB6BB0BFD4F704
20EED53C99A4FE> |-
/t <1C60D8A8C9B7C3C96E751C0E5B8FBDF7DC993A9C6E80931A6165CD7CDDAD
AE161D038D015704B53B1ED122D2F0D1282F5A1D7391E4DB011CD5B576DDD7EF
B91EAD2C6B2AAAF2F1C0BCB55EB3F0614F13A9DCD01CB17DBFAE1A26342BA69E
F1F9DD5146829E35CB3810CFE459037763AA0A2F> |-
/w <1C60D8A8C9B7C3C99EEA68CA542B301381B6832B7002EF43FAD445767EFC
E3DDA1D995129FFD7DCC34A4D52DB9398F76064F0381F060846E3EA0B7A09B24
420CBD366A79127B40ACE4B3FAC0306EEA8FB4BBE2DD1AA35546174F78AB8F79
E65133D1214D43C41DAF0DDA554D2F60> |-
/.notdef <1C60D8A8C9B7C3C91B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLW+NimbusMonL-Regu /ELRBAA+NimbusMonL-Regu findfont ct_VMDictPut
/BQUHLW+NimbusMonL-Regu*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C 8{/.notdef}rp /L 7{/.notdef}rp /T 
15{/.notdef}rp /d /e /f /.notdef /h /i 3{/.notdef}rp 
/m /n /o 2{/.notdef}rp /r /.notdef /t 2{/.notdef}rp 
/w 136{/.notdef}rp]
BQUHLW+NimbusMonL-Regu nf
BQUHLW+NimbusMonL-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
.611603 537.211 mo
(TowerChi2ndfLimit)sh
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
114.301 537.211 mo
(wassetto5.5forpregeneratedbackgroundand1.86forGaussianbackground,)
[7.76727 4.84364 6.65465 4.24371 4.84364 5.45454 3.03273 7.86546 5.45456 2.72726 7.87637 3.63266 
5.45454 6.04356 5.45456 3.63263 4.68002 5.45456 4.84363 5.45453 4.84366 3.63266 4.84363 3.03275 
4.84363 7.87637 5.45453 4.84366 4.84366 5.45453 5.45456 3.63266 5.45453 5.45456 5.45456 7.86548 
4.84363 5.45453 7.8764 5.45453 2.72729 5.45453 7.86548 3.63263 5.45459 6.05444 7.87637 4.84366 
5.45453 4.24374 4.24371 3.03271 4.84366 7.86545 5.45456 4.84366 4.84363 5.45456 5.45453 3.63266 
5.45456 5.45453 5.45459 5.45453 0 ]xsh
.611595 550.76 mo
(while)sh
27.5789 550.76 mo
(the)sh
43.6371 550.76 mo
(clusterization)sh
105.143 550.76 mo
(algorithm)sh
150.295 550.76 mo
(parameters)sh
200.881 550.76 mo
(were)sh
224.804 550.76 mo
(set)sh
239.652 550.76 mo
(totheirdefaults.)
[3.03275 8.18182 3.03271 5.45456 4.84366 3.03271 6.35992 5.45456 4.84363 3.52356 4.84363 5.45456 
3.03275 3.03271 4.24371 0 ]xsh
11.5206 564.31 mo
(Areconstructedclusterwasconsideredtobeafakeelectronifitdiffersbymorethan5mradin)
[10.1236 3.63265 4.84364 4.84364 5.45455 5.45454 4.24373 3.03272 3.63265 5.45454 4.84364 3.03273 
4.84364 7.69092 4.84364 3.03273 5.45454 4.24373 3.03271 4.84364 5.87993 7.76727 4.84366 6.491 
4.84363 5.45456 5.45454 4.24373 3.03273 5.45454 4.84364 3.63264 4.84364 7.70183 3.03273 7.69093 
5.45453 7.09094 7.09088 3.52356 4.84366 5.34543 7.09094 4.84363 3.03271 4.84366 4.84366 3.03271 
3.63263 5.45459 7.70181 3.03271 5.86902 3.03271 5.28 5.45456 3.03271 3.35992 3.63266 4.84363 
3.63266 6.491 5.45456 7.70181 8.48727 5.45456 3.63263 7.08002 3.03271 5.45459 4.84363 7.70184 
7.27637 8.48727 3.63266 4.84363 7.70184 3.03275 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+StandardSymL-Slant_167 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /AXNBAA+StandardSymL-Slant_167 def
/FontInfo 7 dict dup begin
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle -9.4809 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0.000167 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /theta put
def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [673 693] def
/BlueScale 0.039625 def
/StdHW [0] def
/StdVW [0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B7B2022385262600573CDCE830A2FA77423CED56DA96B8
6E83E62AB559C23999482342177BBF27A624F8364123C8ADE8C4B947B99A63C4
15352DDF5946459E64B7016C37B7508954E69FB072FE8D6D17E7BA316D9B0A72
33939124CBFCB34913DB5080366F26705C565A42032E4B13F9AD31C650927D35
273BC22D0FAF199546B1AB358DB374C487D495773B7C20CDFB4D200750A90C42> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BQUHLX+StandardSymL-Slant_167 /AXNBAA+StandardSymL-Slant_167 findfont ct_VMDictPut
/BQUHLX+StandardSymL-Slant_167*1 
[113{/.notdef}rp /theta 142{/.notdef}rp]
BQUHLX+StandardSymL-Slant_167 nf
BQUHLX+StandardSymL-Slant_167*1 [10.9091 0 0 -10.9091 0 0 ]msf
420.31 564.31 mo
(q)sh
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
429.493 564.31 mo
(and)sh
447.493 564.31 mo
(if)
[3.03278 0 ]xsh
.611603 577.859 mo
(the)sh
16.3207 577.859 mo
(sin)sh
31.4299 577.859 mo
(and)sh
49.5499 577.859 mo
(cos)sh
66.47 577.859 mo
(oftheazimuthalangledifferbymorethan0.35withrespecttothegeneratedparticle.The)
[5.45456 6.01083 3.03271 5.45456 7.22183 4.84363 4.84366 3.03271 8.48729 5.45454 3.03273 5.45454 
4.84364 5.41092 4.84364 5.45456 5.45454 3.03273 7.22183 5.45454 3.03273 3.35991 3.63266 4.84364 
5.99994 5.45453 7.83276 8.48724 5.45459 3.63263 7.22183 3.03275 5.45453 4.84363 7.83276 5.45453 
2.72729 5.45453 7.83276 7.87637 3.03271 3.03271 7.82184 3.63263 4.84366 4.24371 5.45456 4.84363 
4.84366 5.41092 3.03271 7.83273 3.03275 5.45453 7.22183 5.45453 4.84366 5.45456 4.84363 3.63266 
4.84363 3.03275 4.84363 7.83273 5.45453 4.84366 3.63263 3.03275 3.03271 4.84366 3.03271 4.84366 
5.98907 6.66537 5.45459 0 ]xsh
.611603 591.408 mo
(ener)sh
19.1897 591.408 mo
(gyofthereconstructedclusterwasrequiredtobeabovethecon\256guredthresholdaswell.Because)
[5.45454 8.59637 5.45454 6.76357 3.03273 5.45454 7.98547 3.63264 4.84364 4.84364 5.45456 5.45453 
4.24374 3.03271 3.63266 5.45454 4.84364 3.03271 4.84366 8.58545 4.84364 3.03273 5.45454 4.24373 
3.03273 4.84364 6.77448 7.76727 4.84364 7.37463 3.63266 4.84364 5.45456 5.45453 3.03271 3.63269 
4.84363 8.59637 3.03271 8.59637 5.45453 7.97458 4.84366 5.45453 5.29092 5.29092 7.98547 3.03271 
5.45456 7.97455 4.84366 5.45456 5.45453 6.06546 5.45456 5.45453 3.63266 4.84366 8.59634 3.03275 
5.45456 3.63263 4.84366 4.24374 5.45453 5.45456 3.03275 8.59634 4.84363 7.37463 7.87637 4.84363 
3.03275 3.03271 7.34183 7.27646 4.84363 4.84366 4.84363 5.45453 4.24377 0 ]xsh
.611603 604.957 mo
(the)sh
16.8007 604.957 mo
(fakerateonlydependsontheselectioncriteriaandthebackground,itisindependentoftheincident)
[3.52356 4.84364 5.34546 7.71274 3.63264 4.84364 3.03273 7.70183 5.45456 5.45454 3.03273 8.32364 
5.45456 4.84363 5.45456 4.84364 5.45454 5.45456 7.1019 5.45456 8.31273 3.03273 5.45454 7.71275 
4.24371 4.84364 3.03273 4.84364 4.84364 3.03273 3.03273 5.45454 8.31273 4.84363 3.63266 3.03275 
3.03271 4.84363 3.63266 3.03275 7.71271 4.84366 5.45456 8.31271 3.03275 5.45453 7.70181 5.45456 
4.84366 4.84363 5.45456 5.45456 3.63263 5.45456 5.45456 5.45453 5.45456 5.62909 3.03275 5.8909 
3.03271 7.11282 3.03275 5.45453 5.45456 4.84363 5.45456 4.84363 5.45456 5.45453 4.84366 5.45456 
5.8909 5.45456 6.50174 3.03275 5.45456 7.70181 3.03275 5.45453 4.84366 3.03271 5.45456 4.84363 
5.45459 0 ]xsh
.611603 618.506 mo
(electron)sh
38.477 618.506 mo
(ener)sh
57.0551 618.506 mo
(gy.)
[5.45454 4.74545 0 ]xsh
11.5206 632.055 mo
(Figure)sh
.873533 .244297 1 .131685 cmyk
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DCDD9F59C989262D4C837ECD30CDC197CC53D803B
FEC41706B8BD5D4AFE4F1DDC03AF8B5A096985BA058506805DD9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one /.notdef /three /.notdef /five 
/six /seven /eight /.notdef /colon 6{/.notdef}rp /A /B 
/C /D /E /F /G /.notdef /I 6{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
51{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
42.9169 632.055 mo
(7)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GFNBAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
BQUHLS+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CF
D85> |-
/W <1C60D8A8C9B5D6EF35A61E5C76A324B31A56F3B1CFE26126626F91A2A4BA
CB1AFAA605E0E99F36A77DB54F2E6AD346FFEBAF72E8228330EFB65AAE1194D5
7BEB271028701B01DDDAD430D9B1C5E6D2484E89D44C9AF9F0018889671FF0D3
BE9234ABC3DA9D8C8004B7B21325045A51F5AA0FE20F5CDACE9D24E8264E834A
6CC230947F02E113668F0DEC36085CC5DE7FE47E19E6F994D361F781D02378A2
2F044298> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BQUHLS+NimbusRomNo9L-Regu /Encoding get
dup 45 /hyphen put
dup 87 /W put
pop
%ADOEndSubsetFont
/BQUHLS+NimbusRomNo9L-Regu*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /.notdef /three /.notdef /five 
/six /seven /eight /.notdef /colon 6{/.notdef}rp /A /B 
/C /D /E /F /G /.notdef /I 6{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v /w /x /y 
/z 51{/.notdef}rp /fi 81{/.notdef}rp]
BQUHLS+NimbusRomNo9L-Regu nf
BQUHLS+NimbusRomNo9L-Regu*1 [10.9091 0 0 -10.9091 0 0 ]msf
51.2733 632.055 mo
(sho)sh
66.1534 632.055 mo
(wsaresolutioncomparisonforthetwoalgorithmsasafunctionoftheenergyofthesig-)
[7.87637 7.15645 7.75638 3.63264 4.84364 4.24371 5.45456 3.03271 5.45456 3.03273 3.03273 5.45454 
8.35637 4.84364 5.45454 8.48727 5.45456 4.84364 3.63264 3.03273 4.24373 5.45454 8.36726 3.63269 
5.45453 6.54538 3.03275 5.45453 7.74548 3.03271 7.76727 8.36731 4.84363 3.03271 5.45456 5.45456 
3.63263 3.03275 3.03275 5.45453 8.48727 7.15646 4.84363 7.14557 7.75635 3.63269 5.45453 5.45453 
4.84369 3.03271 3.03271 5.45453 8.36731 5.45453 6.53448 3.03271 5.45459 7.75635 4.84363 5.45459 
4.84363 3.43628 5.45453 8.36725 5.45459 6.53442 3.03271 5.45459 7.75635 4.24371 3.03271 5.45459 
0 ]xsh
.611603 645.605 mo
(nal)sh
16.8553 645.605 mo
(electron.)sh
58.6807 645.605 mo
(The)sh
78.557 645.605 mo
(resolution)sh
125.117 645.605 mo
(isde\256nedasthestandarddeviationofthedifferencebetweenthemeasured)
[3.03271 7.15646 5.45454 4.84364 6.06546 5.45456 4.84364 8.37817 4.84366 7.15645 3.03273 5.45457 
7.76727 4.24371 3.03271 4.84363 5.45459 5.45453 4.84363 3.63266 8.36728 5.45456 4.57092 5.45456 
3.03271 4.84363 3.03275 3.03271 5.45456 8.37817 5.45456 6.54538 3.03275 5.45453 7.76727 5.45456 
3.03275 3.35992 3.63263 4.84366 3.63263 4.84366 5.45453 4.84366 7.75635 5.45456 4.84363 3.03275 
7.87637 4.84363 4.84366 8.36725 3.03275 5.45453 7.7673 8.48727 4.84366 4.84363 4.24371 5.45456 
3.63266 4.84363 0 ]xsh
.611603 659.154 mo
(quantity)sh
39.5135 659.154 mo
(and)sh
58.408 659.154 mo
(the)sh
74.8917 659.154 mo
(original)sh
111.972 659.154 mo
(valuetakenfromthegeneratorlevel.Withthecon\256gurationdescribedabove,)
[5.18182 4.84363 3.03275 5.45454 7.98546 3.03273 4.84364 5.34546 4.84364 8.59637 3.63264 3.63264 
5.45456 11.64 3.03271 5.45456 7.98547 5.45456 4.84363 5.45453 4.84366 3.63266 4.84363 3.03271 
5.45459 6.77448 3.03271 4.57092 5.29089 4.84366 3.03271 7.36365 9.86182 3.03271 3.03275 8.59637 
3.03271 5.45456 7.98547 4.84363 5.45456 5.45456 6.06543 5.45456 5.45456 3.63263 4.84366 3.03271 
3.03275 5.45453 8.6073 5.45456 4.84366 4.24371 4.84363 3.63266 3.03271 5.45456 4.84366 8.59634 
4.84363 5.45456 5.29092 5.29092 4.84363 0 ]xsh
221.929 713.073 mo
(10)
[5.45456 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BQUHLX+StandardSymL-Slant_167*1 uf
/BQUHLX+StandardSymL-Slant_167 uf
/AXNBAA+StandardSymL-Slant_167 uf
/BQUHLW+NimbusMonL-Regu*1 uf
/BQUHLW+NimbusMonL-Regu uf
/ELRBAA+NimbusMonL-Regu uf
/BQUHLV+Helvetica*1 uf
/BQUHLV+Helvetica uf
/MZQAAA+Helvetica uf
/BQUHLU+Symbol*1 uf
/BQUHLU+Symbol uf
/UGXAAA+Symbol uf
/BQUHLS+NimbusRomNo9L-Regu*1 uf
/BQUHLS+NimbusRomNo9L-Regu uf
/GFNBAA+NimbusRomNo9L-Regu uf
/BQUHLT+Helvetica*1 uf
/BQUHLT+Helvetica uf
/HJCBAA+Helvetica uf
/BQUHLP+NimbusRomNo9L-ReguItal*1 uf
/BQUHLP+NimbusRomNo9L-ReguItal uf
/PBAAAA+NimbusRomNo9L-ReguItal uf
/BQUHLR+Symbol*1 uf
/BQUHLR+Symbol uf
/QJJAAA+Symbol uf
/BQUHLQ+Helvetica*1 uf
/BQUHLQ+Helvetica uf
/HIBBAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
