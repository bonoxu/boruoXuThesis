%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R8B53.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: Administrator
%%CreationDate: 2017/4/17, 11:51:53
%%BoundingBox: 0 0 296 199
%%HiResBoundingBox: 0 0 295.2013 198.3282
%%CropBox: 0 0 295.2013 198.3282
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 994 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2017-04-17T11:51:18+01:00"
   xmp:CreateDate="2017-04-17T11:51:18+01:00"
   xmp:MetadataDate="2017-04-17T11:51:18+01:00"
   xmp:CreatorTool="dvips(k) 5.96.1 Copyright 2007 Radical Eye Software"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:2308e392-5fcd-4421-91e9-412e32a28ff9"
   xmpMM:InstanceID="uuid:d33fbfff-16af-416d-aa53-02827290179b"
   pdf:Producer="GPL Ghostscript 8.70">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">passagerpp.dvi</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -198.328 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 198.328 li
295.201 198.328 li
295.201 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WGJAAA+CMBXTI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+CMBXTI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/FontBBox {-19 -249 1180 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 -0 686 703 444 452 661 662] def
/OtherBlues [-202 -194] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [107] def
/StemSnapH [36 47] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/period <1C60D8A8C9B08A9596444D96CF60DC9C77937A0F2AF30742CE9AF54
49F9389C583E25EF16C7870676DC78B1C3620F94A91> |-
/two <1C60D8A8C9B08A950B85A1987A8064B629C2408850FA83F988FB5BA4B4
E41A94F7AE1F89AFC11692067CC6973BA38C8907A83EE23E3171B1E8771F0A2B
4B25A60848B1ADA9D9C63724366545ACB36DA27EE022C74446DB142BBBB10D24
7865DD45DDA6519844B684946AE5F58B7F58E86A941578808A449FF1F10634AE
E107F744DAC7E9A7D8238F2A27EC66B5CDF0847881E129F5E4BEC3A2D5F49DE9
E5981832B74111580D9EE3F980F872A42322A3B5A400A4F546EA67E52B618FD0
C8114FEAFBCB1E341DBE58E6D7BE31C046E8684223DA1453A9D092D95C49E545
F90EC2225BC1B9745D174C4F2F2F> |-
/three <1C60D8A8C9B08A950B85A1987A8064ED806FB2F64D4DF83E2BDD5AC2
E91A036C66E6B4B8241B0BB4E75F0D86253126F1BC3FFE320720139A986BB447
0740FA4742B5B3E4D6806020CC068E6D2F34516FA22A07A51C4B33B2374F985B
94F1CFAB3B2CBF96005524AC85FC39333E0B8F91F412B677E72C033A83EF4D9E
789551EC9057ECDAFBA102E62521CC142240BC7AAC1E55B29B5A50CE77792858
66F6929A9CD7A8B22B925C85053CD3207B5EE0E995FB62BF0D1850B97C515FCE
316BA9A93995A713850E106635781C4867BEFED24961C7DBF5453CE445468A74
30A8B651589943047B3EC2DB> |-
/P <1C60D8A8C9B08A947D650297FB38831293A769BC192CDB1D6B050CE1BCFC
4F9306F65760CF4DE59AEED59CD13CB9D22458C8F94A2164D66EB376FEF4FA8B
12E4B5D1EA23095E114C7379BE61DAC9642154FB39E2BEEAC264B2C0534BE624
09C9B4C0753EB004C7A240A23AB092DAA4BD374DFD91307CE19CE7ADAAEA3DDB
F6193DAE8DAEE4BFA15A3E2F93CC7ED2BF5544D8127390C47BCF77E75DF58059
08D9160C9657FDF936C42605897C4BA7FC11CE9EBA> |-
/a <1C60D8A8C9B08A950B85A1987A809D978BF5EFD942946F946A5BC31F378E
5EE6E93128E4B972754E3239DF4561C30F85413C7D0A28C93F56AA2A2E802350
9C490A571AC32ABF8576DD82CFB4493A73A0E5F1402A100DF506912377AC7439
49B99222943610C4D39759AD5D5B0C05D62934A37CD607012251B71FFE5436DC
32CEEBFC3C0487CEA084C6D08F78CA257D1A79D7E308E36F5EE24279BF64E95A
7045E8421813273579549BFE84BB581AFE> |-
/c <1C60D8A8C9B08A95D33206F9CBD6B1035EB36D5315C45B0198145D6829AB
50429A56AF8DC4ECB55281E310553B2EC1978DAFC3622D62207167596227E9C6
39C8EA1272D712453795C6DF09D4B426E6AF0CC9F8688FF80CC0F168163DCF92
A7E338C47B5644EB6BDC5D497325F5D23743388F7FE5253AD3FBEDFE59526728
D300F589BB2A85EF379501AB> |-
/e <1C60D8A8C9B08A95D33206F9CBD6B1035EB3AD90DA6F1340EA495A5A3942
F3ED3348F866FF4757FEBC0C3B4AD1E7E444415337F28AB646D83934F2DEF2FA
D495DF35B8268891ACAD8611CAB713B49AE5739186E7B3078AA1F462877E6717
7C9A08A59B9CAF63462D440E837489FD3762553B7E5D2F723AD6601F2F2ECA41
466C97DFDC7FF1EC690968F01B1210676C> |-
/f <1C60D8A8C9B70B6BB625C57BD6FFFDCB2EC73A2C4ED6E3128A2E3E7A9F7C
89970852F7854497C71B26FE4C7F380D5A7AEC4E6C57C5CAA5868B0BDC15F62F
5CFD29A198BEEC38862819F776E76B83557D314A34761A61FBBD72B049D5FAD3
3578F8A0EE79037E7027849BBAB51DD63C22BA90A34F11E34470B50B9786BCEB
65ECDB4471BC774CE53CBB74F5ED1C5C235CC763DA4878B767129DCE8C37CD92
A148ADD344883D8560F93DB2DC919939A1F76DC256BF36112D> |-
/g <1C60D8A8C9B08A95D33206F9CBD6C958CCED79F6D2DF1FFC4DDFC955E796
268887CEDA2FCE0B02E48006F0D2470C85D8049B856D7610679A6C9099403B25
7ACD0422B5F31940B25FFB5066ECB79C14627BC812C9407B3E65CECB1F03FDFA
01728E27D01F21B7337AB1798A8419A23C3293F02F260697595AD32C316B7B02
60498F349C46918A3B0CC3204D602B57DCDE13FCEC9EA0CBFDC4DB0FB95F20F1
53B660228589BCBD9C2A> |-
/h <1C60D8A8C9B08A950B85A1987A809D978BF5EFD94298C092C272F9ED8049
DC5C3149B64F8AADF8A0376EBE4B5CAC9B3A3E449280291EE59DBA30BC888A16
A8851E77A7DC983C37410CB044CDD69010950344B9031C3F70E323A97C35B05E
38E4355A0172BC0A61F0F94335DC13BCAA07E2AC8AC51AAB0485E6C04FD72928
5A64095A5F2FBCD2332D043CEBF708AE575B6E5DBE4E6A7F383236C29233A6CC
E1312A7F4449765742CDA9F702FF71C2752C35DDE3C8D5E43D2417648EC387DB> |-
/i <1C60D8A8C9B08A9596444D96CF60D457DB483B8389D219C6FAC6D5B89B68
EADD24775C6E9DC28D6EC5A352B45F2C25558FB9EEA73C2EF6AA0BCDCD6304D1
FC66AAF82E2FFA5691583EDD113A0D298546348F17C51EB1E1F91F6E4079A1F1
1873DBE531E4E53C1FCDD59AA77F76CD7F94856FF13F129C285E93E1F3CC8518
CE6665CB78B65F751424D3A36ED99FA0194A7EF5680699BEE52443495E4F5F4A
68F437137178AFE29CBB67E0> |-
/l <1C60D8A8C9B08A956FD63946790140340C5859C6D0CCFF61F2EE69D2BB14
2338028543C8D9696A77716D21126694B871B37DE248EFEBC522ABEE03F3886F
D8AEAE9AE5E26A10980BEB2E41B81013205FA86C6C7250734AA8B1E7E72D95DF
3B3EE1BEE60AA5B27564B74D2E2745819D400BF48A6ED91732DEB5935A06338D
F1C01B92> |-
/m <1C60D8A8C9B08A943EFB0EDDFFA1DB0AB31B203C45E6FA429DB23926D0DA
E18C5B8601BE00B39F0717ED3158A8366A008806C5E4760C6610825999C68393
927001B155379ECA16ED6DA0433EA48BCA42382628C99C32EBD377EBF0B89B44
B86F3838F98CFF2164767971557615E62BD4BA9B86E45BCB7098058ACF16B46D
FE24BE160ADF90BD0FC9DBFA74882786B71B51C158278DCAF1DC9830D7FC6516
4CB496DBB368B0732927AC5EB2F486C3E4A8A3B4E5391534CD8E7F14AB005408
83A728428302AE08C355EB37DFC1015BDFF85EC55BC2E87CD2AF65859BA70845
7A1B1CE695BB1412D755E611CF53F6BF9E506B9007E9697CAB23588B1923B6E2
B1C5> |-
/o <1C60D8A8C9B08A950B85A1987A809D978BF5EFD94297F3D61DE38DACBE78
DA768A9D8D99151586055BAFD091BB4C059FED55DE0DA12D33AB1206B3C969D1
A5A8FD52E52319E1EC73ED2566B32E6BF198E9FB40EF41FD48A04F3D994A5B36
1C671786954F906B26DC7154083A370238> |-
/p <1C60D8A8C9B08A950B85A1987A80E51150B888C1F7B5D495CD4AE1769CE6
6F40466C390BA5C98ED82D2951440D0BD8C77B26AA10790C674A5D80948F81E0
6D40CD3B6867FC14C3F70FE330DB0509E1DA9A549AEA22688C2255BC2A85CCC6
D34E62872A7763C268ED60040BF7F1C5E21D342BB1682048A419DF703990BED0
1B455FF7D6F41146F7E2B452E04FE0DB122E46DAB15B25445A3E8E887BE464A3
3D3FBB088EE3188C5AB1165527C8A797C98FA2626D07C3CE896B72BE8656846C
EA58501A34DF4DC692971F1577BB8A1B78389EDFCD82> |-
/r <1C60D8A8C9B08A95DF722EA54180385C842B9F2CE5F953E14159C56212ED
7A7DB7DA1B82B1020860F27E5E9D02906EEBA29E2922BDC002905FAE5EF344E2
E556E92BBE9F1BB22F56947C1FCE0E6BFC37E27DEC6255D7D05EE73D1B93539E
189D79A51402D2553D6A558CE6BE24EA742268CF649B4529F7F791B56D215B3C
1074DC08A691E652390404234F433CAEC0E2F412167E75EE3383A1FED44F> |-
/s <1C60D8A8C9B08A95A262E01F87B614BF2E2065F18EDDB096D12214DD65A7
0D63D3E1B07659F6D3784AA81124F882C40E1E6C146AEC6C0D44538A7F3D158C
3FB221D24756A1CD9324A1006E6421D317364A3B9ADD11C817048D367CEB13CB
751EBA70AD22599B9EDB599B8607CC946D4D283A50E5E2ED982003BD6C64DD2E
1DBAF0C2A6E87B95322DDD0B8FFB930704BC4A34E7851A2DBFEA86384E3D8BA7
334BC75B1C77301E8C5D293A4F76124E31A0> |-
/t <1C60D8A8C9B73A414A9AFD79E9911D00407612AA1D2052DD5CFF09BF6A61
2C2DBFD4D36E6BB8D164491A43E46E3206BD08F92EFA9B8C317E86BA51D065FC
54131D49B4127244262976D34A47695CCEDBE1EA663ED60E7BF30FA039724DCA
879BCB46514856E0DB2518F0D0DE4CF3531839A17A293A32702E51890AFC1BB2
747C9050C2C15A720DDA12A154FF3906> |-
/u <1C60D8A8C9B08A95EEFBA90496EF3362300675C28451D84AF338D913237E
314D00AF0668950A3F6055D7FA2DFD043056D8F64BBA9DCF9DEFDF19F5F42288
02F9A5DEE97A1D549E98C4D24485F99D9B6825505E5AD4A3DC0FF989F567A4FA
3EA6A9CB81B23AFE40A66D8F49FD95FEFC866F6579FCD449C9776B33731C2359
46BE1FCF52413F3591812A0AA4C317B7B871FA7B9789D374BD50048235C12C9F
FBAB4C057A80E6DA17A3ACB9994A30EA3D6A1B35831AB251216C7CA20999288E
2860B0942B4189EE4F5771> |-
/.notdef <1C60D8A8C9B08A95BDFDBB2E772ACD> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKU+CMBXTI10 /WGJAAA+CMBXTI10 findfont ct_VMDictPut
/FLXAKU+CMBXTI10*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three 28{/.notdef}rp /P 16{/.notdef}rp 
/a /.notdef /c /.notdef /e /f /g /h 
/i 2{/.notdef}rp /l /m /.notdef /o /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
FLXAKU+CMBXTI10 nf
FLXAKU+CMBXTI10*1 [14.3462 0 0 -14.3462 0 0 ]msf
78.2719 -223.594 mo
(32.Passageofparticlesthroughmatter)
[8.51855 8.51859 9.00626 11.277 8.51855 6.96085 6.96091 8.51855 7.67688 11.5167 8.51859 9.71973 
7.67868 8.51855 7.20483 5.5199 5.16644 7.67685 4.2048 7.67688 10.801 5.51993 8.51852 6.36487 
8.51862 8.88651 7.67682 12.3584 13.5536 8.51855 5.51993 5.51993 7.67682 0 ]xsh
%ADOBeginSubsetFont: ONKBAA+CMSSBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ONKBAA+CMSSBX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 55 /seven put
def
/FontBBox {0 -22 518 716} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 694 716 458 475] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [94] def
/StdVW [136] def
/StemSnapV [136 147] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/two <1C60D8A8C9B795A0CD4E6BAEF5787D31C0CB2201979C439A58FDC5DF96
787FA27A2DDF753A7A6AE276D18985975561E4A6B34B468835D11B0AECC72605
7C6702FA8673456B82E902C2EA264293F681A39107115A6486E5880352CE5124
D7F79F54264234D87F5F854A962986BC05FDC1A25D2C644D65C5D1AB02D86D97
8099A91841D7419A73A85932332428565D97E762BEB2E48BB5B627> |-
/seven <1C60D8A8C9B795A0C6B3A338FBC6687A0B59B26AAE1EB4C26DB74571
8E54464B40770D140C66B052B4DF0672C5434598660BC43B831805AEC0FEDD5A
7AB55688887B8B24FAEA1B814C871B8C0045FE14B545CC6CBC3A327B264DB4CC
83073F8668F10485E065F78EC245F7E0D6FAF9C262> |-
/.notdef <1C60D8A8C9B08A95930123903BE592> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKV+CMSSBX10 /ONKBAA+CMSSBX10 findfont ct_VMDictPut
/FLXAKV+CMSSBX10*1 
[50{/.notdef}rp /two 4{/.notdef}rp /seven 200{/.notdef}rp]
FLXAKV+CMSSBX10 nf
FLXAKV+CMSSBX10*1 [13.0909 0 0 -13.0909 0 0 ]msf
366.152 -223.594 mo
(27)
[7.20001 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CMBX12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMBX12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 69 /E put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/FontBBox {0 -201 1025 698} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [43] def
/StdVW [109] def
/StemSnapH [34 43] def
/StemSnapV [109 132] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/period <1C60D8A8C9B08A9510AF83E41B62DF56EC4CFCC10B5D08F3166B3E3
5D556C765276098DA359B59EC54208F110E2D8E9B> |-
/two <1C60D8A8C9B08A95090CFBBDE9156CF1A318C969817CD137DA15349469
FAD9F0156B384713555B8B9568411CA51F295CDF7F564EB2444EF01CC00DD0B1
E135E4F6EA9DC43330D83B8D731872BB725F35D613F3915A1D35D2C84ECF287D
BAB74B2642E06043B6557ED6CFF443106E94B89C375DB00F3CB12562B1AC4C79
5D1972FD6FA68C7DBF9F993DE6A4B6E90B51> |-
/three <1C60D8A8C9B08A95090CFBBDE915983231A68D1E9D834A373017DEB1
649C47A562D27A66BF731A84D10A660C6844198961D240B1B3A111402B861F8F
80342B3CD848EE86501991306B3BACAE6C294D8781F2C58720B15041E77EED1C
B4644B2E757ED1B45902A54087E9FE08658F9B9CECB7D69118C1FD70E98BB328
E8308D9B6162722D0A868EE6B598AEDFAADC6501017DAA4917E7713126583A51
34B4D27677CE7DA906C7AA7197C9DEC947AAC664D3894EAB120EF3FA76DDA1> |-
/five <1C60D8A8C9B08A95090CFBBDE915983231865A8551AA4B884D32E6E07
AB7C0D8C384BBECA3FE1B25AD57CC87723820A720A71564ED82995810BC8484C
BC19347C7104A01FBF039F14D918EF30CC9CACB6A5CA489A0F4019AA28623EF4
82BDC73716B3D1863361DC965F4DEBB62B0DDCD8ADEDD603E0AC554391356836
17AA3D7D820180B0E499AE0DE26AE8CC9D42BC75E77464F4A42FF2C3D0CE0CAF
F3A2C58F3A03B0F8E224C7A232A1EE65085F1205D696F4D0129E82E4D38B09C5
3F2B5> |-
/E <1C60D8A8C9B08A946EB973D9DD982930F8AE5F996525B6813DC5193DE0CD
D5CAF3AAD29877DC2A53073543A4F7A39EAE5CBEAF37CFA0C827598C1187A1BE
B26BCC21891DD2ACA3914E9A5E2D1D371BF4F0B62034DBBB85EFDDC534A546CA
4526FA4AAAE1FA3F5EE51E7736820AD0002055D7AE9585> |-
/a <1C60D8A8C9B08A95C96620E75CABF74F978CA2083A0E64E7B605A7B53E80
C841A98D0F5DC74E6980E271ECB991704655DA7533A9678C7B601DD9AFF9F0B5
5B8F2310676B06D4E103EA132EA8DF00118F36AC458030C4B22511FCC27ED37B
2522DC131404E8F1B92E472ECDE868C4113F63E23030EB50CE1D3F1E61A1ADFC
80F06C7220BA23B1B4859EF23C222EB8DECA149AC3AB7333565C> |-
/c <1C60D8A8C9B7A73DCB069ABECD090F087035A2A0FC01212EFB86AC561D5C
B6571789CE0BEAEA2F7B26FC529CAC24A656A010EDD71F116CA10366A6F904D8
9D4F72110DC94560AD6AC90211DEB124421E894F1C23353FF2F3FE94854F2AD3
2D861EEABFDF9F2A661ABAD6EEF77F1829D78E959A8ECBA2EE89B8> |-
/d <1C60D8A8C9B66482CEFC1B8CCAA8ECB70A481D89B6EE23C0649631B2BBEE
BB68FFB00EB4A521C025F6BF2CC6C9DD84C26793452BF5ABD32DDEE1B99B0839
EADE07FECE3533EF84AC5ECAAEAF456E4B2E6A60CA723A628C91317093AED859
39A6D050BA1CD9E123C96E1EA93F21999E0DA204A63C74469853DFF868BB4767
8A767EB3> |-
/e <1C60D8A8C9B08A95082B4638597C255138706397971607695437B1C5B792
017ADD5111A0D503B24AEC833206F1DB9FE2932C057D43DBBF346FADB9EAC164
BEE98A5980EBABAFB5A817F96D6AE206CFEF7CB93EAB89DF8D619498B861E3BB
A0354BBE71D5B4321030C5473138528B1DF61AD1BEBB4D6E0C45E529F4DD7B50
F38EC907> |-
/g <1C60D8A8C9B08A95090CFBBDE9151CD9A545C89D314E9D050C555FD62D57
9AAE105F11FC2C727164E90ABE19532D00D316143102E4A890B5B5D361FABB84
82D45DAF10CB4C27D869CEE9C9731F07B272DFC98ABC4ABC8E8F0423A3F62D16
ADAA34F9E2ECF874E586D459354A5AE8A35B1F93962B774A1B9D857B8B4C112C
DDCB612A9B14F8315535978C8CEEB0DD2475C27B98A166F85D02C1883412CFAC
772246D532880B8E1871F06D566868F9C7ADF097A9B6C23A55708C853E8F37D5
DD2981A3787C678901459106C13781AC065FFC17B2F7A89466C9890ABC8F424B
DF2F11C2B2D2BDE80F3EA639D17DAB448B168EA166> |-
/i <1C60D8A8C9B08A9510AF83E41B62DF17FA6FFE42F43376AE7BE1350B76EF
B2B6E33635361CC21375F62385DBDB7EBB7043AF905FC576B3C541E87687F88D
5B9B56E600C6B87959B73CD0DC5D7DD5A3815DFC2C291252971755BDBF864A12
41D26021> |-
/l <1C60D8A8C9B08A9510AF83E41B62DF17FA6E18555130A4D92F72D54A94C3
E1E48ED1EF59FF79309FEE8FA85604A9AA0CBB4F11175E635339F1B129D71305
4BE406E37ED2> |-
/m <1C60D8A8C9B08A9538447A957DD4BCEDE23FD90962A61B7B59CDA9692CA2
833376DE06E75C42FE36654FF7FF639E949817A01209586ECD0EC52FB8EDB9D5
8F916BDC4F65ADBCBA7B2FE2D047D39981C43A08E4546E3E1C28F4002A7A60DB
0805AEB88E85626FB9D21F6EEE410CCDCDED80299881840DC534F8A478C8AC54
59F5D31498CACD0F4B8349382F779FE3FE8DF1AE5146B567DD5366D1D3142960
3F0B5293D3C5FA30B4FF9FCED6C4BAFAC2F07BA42FE144B7BDBF3783F6D156> |-
/n <1C60D8A8C9B66482C0B06145CAB2A50769325C1784AEB8C412F792549A05
9C436DA61F5EDB218A3269205FCEDD453F91E2876424303EEA35BCFDAAD1C07A
66181A2BC3F81924B54937BFFAAA1AACCF7F7A8721B07B81B95D8EACBD8E2182
474B0B3390E40EBC1AAADE1EE783CB98FCE1CE66C7C5B8867D602FCD827DB8> |-
/o <1C60D8A8C9B08A95090CFBBDE9156259107B60BFA8D5BDFFD48CBAB94AA6
886E557FE78496F1CF7D063C3B5E0FC3D0E733FBAD6424D33BC76A0A63969450
1A2F4DC674F83F022AFE19FDBE579861790C9D569B79436347175AEC2987E649
9A25E2BA101D19CA5683EACFDBBF2D61F720C2> |-
/r <1C60D8A8C9B08A95AFB286DB4B4ACF2D4077830A7048D8B1ECA1B86AB050
1BA7D5F0CF33CFBA5216ADACDDF32507902CC859729D4970123450A0A0E30E75
A74F99D6FAB59B1C9F5C5009AB8914A408FF0BFFB7A872A6600D0DE128906E91
2244C121E030ED36F02E0619037BC9A601A590> |-
/s <1C60D8A8C9B08A95B13B46E21B13FDFC2F2A3A5AB3484D9E42AEF9B8457F
8F2BB63249B2ADB5F22C32A5BB832C346762475B66D4289003E1474993C4619F
C04211E83AE8FE44A7D417AB0FD353DD87C3BE62E04C6289CEED6DD141C814CC
89C9E02F3ACC3A44419CC2B83F24BB155C09F0BA958FF9C3A260BA55BA379BCE
6256D6F8A709DCDC39C057BE860458DFD110025E23459BC195A2405B3F0EAB8B
19FFC1BC369D46C0F0248A3C954FA96D4E99FB53F7174E756B83944020235090
C0C8> |-
/t <1C60D8A8C9B08A950D39B484C8B6266357FB741549CEA596AB7A985B99E3
8919DF4DD35A9AC9A12E6885F854F06FBFCD2DA89F967FFC95C13F9A3BE55BAA
372D8C1F6C43B438CCC88F163563CE0916DDCFA85BEBC45D79AE2FB5BE3F8A> |-
/.notdef <1C60D8A8C9B72482E3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKW+CMBX12 /QJJAAA+CMBX12 findfont ct_VMDictPut
/FLXAKW+CMBX12*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two /three /.notdef /five 15{/.notdef}rp 
/E 27{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t 139{/.notdef}rp]
FLXAKW+CMBX12 nf
FLXAKW+CMBX12*1 [14.3462 0 0 -14.3462 0 0 ]msf
-87.4481 -196.714 mo
(32.5.Electromagneticcascades)
[8.04721 8.0472 4.4472 8.0472 16.5671 10.554 4.4472 7.31563 7.19997 6.24721 6.59297 8.0472 
13.4472 7.80173 8.04721 8.99995 7.31561 6.24721 4.4472 11.52 7.19997 7.80176 6.36356 7.19998 
7.80173 8.99997 7.31561 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 61 /equal put
dup 69 /E put
dup 73 /I put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
38 dict dup begin
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5B4F1FA8662A86AEED57
846929C2FBC07360B> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A08293A
A33E44598842821CBFE74832C3A2FC51890F3A66AFDE8EA8269173784AF985B0
8CD4044AADA37EBF8296E8DBBCEABE3042A3995F6A3A8DE32D90D624CEDF4C1B
CFEECD943884DD6052923FAC92315AE2977DECA1B6F479ADBDA41B10FDF2F38D
2B74CBF99D8D6FF4> |-
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B35FC2DB8BD5A49535> |-
/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13
CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9
B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA25
7DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CB
F9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB7
7472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393
F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F92619913BDBD1EF3C9
A> |-
/equal <1C60D8A8C9B08A946182837629008D945C50B3BD77B79680F3B07BDA
6301D2521ADF665EADEA779B8650AC6CDB556621631497A3BE00C67036F6EB06
05A36A2C0EE306396247E4A79F8EFAE500D78B59605F041F11> |-
/E <1C60D8A8C9B08A94478E8525F69A019D95FE72DA8C36F7444DAD19BB0061
E770906A150A4BD03370CA833313DABBFFA08F4F6923D6F2E1F291EF72FEE46D
4AD7965ABBD3FCC184CD136E84737FC4A8AE438DC8BB607FBEAF57BDF3513854
059D47B5D868D1DEC892419879AC6E70E4A380A91D5579DF201C92ADBF310894
399ED63228DC2B6A8229> |-
/I <1C60D8A8C9B08A9591900960B3FA4612DFF926AB21A530E1912F33677612
AC06B324D812E42049FF4946BE5E0FFA24FA0C62F2839FF2110EEC7EE0A42476
46E6F699D4C8BECE1825B3A661611E4D55F40F2E64FACB836D4D0C9780F60650
FBF10E0D42> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB32777FAAECD12647866E7CB3F
CCDC541E37F2225E520DEDE695980D4012AD5B972BDABC7E7E5410E71AC63692
4E778B3131B6C4D1E76F8C4592AC311A2107F53DC1850538C9E487E6D5DBDFE8
027D7126BA9ED8B24E7379B57E474ACD298BF6B3700CC970D80111DD98EFC872
C24D0DA3C75DDDFD177C6D15> |-
/W <1C60D8A8C9B08A94DF93CFE877B47057C7AA7A39F5E120783EC688EC89C1
8D88E4CFACCAF32BE3FB943A3FA817A1C0529930AB0065CCAE1705346D415CAF
6F3BE8B28DBD2FE903E61186A32EDF38B838858E46745C2B7FA48B8E6E0D0986
BD7A8BA149207F3F0EA77A4EFE06A7122E8FC6C2B04A0B03DD31C256ACF417D3
9DB720EA63717B8AF030369F0ACE1BFC1BDA8084F86023424DB31D0A5F8EC215
16A92BBE98292BD36BE0960649A591F01066473D657A65D807C4E00EF2369AF8
93D97C00CCFC22CA894227F9117CFE788197C57F5A> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/b <1C60D8A8C9B08A95C58E49244289DE68BEB072CD774760717B1AC03D4196
E4D3FDC2B7E7CE84526DCA2E8737C2FA5E45EF4219739ADAE55257C147981B47
E921680CBF8EC71E1F39B7177EB2E11928E4F7C286E610AEFAFA1EBC4607A54E
191D1F196A7965F72C64BEA568BA3862ADBA5A889497A5F91BACBB8AB6FD1923
FCBEA1299763C2CAC59190F5A77C070754F1BF7D4BA6A90B4DA4179E36EEBD00
44B1B65B335E618DE0786016CE171039BE4D49> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C58E49244289DE7CE169DCED605C5EBE88ED6BEB622E
1A913DB049559F328B1BA5B98D05029A7182E5C2EFF0D51CE9CC613951CA5843
BF921E7D499BAE077EDD17C241AB99693FE8BA73955D7F7DDA776929DA28007D
3A7B49D2D8CFF9811F7B7FCA42B593084C5A9FCD428CDA272D23822309D5F54A
9A96DE753B3903C99ECF817F629505E0CD844C8EA2BBD36AF3BB9BB95019C9E3
F1984ACBF44584725C8D7D603DEDE90A38E33CD93C> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/f <1C60D8A8C9B08A956BA15F0F7534FD16D435BF285713D1FC2F47197CAA01
5B3C5AFE7501D363DF0FB89829DAC5D1912FC89943C49D28C03497E2EA8019DD
6DCE2906F7906311DC1AB2F70AE5D2CE9ADF3B46C5D6C3EF240CB58AED447B3B
F9E280545327427877E3A846C4989F60BC26D328630237D9E0C8BCEB0572A3A3
3A753A46503C5600B2D3> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C58E49244289D52DBFA666019C293718E3E7399937F9
0F1A0F2A1155777F5E01169AA0132707A9262D30488EFE9C2FCEB4BF171B6AFD
5F16C4C42902BDD0545234C303327A9B4335220656812449A087C08C1640E016
F013F6CCDD3EC75EF7F502D7916CEC9FE8489950FAFAED57D06A770FE255EFE7
3141547D62FD2EB21835242083E6DA1ACE70A1B09A1C6D7472470640> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/m <1C60D8A8C9B08A940B724A74A01E176AC76C178E539FDA15CBEFB3251A61
C8116B9FE351FF1BC83539595D23AE382CF3B7BD76D62DC94F39B27B55D161C2
888F1D0802E5CF73898C0ACDCA15FB7A28AA1DFAA4097D26E5F1ED6CA3CF5043
5DDF248924E60D22E0F7E352F621676508849260B5671A3BC8A3B68A0E5A236B
21A2D545F7F03555DF313A266CEFB0FAC4D988447E218579B005BC3818325D6B
E4238BE79A219C693AEEC947AC4494C76A2FABFB89C7C87C3BF2D966FC535B3B
3741AD984B1F14E65DD80CEDA6556E93E5BCBD474DAE67124A7D680871344313
5E77D5F39550C52591C734> |-
/n <1C60D8A8C9B08A95C58E49244289D52DBFA666019C277832971AECD3A2BE
2BEC7B54FB6495FB92576707685DC74ABB91BBDAE34883FF9A67F98976AA9644
4991998E75E7C0DD660302AA32F4A594CB8943AF8C8A7A1816EDCC145706F59C
4AC6594ADA8C70D4581324ACE95FAF27E8310531A9135111CD73F07271177AD9
19E481C50EA9A49AF6DC17AAB4F64FF2FA69B930EE3125F90FF45940A8B79400
77DE52AFBD694294FC> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B08A95C58E49244289A5856A87A514BACC963067C66BAB239D
CDCE9F4261100AB3FC27C442F38251F748BDC4FE1B33D3674C3AC458B8D90659
4A7C097B284E300785EF89EC935364238F6F85814959B59FC602E1C9218990A1
EAA89E9DD6BE62E2638614527B32DD37536058624D71AD22200066FC58B85A2F
23FE75D65D0D566D42537DE7A54F403AC773A788746DA39DA5E08141350763E8
90C3D5FA2E03893A0A2E244C> |-
/r <1C60D8A8C9B08A9584DDCA65F36574E4C0AD887280FF9B909C6A899987DB
293D7852BEFA4C39930336FB095720C0B7F3DAB63BAAA1B8DDCC043FA283F018
8CCB14B3659C329CFE1B109E221BED92090F6BB29820D4EE71C04A829063DE78
A3825B55E95A657233DC92BEDB8A985D8343619E09C6311B13BC89263D4BF360
2386AD699E1FB63E157604D8B7620B> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/u <1C60D8A8C9B08A95C58E49244289DE7CE169C00DDE88F62291340DE711A0
FF1D26EB52FCF3EA61C6DE0F9A060ADBE1A24F6D7B6535515F73FEC960C83DC4
3F9D89FDFA0F5296079D78C110DE4E236B69827950DE2B2EF435FFF73BD0B1B7
E3440DDB136FD7C4F9278F088A54E358560D42350EB0CBC6A728CDFD> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/x <1C60D8A8C9B08A95D222871B45C8170346D4B3692E8D5307651DE3271DD6
AF0FFCDE284DD9CDD3B987BD9A4951E635C7A5CDCF53A699D8D2BA39BF571FED
C61B4760FA01C102B3CF6C44B24A57107DFFEFB711E00B7E6B8A7F332F9AC2C5
3243312E3CD55C94054BCA0B5D37362E138F5DD97019783B5271FD96258D5354
389532FB5D3FC50CB007DF880768FCF0AAEC6D6F5D8AB1559D6270DF0761EAD0
57A9F39E9A718AA16D8D8ECA90D61565C41A9B86CA057EC652FEE1927FFE969C
A046D06A10E75C83320EEEAB290370B870EF0E26D64C8EE9F9FD2B5549> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
/z <1C60D8A8C9B08A95B1F07368C45D864DF4474A20871FC664B8852059094E
95B1AD892B88EC35B7805C7F08622DA0E6CE40252085D0FCEAC9B69DEE7AC3FB
4801FCBDCE2F88570AA73B253F1D5D5B25E723A6A6E28A8B6198E25FE08D9384
A6F44E1422CD02B5> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKX+CMR10 /GFNBAA+CMR10 findfont ct_VMDictPut
/FLXAKX+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 3{/.notdef}rp 
/two /three /.notdef /five 7{/.notdef}rp /equal 7{/.notdef}rp /E 
3{/.notdef}rp /I 10{/.notdef}rp /T 2{/.notdef}rp /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
FLXAKX+CMR10 nf
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
-73.0481 -178.714 mo
(Whenahigh-energyelectronorphotonisincidentonathicka)
[12.2427 6.60534 5.27473 11.8854 11.2801 6.60535 3.36266 6.00002 6.60535 3.95593 5.27475 6.60535 
5.27475 4.68401 6.00002 11.6427 5.27473 3.36266 5.27475 5.27472 4.68149 4.68399 6.00003 11.8852 
6.00003 9.84387 6.60535 6.60532 6.00003 4.68146 6.00003 11.8855 3.36267 9.83472 3.36267 6.60535 
5.27469 3.36267 6.60535 5.27472 6.24527 9.96164 6 11.8854 11.1602 4.68143 6.60532 3.36267 
4.91489 11.5226 0 ]xsh
270.272 -178.714 mo
(bsorber,itinitiates)
[6.60535 4.67465 6.00003 4.68402 6.96524 5.27472 4.68402 9.00281 3.36267 9.84143 3.36267 6.60532 
3.36267 4.68146 3.36261 6.00006 4.6814 5.27478 0 ]xsh
-87.4481 -164.434 mo
(anelectromagneticcascadeaspairproductionandbremsstr)
[6.00002 13.3253 5.27475 3.36266 5.27474 5.27475 4.68145 4.68402 6 9.95598 6.00002 6.00002 
6.60535 5.27473 4.68147 3.36267 11.9946 5.27475 6 4.67471 5.2747 6.00002 6.60535 12.1149 
6.00002 11.3947 6.60532 6.00003 3.36267 11.4042 6.60532 4.68402 6.35986 6.60535 6.60532 5.27475 
4.68143 3.36267 6.00003 13.3252 6.00003 6.60532 13.3253 6.60535 4.68402 5.27472 9.95596 4.67468 
4.67468 4.68146 0 ]xsh
245.672 -164.434 mo
(ahlunggeneratemore)
[6 6.60535 3.36267 6.60532 6.60535 12.9602 6 5.27472 6.60535 5.27475 4.68399 6 
4.68149 11.9947 9.95593 6 4.68402 0 ]xsh
-87.4481 -150.154 mo
(electronsandphotonswithlowerenergy.Thelongitudinald)
[5.27473 3.36267 5.27473 5.27475 4.68145 4.68401 6.00002 6.60535 9.59486 6.00002 6.60535 11.5253 
6.60535 6.60535 6 4.68146 6.00002 6.60533 9.47488 8.63739 3.36269 4.68147 11.4054 3.36269 
5.64 8.27748 5.27473 9.60413 5.27472 6.60535 5.27472 4.68402 6 5.40253 9.24255 8.63739 
6.60535 10.1946 3.36267 6.00003 6.60535 5.99997 3.36267 4.68149 6.60532 6.60535 3.36264 6.60535 
6.00003 8.04266 0 ]xsh
235.352 -150.154 mo
(evelopmentisgovernedby)
[5.27472 6.00278 5.27469 3.36267 6 6.60535 9.95596 5.27472 6.24527 9.72137 3.36267 9.47452 
6 5.63989 6.00266 5.27472 4.68399 6.60535 5.27472 11.5255 6.24518 0 ]xsh
-87.4481 -135.874 mo
(thehigh-energypartofthecascade,andthereforescalesas)
[4.68146 6.60534 10.0749 6.60534 3.36267 6.00001 6.60535 3.95593 5.27475 6.60535 5.27473 4.68402 
6 11.1626 6.60535 6 4.68401 9.48163 6.00002 8.40535 4.68147 6.60533 10.0749 5.27473 
6.00002 4.6747 5.2747 6.00003 6.60532 5.27478 8.40259 6 6.60535 11.4054 4.68149 6.60532 
5.27475 4.68399 5.27472 3.60535 6 4.68405 10.1947 4.67471 5.27472 6.00003 3.36264 5.27472 
9.47479 6.00003 0 ]xsh
234.032 -135.874 mo
(theradiationlengthinthe)
[4.68143 6.60535 10.0749 4.68396 6.00003 6.60532 3.36267 6.00003 4.68146 3.36261 6 11.2856 
3.36264 5.27472 6.60535 6 4.68149 11.2853 3.36261 11.4055 4.68146 6.60529 0 ]xsh
-87.4481 -121.594 mo
(material.Electronenergieseventuallyfallbelowthecrit)
[9.95597 6.00001 4.68147 5.27473 4.68401 3.36267 6 3.36267 9.24286 8.16534 3.36267 5.27475 
5.27473 4.68147 4.68401 6.00002 11.4052 5.27475 6.60533 5.27477 4.68399 6.00003 3.36269 5.27473 
9.59477 5.27475 6.00275 5.27473 6.24527 4.68146 6.60535 6.00003 3.36261 3.3627 11.2828 3.60535 
6 3.3627 8.16257 6.96548 5.27475 3.36264 5.64011 13.4373 4.68146 6.60535 10.1948 5.27475 
4.68402 3.36264 0 ]xsh
213.392 -121.594 mo
(icalenergy,andthendissipate)
[3.36267 5.27472 6.00003 8.16269 5.27472 6.60532 5.27478 4.68396 6.00003 5.40253 8.40265 6.00003 
6.60532 11.5253 4.68143 6.60535 5.27475 11.5254 6.60535 3.36267 4.67462 4.67474 3.36261 6.60535 
6 4.68146 0 ]xsh
-87.4481 -107.314 mo
(theirenergybyionizationandexcitationratherthanbythe)
[4.68146 6.60534 5.27473 3.36267 9.36411 5.27475 6.60532 5.27475 4.68402 6 11.0428 6.24518 
10.9226 3.36267 6.00002 6.60533 3.36266 5.27477 6.00002 4.68146 3.36267 6 11.1654 6.00002 
6.60535 11.2854 5.27477 6.36264 5.27475 3.36267 4.68146 6 4.68146 3.36267 6.00003 11.1655 
4.68402 6.00003 4.68149 6.60532 5.27472 9.36401 4.68149 6.60535 6 11.2855 6.24518 11.0425 
4.68146 6.60535 0 ]xsh
237.392 -107.314 mo
(generationofmoreshower)
[6 5.27472 6.60535 5.27475 4.68399 6 4.68149 3.36261 6 11.1652 6.00003 8.2854 
9.95593 6.00003 4.68399 9.95471 4.67468 6.60535 5.63995 8.27753 5.27472 0 ]xsh
-87.4481 -93.0339 mo
(particles.Indescribingshowerbehavior,itisthereforec)
[6.60534 6.00002 4.68401 4.68146 3.36267 5.27475 3.36266 5.27473 4.67471 9.36269 4.3186 10.9252 
6.60535 5.27475 4.67471 5.27475 4.68399 3.36267 6.60535 3.36266 6.60533 10.4401 4.6747 6.60533 
5.63992 8.27748 5.27475 9.12404 6.96548 5.27475 6.60535 5.63989 6.3627 3.36264 6 4.68405 
7.68277 3.36267 8.88129 3.36267 8.99484 4.68149 6.60532 5.27472 4.68402 5.27472 3.60535 6 
4.68405 9.71466 0 ]xsh
210.512 -93.0339 mo
(onvenienttointroducethescale)
[6 6.24527 6.00269 5.27469 6.60535 3.36267 5.27475 6.24548 9.12137 4.68143 10.32 3.36267 
6.24533 4.68143 4.68402 6.35992 6.60532 6.60535 5.27472 9.59485 4.68143 6.60535 9.71472 4.67468 
5.27478 6 3.36267 0 ]xsh
-87.4481 -78.7538 mo
(variables)
[5.64252 6.00002 4.68402 3.36266 6.00002 6.60534 3.36267 5.27473 0 ]xsh
%ADOBeginSubsetFont: HJCBAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HJCBAA+CMMI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 61 /slash put
dup 69 /E put
dup 88 /X put
dup 116 /t put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1C
EF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D699
1493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-
/slash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA07FB5710C6DCAE
04F94BC5CAA5785E17ED28271B55834262FD3846E502CB37AB886C6947131546
D475C5E688F02E31C309> |-
/E <1C60D8A8C9B08A946E90626984EC148629DCE1864435D1C1A0856B93D9EF
91E1DD27E636A1E94FE0EE4DCCA775AF865554F89721C9C4ECBCFBC64FADE894
F43FFD1286C77F3C4074314A0241AC047B96380B5BC15EB54720980787945761
EADB99F0FEDD2218D28FE5C5486A13A7B367C57AD38D7CB897431FC5751148E6
E60A3249943DD9832FD5882D47D6A2F27045038E2DD360DABED8C39F26D6D22D
2C30870032E1ADD2395BDDFF122B94F76F4DCF4D40019CD98377DAA21D18CE14
F54AF25748F9C1CA2C5DBCE1A805E1AABFD110A1EB0A4F4EE5A99592C49EF8DA
85F90AB9A7F0D1F0320AC7076E06A3E04272F41BB4A3CD316564DB61C4C6CDDD
E0E438EE1B5A> |-
/X <1C60D8A8C9B08A940D0B235317E910C4E520AE0EAD089E5EA45AAEFD9916
BA68992473BF411A91FC94EC432AF8D53B096E15DB5FD4F7F74AB4F7801898DB
632DDE88D09966E39E3CEF5917637245B1E09C5857D10C6EC2C3B72C44156B22
7947D2C2BAD174D396BBE53553C66510F41FAC76CD58165CC75DD8722E65FD42
8D2AFDDF6DF6BC5C2C63E8AB41323AC9A76D2739893F6401AE8CE50C05E8C70E
77CF6487AF1DA2C7000289E3D653D3787AC4978703AB3C6FBD1F3D909D4EF8A1
2855297A5F9083614E9C43A89F548F0712B48E556E9FEF189D9C6A70021E4EBF
53EAF77F4039506D9FCE722142D585A7463C9EB85BE70DA040E7BB7882A3ABF3
6EAD6E18463FDF95C255C8498855B33CA34FA7CF2D5FD50AF7BCAFE713C873E6
A7CD92AB6C145BA49B6F7763645819BAD2FEC5D156C1F779> |-
/t <1C60D8A8C9B08A9591900960B3FA4DFCC78A2656C8FFCE903AD32B3185AA
FA96E7E8F169C70A21E40446F7FCDB999B01DCAD790AF3282BE1F7314CE031B0
14D13BD59980E60CDA373878614FD8D25947164E99B22D0EBDD140EF950A8735
78C0FF49214C7FA82A07A8903657FBD10F27F25D097291BFD551AFD7AFD55C9D
5840F15584C42C4C44CA41> |-
/x <1C60D8A8C9B08A95C3B0337F773171C04CA65135C55DF1A346EBD1B9BC1C
13661A90DBCAF27AEA2EE3E780A7F474EA58EAB6250BD0B7F3E65B7F1BB63BB2
C08567D4303DBEE212AE12A6A93EC4B8EB59350AD4BB1946D40ECB93A0E124C6
22C7396E364A068B95C4FBA11DA7EA935B9A27ED9C5EC5B244AED2336467E291
18E4345A65EF43801484334F1AD2F0E640639A6836A2F12838D640579105253F
89A04E22E98841302574078C310F1BF540527CD931029CC575A36E38F7524258
F7571F78AFB84F9EE74530F63E66A0CF3DBA218590B37A943FFE3C> |-
/y <1C60D8A8C9B08A95A3A690DEE11C2ACFF7516D4A7CDA884FB3B130648C63
2F41B68B5E071E6BAD692658125A4CE9A4427A55054BF5DABFF855AF9D186215
1F50AD5D2EE36E064C9718B8694EF83525324184D7DD07A10B9FD203C707D849
3E926469CD1C36E94D5785557A2D95B556774E51CEFBAE2CC8AB735FFF293AFE
FA32B8D1FD5C52EC860AA6EC20816B24BD1EB69FE8581708322D6F09A08B3182
91EF57EAE554A00C60D585B786E53371A6D3FB2D8729C3F2C51DB65ABF8CA421
EEB103AED2CB924D829D66429CF6664CDEAFEEC4AD07C95E7FE8BCAB5D2A1AD6
731779D5> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKY+CMMI10 /HJCBAA+CMMI10 findfont ct_VMDictPut
/FLXAKY+CMMI10*1 
[58{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 18{/.notdef}rp 
/X 27{/.notdef}rp /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
FLXAKY+CMMI10 nf
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
60.2719 -64.1136 mo
(t)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
67.952 -64.1136 mo
(=)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
80.552 -64.1136 mo
(x=X)
[6.84576 6.00003 0 ]xsh
%ADOBeginSubsetFont: UGXAAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+CMR8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {0 -250 857 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/zero <1C60D8A8C9B08A95D352586DE315E2BB7C91B3CB4E5CC996813D11C6C
13D420AAA087FAB6A3E100536F206D79D0F7DF88FFE4DA0B00DD54B40020ABFA
D10B36B2BA804ABC48DA554E536341D792FB64EEFE39F5C1B51CC0F550FFB1D2
7D9936F4A4A5DECEAF0D3B5DF4D4EB0D1E61FAC775EB2816F8DAB6896A340ABC
A3A98E94D69639B105040A2B1799A11A82D0055CAEFD22984130C21CFD9> |-
/.notdef <1C60D8A8C9B08A9596FF84B2D0F614> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXAKZ+CMR8 /UGXAAA+CMR8 findfont ct_VMDictPut
/FLXAKZ+CMR8*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
FLXAKZ+CMR8 nf
FLXAKZ+CMR8*1 [9.56413 0 0 -9.56413 0 0 ]msf
103.352 -62.0738 mo
(0)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
112.832 -64.1136 mo
(;y)
[57.1228 0 ]xsh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
179.672 -64.1136 mo
(=)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
192.272 -64.1136 mo
(E=E)
[9.59781 6.00003 0 ]xsh
%ADOBeginSubsetFont: MZQAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 99 /c put
def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 441 452 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/c <1C60D8A8C9B08A95AF0C61ED10693C1C7BB4FDF87A1ADD41AA1432332500
7A0BA0A8AE03C88842AE6B6B51B250E072160232F1EAD6D4CB8308063451DE06
FB9C1A70F3CBD6C91A967E3FB192EC209E79A0E5502F6A4C08BD91C15D9A3A7B
876FE696D4DCD418658B42C603F698B1AF6792CFAAB90E17F5ED1199CEBEE8D8
201F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALA+CMMI8 /MZQAAA+CMMI8 findfont ct_VMDictPut
/FLXALA+CMMI8*1 
[99{/.notdef}rp /c 156{/.notdef}rp]
FLXALA+CMMI8 nf
FLXALA+CMMI8*1 [9.56413 0 0 -9.56413 0 0 ]msf
216.752 -62.3137 mo
(c)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
225.512 -64.1136 mo
(;)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
344.072 -64.1136 mo
(\(32)
[4.6814 6.00006 0 ]xsh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
360.752 -64.1136 mo
(:)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
364.112 -64.1136 mo
(35\))
[6 6 0 ]xsh
-87.448 -41.0739 mo
(sothatdistanceismeasuredinunitsofradiationlengthand)
[4.6747 10.6802 4.68147 6.60534 6 9.36133 6.60533 3.36267 4.67471 4.68144 6.00002 6.60535 
5.27475 10.1948 3.36267 9.35463 9.95596 5.27475 6.00002 4.6747 6.60533 4.68402 5.27475 11.5253 
3.36269 11.2852 6.60535 6.60535 3.36264 4.68149 9.47461 6.00003 8.28543 4.68402 6 6.60535 
3.36264 6.00003 4.68146 3.36267 6.00003 11.2855 3.36267 5.27472 6.60535 6 4.68146 11.4053 
6 6.60535 0 ]xsh
241.592 -41.0739 mo
(energyinunitsofcritical)
[5.27472 6.60535 5.27475 4.68399 6 11.0428 3.36264 11.4055 6.60535 6.60532 3.36267 4.68143 
9.35471 6 8.4053 5.27472 4.68402 3.36267 4.68146 3.36261 5.27472 6.00006 0 ]xsh
-87.448 -26.7938 mo
(energy.)
[5.27473 6.60535 5.27473 4.68401 6.00001 5.40252 0 ]xsh
46.2886 8.14746 mo
46.2886 171.44 li
4.9055 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 171.44 mo
259.774 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 8.14746 mo
46.2886 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.0524 171.44 mo
46.5238 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 171.44 mo
46.2886 161.793 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
56.8924 168.145 mo
56.8924 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
67.4951 171.44 mo
67.4951 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
78.335 168.145 mo
78.335 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
88.9387 171.44 mo
88.9387 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
99.5424 161.793 mo
99.5424 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
110.381 171.44 mo
110.381 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
120.985 168.145 mo
120.985 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
131.589 171.44 mo
131.589 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
142.428 168.145 mo
142.428 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
153.031 171.44 mo
153.031 161.793 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
163.635 168.145 mo
163.635 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
174.239 171.44 mo
174.239 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
185.078 168.145 mo
185.078 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
195.682 171.44 mo
195.682 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
206.285 161.793 mo
206.285 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
217.124 171.44 mo
217.124 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
227.728 168.145 mo
227.728 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
238.332 171.44 mo
238.332 168.145 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
249.171 168.145 mo
249.171 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 171.44 mo
259.774 161.793 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 17.5586 mo
46.2886 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
56.8924 8.14746 mo
56.8924 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
67.4951 11.441 mo
67.4951 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
78.335 8.14746 mo
78.335 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
88.9387 11.441 mo
88.9387 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
99.5424 8.14746 mo
99.5424 17.5586 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
110.381 11.441 mo
110.381 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
120.985 8.14746 mo
120.985 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
131.589 11.441 mo
131.589 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
142.428 8.14746 mo
142.428 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
153.031 17.5586 mo
153.031 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
163.635 8.14746 mo
163.635 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
174.239 11.441 mo
174.239 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
185.078 8.14746 mo
185.078 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
195.682 11.441 mo
195.682 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
206.285 8.14746 mo
206.285 17.5586 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
217.124 11.441 mo
217.124 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
227.728 8.14746 mo
227.728 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
238.332 11.441 mo
238.332 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
249.171 8.14746 mo
249.171 11.441 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 17.5586 mo
259.774 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 171.44 mo
55.7135 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 164.852 mo
46.2886 164.852 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 158.264 mo
49.3519 158.264 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 151.676 mo
46.2886 151.676 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 145.322 mo
49.3519 145.322 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
55.7135 138.734 mo
46.2886 138.734 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 132.146 mo
49.3519 132.146 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 125.558 mo
46.2886 125.558 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 119.205 mo
49.3519 119.205 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 112.617 mo
46.2886 112.617 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 106.028 mo
55.7135 106.028 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 99.4407 mo
46.2886 99.4407 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 93.0873 mo
49.3519 93.0873 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 86.4992 mo
46.2886 86.4992 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 79.911 mo
49.3519 79.911 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
55.7135 73.5576 mo
46.2886 73.5576 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 66.9705 mo
49.3519 66.9705 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 60.3823 mo
46.2886 60.3823 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 53.7931 mo
49.3519 53.7931 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 47.4408 mo
46.2886 47.4408 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 40.8526 mo
55.7135 40.8526 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 34.2644 mo
46.2886 34.2644 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 27.6762 mo
49.3519 27.6762 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
49.3519 21.3228 mo
46.2886 21.3228 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.2886 14.7357 mo
49.3519 14.7357 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 171.44 mo
259.774 8.14746 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
250.349 171.44 mo
259.774 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 165.087 mo
256.476 165.087 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 158.733 mo
259.774 158.733 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 152.381 mo
256.476 152.381 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 146.028 mo
259.774 146.028 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 139.675 mo
250.349 139.675 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 133.323 mo
259.774 133.323 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 126.97 mo
256.476 126.97 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 120.616 mo
259.774 120.616 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 114.264 mo
256.476 114.264 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
250.349 107.91 mo
259.774 107.91 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 101.793 mo
256.476 101.793 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 95.4407 mo
259.774 95.4407 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 89.0873 mo
256.476 89.0873 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 82.7349 mo
259.774 82.7349 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 76.3816 mo
250.349 76.3816 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 70.0283 mo
259.774 70.0283 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 63.6759 mo
256.476 63.6759 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 57.3225 mo
259.774 57.3225 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 50.9702 mo
256.476 50.9702 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
250.349 44.6178 mo
259.774 44.6178 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 38.2645 mo
256.476 38.2645 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 31.9111 mo
259.774 31.9111 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 25.5588 mo
256.476 25.5588 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
256.476 19.4412 mo
259.774 19.4412 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
259.774 13.0878 mo
250.349 13.0878 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
%ADOBeginSubsetFont: ELRBAA+NewCenturySchlbk-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ELRBAA+NewCenturySchlbk-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 61 /equal put
dup 69 /E put
dup 71 /G put
dup 78 /N put
dup 80 /P put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
def
/UniqueID 4032379 def
/FontBBox {-82 -206 976 737} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 466 486 722 742 689 709] def
/StdHW [45] def
/StdVW [95] def
/StemSnapH [45 61] def
/StemSnapV [95 106] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
38 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C3A108C5D956C4E3FF382776F25BFA792DF45
7BB4BCEF02FFD4E19CF418299FA52AC63431E78EC61998F031F9F3B0450E8AD7
BB6E03181B5DE754> |-
/parenright <1C60D8A8C9B81F2C0C5F6561DC79A1007424F02FCC385BC0F57
638D4E9680802569E6A0A170B119B89A2FE49A58C4D5940E6AEE7780E30F96FB
E140EE8A97D53DB> |-
/period <1C60D8A8C9B854D07EAD443F469A4F95B09F659C2EAD6A939AED549
1BF6A3BF0E0BE6D7C1647> |-
/zero <1C60D8A8C9B7EF32A0DB8CE7CD01E5F43A720AD8A9A67D76F729FAF40
EF589F5BB53A28CC56CDF021286C22CAF2BB2FC584E5B713BAFFC594E169056D
0D8E171B065CC1C2694B55EF7321B3DA366DB94AA6308FF241C5B19C2061AA43
ECA789539B8ADC9BE481FE0049889C33B6CA3DB1D8CE828CA0DB60BDFD2412B4
910F59D5932F7BE0A> |-
/one <1C60D8A8C9B7EF32572ACD8D8EA14D948CC8BD3F15D8412DAA831DB058
B9B02B270CCC25A84FD6379465135620B366FADA97E106A9428A21C058E9BBB4
BEE6A58B7184F608182852A67FAA8780038C6B99F4E00B44C181AA0DBE0F> |-
/two <1C60D8A8C9B7EF325779812A4B3DD912CDB34140F122D794DE70756FE5
D0636435460DE8BABB07117C7DE367F0FA70F1504BFA521411B67A1DB29A2483
A6D4429EAC03BAB5EF14AACEF734DE4C00B839CBA9503D84F975CFA65D109FAF
028AC67BFF820C39091D19732C0124878046683D5E90BFEA5243D8F4406B278D
8063D06FFDC9E48E949DD406D527FC7414F20B940E29> |-
/three <1C60D8A8C9B7EF32A0DB8CE969F5CC7310CB9A73FD84B4B9CA5541CD
9FE82FDE57B80E80CD5FB7A2211760F7B4B852E7044433632198E6F2D6045329
47179F4892603069365279D794A194901FF4DB41E4937ABDA656A0E681B6CAD4
8AB2CD79A62EC4A4A873A3B569E63CAFEA99C418C918F4125F1CD8AAA2238A5F
AA013556A120C00DD99C7C97129DF08775D081A7F8CB72015FC52ABEAEF34F12
FA19A51EF52E2FD54EEFCDEBF69808DCB3A0254D524405D60C65F24A356C21E5
256123D467DCFB24BB38D1B5E29C24CE712220692AF7EC0E1977D95515CCD096
E8AA38D6178EE9C20CCA8F1518955319405D4CAA07ED85ACAB40780A731C87> |-
/four <1C60D8A8C9B7EF32572ACD82306AA58FCA0A064556BE7FBE8A93606CF
389B6243D0969E07CCF1E8EE8571F4524B470FD32E68EF4D755B71AA4290F841
F036F5397D76A03ABF939C95E3889796B5FD650AA7AF777D3D6DC8D4D3924DD1
5FCDD5700C40CE484> |-
/five <1C60D8A8C9B7EF32A0DB8CE630391CC20303C3C36C8FAD06601174874
87019FE12BD31FB42065AAA089793E630082D7DDC551CD4322FEAB4558933B5E
FCC4A400E72F7B47B56B131D870B3FE72D32CD8AD8402AA62D684E9323D93456
3C393AA9D3472446B056A7E62382C20C11DFEF14121956173902D2BFAD038763
6DCA8EB4C12E41C88B08101567D8AB35860D400565C20CF342233B753B06CC79
B061A5EEC3B88123A192D873FB6A4B9D0ABA7632CABBDDD166A9786C1292D6C7
E1D468B170B9C3ADC34694BA30D215D> |-
/six <1C60D8A8C9B7EF32A0DB8CE6107E7263B899056822F1142EB4AB33956D
7B0DFF40D6F5C512088A7A6C1BE18B6306924E7E8B734415B68701DCBB574843
03FD8A99E8D6605D95F19760157588CA45F66596C12396F5C401511AC0A0C7BD
EEDBBA0A799224DED1DEB235166D0DC92648E05A8BE71DD948C77FC86422C02D
B5BFC4B08DD7BD1A4726D496C56A6ED3E5DD5BB9938FBB46658ADEE5D3085443
BE376B49460DA2574D1619C716613B0464CEFDEF80EE14122112FA917BE70CA6
7B9C3BDCC7246980CF87BE088B609A15C2713E72CC178D72E4> |-
/seven <1C60D8A8C9B7EF32A19C5AF2C6BAB5F7674FDE424DF17DF4F5BCC31B
64FBC906647F233EB0AC500B028A91D349C28B89CF3FD56BEDC5D925E7D6B3F5
58ED2C79BDE0EA545E72A89E3A9AA7B14B490EBFB2776BCBF8F5471411D13F97
758E8BCD5E4834920CE5A2BE919C16DD075C6E94C81DB3CE09DD169D02F1B9D0
F7348E> |-
/eight <1C60D8A8C9B7EF32A0DB8CE7CD01E594BC5E767DD042B137AA234926
FB25CD3A8E118ACEBDCAB00694ABE9F54D856827B0D5C8BD5D191FABF2182C54
1540709EE148696AC913C7664DFC2735E95961B2375A30D6187B26586FBD6826
AD0CAE49F4DA04C77E8B8002A87D826BA6728507A3272C5FA65D8B43946CC624
CCAEB9998B5C506DF994E2830C18D5B109CD5FD98C9ED64B4AA3F7F54E3215E0
62BC68C4F380D84BF739D4EBBD5B2155D5DEFFEE50E654BB2BE57B4A6954DE18
0B708E7EF654A00BE0AD6D512DD11A8795B0032A09DD6EEA1DDFBBEECA292F10
791E3D75> |-
/equal <1C60D8A8C9B7DDB686D4434F3D9CA804C6CB24DDF7410095BB82E5AC
C37246172F5D5B2A8F6EFAC081EB> |-
/E <1C60D8A8C9B6079F1E6C8D88A631348CD9BFADCC67A3F752D0D6371B5C7F
1FE4935D4F9FC44927A86C8F01721707475F1C8C2BA11C52C6677923FC0E1025
A65AC22CEFB25DE83076417D782E1923D779C6AA7D429BD43352D431C684A729
6C1AEC01EDDE4403B6AB7603F75A5016075F55FEB41E85CFA0EFD6295319EFB5
7A1346F39C36E717ED5D0976EA40FB1B9FB14F09BB42B3A19DCDB8D3ABA5D268
68EDA5CDD369F0FAE8CFA86EFEE048661C68C2C86F587A1F7E65F4> |-
/G <1C60D8A8C9B6FF867E438E2D3C83337DBE41E15A8D90E530D61E9C7B5F7E
676012FCE19444C9F0CDCE479DA5A8037687278145F1DEC0666EE492541C3637
40ED1A221CABF8347BC334452BF102BC79998658DB48638B3DF47C83DD077E2F
CC9043E918416CDF32492692F0369D322E7201FFC389BAB71C4AFD746969470F
1CA62E760DE7F38BA4238E203390F24E005A0369D43E993451B84B8DF61B1830
8F7382CCEF125D4F05> |-
/N <1C60D8A8C9B6A2830280145B86F4DE5816177E64F012357262B8AF527498
9B2A6CF7FB885FA7DB87998B707A6576AF728148A9AACB3AFB019731E48EBC4E
A3055CBEF71C4292C46AA87EF1E627AFB43555A68F589B73273CE52EE509BE81
EDA5D18A541C8B7D9F48568DE0F879> |-
/P <1C60D8A8C9B64EDF8805D8CD9390DA7474B307955A129B050EEC22772AA8
948DEC928B07AF2FA5CA462971E31E61AF4468ADCBF4866BF2DE627EE1CE40E0
BE150CFA276F14BCCC37A688D0CB6F219B11E867A9472844FFFEF4669856118E
5F65A990F3507F409C63DB7F8C0F0C0929374F5C3D51D7ADC1C93F28DDFF1BE3
1E864E8F3B96B9> |-
/V <1C60D8A8C9B6079FE9268DA2D7B837CBAFDCA3B1E699DF4E833CACC85E7C
4E134C5933E298089C1887FFF7D4E3CD72E420E498D1C8A5C84FF2350C791AC9
DBB91B8B5036B9359B6716C807213098DD91F15B59FCCF747C438E90E099661D
50318F6558> |-
/a <1C60D8A8C9B7EF32A0AD7788FC360D1C3AF14E24862D6114A1F36FFD45E2
B462E8A9A583F8C86A5285A03A0E56AB2D5CCF3C13148BB4D04A5E7B502EB229
B7682AA5579074E3644AA3B72B97F8027D057351CF7F04DCC92AFA667765DE5E
4B2191C1F00C79EE93ADCE3CB8743538CF9A7981EC85C40D72B3C52BBE922208
E8A9118262EE8B7F9A3F6C713E916B19E9E5AF3E9C67BE976F06F4ED6A98A590
01A252F30BFB374B6AC7C20E0A4C4DA99901169032546F08E28C731642ADC418
FF95AEB5F5391D7CEAAAE8EDC51F337BCCC18F5575645DAD57E748391019A554
7A624A1C73D370A10A16E39DDFFA62DA35A422C0FD> |-
/b <1C60D8A8C9B7EF32A0DB8CE65748BA0CA397F9BBED3FEEBB08E975F552DE
492E10CD1090BDDDD69A8245D4492AFF0A63D0C948B5D3A52EC766C1DEFFE5EC
E61226145256F9BF5BF05BFFE023AFAF59A97876E11CF3D63BF2909DDBE5C1C1
BDB23CFD31CEA7D82A078A44E29782329A37C7ECE9> |-
/c <1C60D8A8C9B77FE2456D1D88081687C27D361A043B10A4F29AB0B89CF814
E2E8196EC163C3273692C4BAEF263CA6F5DD558C74900AF2F3C40456861C20F5
FF457698FB2D1C58053FD3F3DC6F5CA24E216F41FD2D39B9BF32A2F6294503B7
E7BD5330BF05F5B05DE9> |-
/d <1C60D8A8C9B7FD8411278CB24E1C5A2FF4E04FC526895A4DC338EED54649
7FF65A272D16CEC2C5B713F9805A179317021F7035B8ABD66F0152AED7F2C700
D3BF61DAEF0987B1B328CA7E83FC882B9C2535AB5148FC98985FFCAB7F62EBBD
27B170525DE8D45AE0B8DFE67B71DB27B0282717D46C5FDB5158AF75628C02C8
70FBE9B1CFFB29D7A4> |-
/e <1C60D8A8C9B7A73D328B90D1AEA38691D68C6F477A5D98BD95FC03F5C38A
E9DF20583A4E1A57C8BEDA15CEE0CEED099B36750101699AED8B04ABC826B440
E2438212D4EC0F45524B9C533B73816990761FA961F9DA4B779E93A0601371AE
6B5B29C375D359CEAAE831BAC4CE4904A4AD62B5E053> |-
/g <1C60D8A8C9B78256DE163C1804EC3C69F201817255A8E50A1BC100C1D370
D2FC10A5E033524B93A1B3323858B3FFF31B432D0005C4F111C115306DFDF270
71BF9A14FDF442D7CC73CCDE29B8069F6680B0BAB395407F5722FF2D793E77BD
C7F1AE9B9EC279892CE3CE9DBC445FDD7E91812E0EEE8FF5B10486A65C1BC0A6
32B6F3C73AFCA81E3E837640AA7FB8C2CAA4E945796FFC0952924EA2B3A01054
7A059499964C08369BAB16B70E5D98B0BEF00E8708A5CE9694CCC827501001AB
F6C73293F473FF1F33B4A71FCDFAFEBFD822926E11591DC041E3B74B137A25A7
7957B75F1A66BEA25F469BC132E71872940C2C168219345C274FE28552D43734
32309F92511D8286DD1F87001B1630AC44B96C86208824F6334383627B36B407
5AA3E44A55B7ED494B2AB14B647258CB5A667C86FDA864B49A9CC65524BDECCE
74225F90D1A36E6469ABE0E758EBC880302217> |-
/h <1C60D8A8C9B7D8BE6A707DD5F95ED115E7A18CBE8E94C3F256DF10C8A5D0
7B9552AA24B0055B161CCA9A3573C06745144DB76A01782F523EA57837329EE2
4D06588EAB11D1CD4B67FA0703D33CCD01EA546DCC414F17F43E4BDF281830E2
5540EECB15B17B7E95792CE10542D1E3A9CA32EFFC9D45E5825A323E7F561CC2
137699B6E10BEC7D13DD7FA2C1A9F9C2657E7E39640843FFE5BF> |-
/i <1C60D8A8C9B831A9FF90135ADA47BEEE99F8DEC4185B9CF32369A5C74C1B
AD4CA293DFE859BE105CBC505E9F9CCBA028957AB52B21D50BBFAD52EB55673E
6A64083B679EC471EAECEF734CAAC27172CC6FD34B570BFFF43708665E3434> |-
/l <1C60D8A8C9B831A9FF9013552B79493348A33463C77B46B93BE40E97346C
868A0BAE8292E40948DB304472DC01897F53D1F1CFC048F1A2A8E48B4D8C2325
C8> |-
/m <1C60D8A8C9B59F859BD1E30537C2AB7C56B2373AF7FC6887EACAA66A4E41
ABE05D6C832DBF306F832243A7DD86877E1EDE967C94E99F2CEC30E442F752EE
C44BB45E4EEC5B3889D2FD5DAEC028016B53B637F672F52439EC74EC33163A7F
DD8DA2DECFC0251448727CE9B75AD4C1D0BDE014A4FD92A56FF00DA1D9B3B612
C11833C997DD7AAAE8FE8218755E806BA98B2EDE3C322C525A33C3116D0981FC
A7EA44023ECEF583E96FE99ABBE39D449B0E5A76D9F03533294D5CC1A5010081
871C1C213A41D1F06288297A00D326EABFCA01AA2AAB> |-
/n <1C60D8A8C9B7D8BE6A707DD5F95ED115E7A18CBE8E94C3F2571EEA3488D8
F713BB9E50CE03547789BB4258A63CFFB761BC2AF5CC6054D7B99B79B2DD8FE4
AA62E05704779E976F0A195BDD8C28F7DF6C7408CFC0C52F9C4FF2B6442E6024
8C70E6F79DBB0E71A8FF33C8317B790CEACEA9B95FB19FC1B5E25346BBB2D668
B712DCF7430D8735BCF19E99AA343DE6A9F52831F25BFD91CE2F> |-
/o <1C60D8A8C9B7A73D32FCAE875E924D67C642AB59E2E2E6973F270B39B859
DFD29D0BF27263B1B4CF049BB59B4B2D19BE303F7F5F02BA55004C1C8D4F77C7
04715333860E8A9892AB28E5D8D9C060D61F151B0988660723ED> |-
/p <1C60D8A8C9B7FD84967B2EB300C0886CFFFF119A7191AF97897840C92962
7C2E6D8CBB9A9EF175F2DFA7CBB2BDF91CD3972CB15F474ADD618B9ABCB121C3
F8EDC30CA0B11BC419B9CBAC5EDEA0B7E58D421B1E044BD71C452090D50D8A6B
C805DC519C549CB436002A803849A2689F1EE38904BC083F6AE2791AE4B25967
CEF51A3064A029B810> |-
/r <1C60D8A8C9B77FE2B225CD309D04AB09E57640824C244AFA7B09850C5E60
4ABA04E517E9D9B23C149DC68A42777A7F657A62EEDF9FCE2FF58B1C8A919BEA
CAF09546952DE7A18442A2C4CBA46F92ED32F90BC9EB1E551F989FB10A7181F6
FA3C0A3C73BA1741B6AA8EDE0A8DE3DE8DA8951028F0C8> |-
/s <1C60D8A8C9B74CDD12DC5AE4861656AB95C20659A9AFDBA76E77979BF25D
F45CE5F636F9DE58D23AF54A14C166EA892E1AC5B6935FA3922D0C8A866AA868
1B1C719992920EF62237ABDEE7047B3850661DE43719E2F9FC2EB79704B81E9F
C9AAE9F942833FDBA844D4E9093D57327653831FEEA4C2A12D45C72B9567BA2C
66425D734772330477CDF4A4FE62FA7133D04057E20A6CB13FA9BC0CEFBF> |-
/t <1C60D8A8C9B7361F89456435EB25D127225D7582103D96D027B8E7956032
FFD05DB22F0336C4BA7E6692002B34B9B99E8238EC62F225AE5C7CE0A057FDE4
93E1548A3237AA74857D81BB51174D2E4C942B3FB6670A56CE5086ED52DF5069
F6BC562B522A4F65E6C98F85E5ECD57375524A84A9> |-
/u <1C60D8A8C9B7D8BE9D3748D68D21A3EFE7EC6CA294936DB12C54DAEAF379
E3826E426BD8EBDA37C85C0935BF8C24069FB5C9CCE22785AF28A068616F4108
D2FEB8A1BC195D39762D37972970875BED151FD16DB66EAC44750BF446065957
A38A0BE16DC852C192502CD1894762DC9429030BB5C861BB3C17DCA066CF> |-
/y <1C60D8A8C9B78256DE2BCB1218A6789D9FA9934C082273C19250A2CD1D74
BACC495259F751DCAB01B84238F26F449F2E1DB5BA427E64211AF924F7EF2626
272B6EF2F827F5BF8C645C3EFBEF3CC435ABDC5968A0AEC33713A100BA2F4B3C
9A1CB4F928F17AF7E8EF7A6A61BFBC1D67A8CD85F6E8A829763B6C0864ECE9F1
594C49D7272DC3A7BF46F96A09D15EC914807F6D637F8D3AA2895D41FCA44911
61E8A0> |-
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALB+NewCenturySchlbk-Roman /ELRBAA+NewCenturySchlbk-Roman findfont ct_VMDictPut
/FLXALB+NewCenturySchlbk-Roman*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight 4{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 6{/.notdef}rp 
/N /.notdef /P 5{/.notdef}rp /V 10{/.notdef}rp /a /b 
/c /d /e /.notdef /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
FLXALB+NewCenturySchlbk-Roman nf
FLXALB+NewCenturySchlbk-Roman*1 [9.81814 0 0 -9.80383 0 0 ]msf
17.5919 174.878 mo
(0.000)sh
17.5919 142.173 mo
(0.025)sh
17.5919 109.467 mo
(0.050)sh
17.5919 76.9963 mo
(0.075)sh
17.5919 44.2908 mo
(0.100)sh
17.5919 11.5853 mo
(0.125)sh
265.61 175.205 mo
(0)sh
265.61 143.441 mo
(20)
[5.45889 0 ]xsh
265.61 111.676 mo
(40)
[5.45889 0 ]xsh
265.61 79.9118 mo
(60)
[5.45889 0 ]xsh
265.61 48.1473 mo
(80)
[5.45889 0 ]xsh
265.465 16.3828 mo
(100)sh
FLXALB+NewCenturySchlbk-Roman*1 [0 -9.80394 -9.81828 0 0 0 ]msf
10.2579 122.626 mo
(\(1)
[-3.26465 0 ]ysh
%ADOBeginSubsetFont: AXNBAA+NewCenturySchlbk-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /AXNBAA+NewCenturySchlbk-Italic def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 69 /E put
dup 100 /d put
dup 116 /t put
def
/UniqueID 4027871 def
/FontBBox {-101 -202 973 737} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 455 475 722 742 689 709] def
/StdHW [39] def
/StdVW [86] def
/StemSnapH [39 48] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/slash <1C60D8A8C9B7DDB6883E46B848759A07FF263587EFC7288C34B69255
582936> |-
/zero <1C60D8A8C9B7EF32A0DEF8FA3CE82923C8B5D18151CE0538DC7EFADE3
FDAD0756E40EC6DEC6A81DAE5AA5A7A2B359677FF069A090A3B994E1A619C9C8
951C912FB6A57A5F3BA84DBCEBD560F0FBB89A59403E5297FF8DF265EA79F417
629E351F22F6B100157CCF653BB026124590F6AE9> |-
/E <1C60D8A8C9B6079F1E6C8D89B909109FD557AFD2E2D1E3893D7CA37CA594
830F5648F1316D5A13A206A783D79721ED97EB985FEB1738218FE3C2CB161190
5A079E28B153A7FEE198B8B01FB33175242160465760647655DFD4FD014C4875
0C5D59AC14113EB7BACF9A1EC1E8838EB147CC0050F31BDB81BE75FD38EC40BC
1EF6EB80D3B9038CA65D52FE012902BAA18A9194EC1D0AE17B948117E044731B
D456963C1826C232DB5E8AC90FE38E2E5C3B0C10BC6F2C1CEB9C9B695C1A1A7C
56757E7191D2A7FB99EF29AE38B0> |-
/d <1C60D8A8C9B7D8BE9D4592BD12E7923B167F264535888E1EB266B984C28A
AAA2D478034FB57BD3494F1B4B1451D8A268800C0F0FDBFA7645409EF0D2C01F
15A783E142D4F11FB32FDE88D279BA978A23E45B2FE4DB2108155D63CE5C2FA6
9E8D9FF59564092991EC844D049A0EDB70CAA1568803EE91F2BFCC0AC07A9BF3
B70D9D1F8B5AB84E167FA0FA5E6C612CE1BA36B7A0A98E891BE25EE889D77930
BCE09AB27E88E185338249BEFC13BA85B56C> |-
/t <1C60D8A8C9B80A3F0973D11D7C7F6C120DC3BDFEDF1444C8CDAC0CCA6BBB
53C15F5CE991B799B3B57196FC260E0F170CA405726B81FCFAB5C657F393F477
1557C846ECD54EB02274A2F6A35F4A159E13180C3F09742064777F44734BC908
755517AB603169088E> |-
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALC+NewCenturySchlbk-Italic /AXNBAA+NewCenturySchlbk-Italic findfont ct_VMDictPut
/FLXALC+NewCenturySchlbk-Italic*1 
[47{/.notdef}rp /slash /zero 20{/.notdef}rp /E 30{/.notdef}rp /d 15{/.notdef}rp 
/t 139{/.notdef}rp]
FLXALC+NewCenturySchlbk-Italic nf
FLXALC+NewCenturySchlbk-Italic*1 [0 -9.80394 -9.81828 0 0 0 ]msf
10.2579 113.91 mo
(/E)
[-5.94122 0 ]ysh
FLXALC+NewCenturySchlbk-Italic*1 [0 -8.02151 -8.03324 0 0 0 ]msf
12.9357 100.891 mo
(0)sh
FLXALB+NewCenturySchlbk-Roman*1 [0 -9.80394 -9.81828 0 0 0 ]msf
10.2579 96.4311 mo
(\))sh
FLXALC+NewCenturySchlbk-Italic*1 [0 -9.80394 -9.81828 0 0 0 ]msf
10.2579 91.6959 mo
(dE/dt)
[-5.99014 -7.07844 -5.94122 -5.99011 0 ]ysh
FLXALC+NewCenturySchlbk-Italic*1 [9.81814 0 0 -9.80383 0 0 ]msf
86.5089 194.675 mo
(t)sh
FLXALB+NewCenturySchlbk-Roman*1 [9.81814 0 0 -9.80383 0 0 ]msf
89.9648 194.675 mo
( = depth in radiation lengths)sh
FLXALB+NewCenturySchlbk-Roman*1 [0 -9.80384 -9.81818 0 0 0 ]msf
290.634 143.037 mo
(Number crossing plane)
[-7.99014 -5.99008 -8.71566 -5.45093 -4.90195 -4.35291 -2.72546 -4.35291 -4.35291 -4.90192 -4.53912 -4.53916 
-3.08823 -5.99008 -5.26468 -2.72546 -5.62747 -3.08823 -5.45093 -5.99008 0 ]ysh
FLXALB+NewCenturySchlbk-Roman*1 [9.81814 0 0 -9.80383 0 0 ]msf
163.449 34.1861 mo
(30 GeV electron!)sh
163.449 44.9408 mo
(incident on iron)sh
114.074 95.1951 mo
(Energy)sh
115.792 124.401 mo
(Photons!)sh
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Symbol def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 180 /multiply put
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/multiply <1C60D8A8C9B796769F70073F086034A26639D256501FFCAE0720C
160B989F6DDD9A0DF72077B7118CE332791F81A6F7619BD5DAE9A50E83B91F59
E7F3D786E4C96D01DD38D65> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALD+Symbol /Symbol findfont ct_VMDictPut
/FLXALD+Symbol*1 
[180{/.notdef}rp /multiply 75{/.notdef}rp]
FLXALD+Symbol nf
FLXALD+Symbol*1 [9.81814 0 0 -9.80383 0 0 ]msf
115.792 135.156 mo
(\264)sh
FLXALB+NewCenturySchlbk-Roman*1 [9.81814 0 0 -9.80383 0 0 ]msf
121.182 135.156 mo
( 1)
[2.72943 0 ]xsh
FLXALC+NewCenturySchlbk-Italic*1 [9.81814 0 0 -9.80383 0 0 ]msf
129.37 135.156 mo
(/)sh
FLXALB+NewCenturySchlbk-Roman*1 [9.81814 0 0 -9.80383 0 0 ]msf
135.32 135.156 mo
(6.8)sh
109.665 152.381 mo
(Electrons)sh
46.2886 171.44 mo
46.2886 169.793 li
51.4724 169.793 li
51.4724 166.733 li
56.8924 166.733 li
56.8924 159.205 li
62.3113 159.205 li
62.3113 148.852 li
67.4951 148.852 li
67.4951 134.734 li
72.9151 134.734 li
72.9151 117.323 li
78.335 117.323 li
78.335 97.7929 li
83.5188 97.7929 li
83.5188 79.4404 li
88.9387 79.4404 li
88.9387 60.6171 li
94.3587 60.6171 li
94.3587 46.7353 li
99.5424 46.7353 li
99.5424 34.7351 li
104.961 34.7351 li
104.961 27.911 li
110.381 27.911 li
110.381 24.8523 li
115.565 24.8523 li
115.565 26.7349 li
120.985 26.7349 li
120.985 26.2643 li
126.405 26.2643 li
126.405 31.6763 li
131.589 31.6763 li
131.589 38.5003 li
137.008 38.5003 li
137.008 49.3234 li
142.428 49.3234 li
142.428 60.6171 li
147.612 60.6171 li
147.612 67.676 li
153.031 67.676 li
153.031 77.3229 li
158.215 77.3229 li
158.215 87.9112 li
163.635 87.9112 li
163.635 96.1461 li
169.055 96.1461 li
169.055 103.441 li
174.239 103.441 li
174.239 111.205 li
179.658 111.205 li
179.658 118.499 li
185.078 118.499 li
185.078 125.558 li
190.262 125.558 li
190.262 130.97 li
195.682 130.97 li
195.682 136.617 li
201.102 136.617 li
201.102 141.793 li
206.285 141.793 li
206.285 146.263 li
211.705 146.263 li
211.705 150.028 li
217.124 150.028 li
217.124 152.852 li
222.309 152.852 li
222.309 155.205 li
227.728 155.205 li
227.728 157.793 li
233.148 157.793 li
233.148 159.205 li
238.332 159.205 li
238.332 161.322 li
243.752 161.322 li
243.752 163.204 li
249.171 163.204 li
249.171 163.676 li
254.355 163.676 li
254.355 165.557 li
259.774 165.557 li
259.774 171.44 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
48.8805 171.204 mo
50.7659 171.204 li
52.6503 170.499 li
54.3005 169.323 li
56.421 167.44 li
58.0702 165.087 li
59.4842 162.733 li
61.6048 158.969 li
63.4902 154.734 li
64.9032 150.734 li
66.7886 145.322 li
68.674 139.675 li
70.3232 134.028 li
71.9724 127.675 li
73.8577 121.323 li
75.5069 114.734 li
77.3923 108.146 li
79.0415 101.558 li
80.9269 94.7342 li
82.5761 88.3818 li
84.4615 82.0284 li
86.3468 75.6751 li
87.996 70.2641 li
89.6452 64.6172 li
91.5306 58.9703 li
93.1798 54.4996 li
95.0652 50.0289 li
96.9506 45.5581 li
98.5998 42.0287 li
100.249 38.7351 li
102.37 35.6764 li
103.784 33.3231 li
105.669 31.2056 li
107.553 29.323 li
109.204 28.1469 li
111.088 26.9707 li
112.973 26.5001 li
114.859 26.2643 li
116.508 26.5001 li
118.393 26.7349 li
120.279 27.6762 li
121.928 28.6175 li
123.577 29.7937 li
125.462 31.4405 li
127.348 33.3231 li
128.997 34.9698 li
130.881 37.3232 li
132.532 39.6764 li
134.417 42.0287 li
136.066 44.6178 li
137.95 47.2049 li
139.601 50.0289 li
141.485 52.8528 li
143.135 55.6757 li
145.02 58.7345 li
146.669 61.7932 li
148.554 64.853 li
150.44 67.9108 li
152.089 70.9705 li
153.974 74.0283 li
155.623 77.0881 li
157.509 80.1458 li
159.158 83.2056 li
161.043 86.2644 li
162.693 89.3231 li
164.578 92.1461 li
166.227 95.2048 li
168.112 98.0287 li
169.762 100.617 li
171.647 103.441 li
173.532 106.028 li
175.182 108.617 li
177.066 111.205 li
178.716 113.793 li
180.601 116.145 li
182.251 118.499 li
184.135 120.852 li
185.784 122.97 li
187.67 125.087 li
189.32 127.205 li
191.204 129.087 li
193.09 130.97 li
194.739 132.852 li
196.624 134.734 li
198.273 136.381 li
200.159 138.028 li
201.808 139.675 li
203.693 141.087 li
205.343 142.734 li
207.228 143.91 li
209.112 145.322 li
210.763 146.734 li
212.648 147.91 li
214.297 149.087 li
216.182 150.264 li
217.832 151.205 li
219.716 152.381 li
221.366 153.322 li
223.251 154.264 li
225.136 155.205 li
226.785 155.91 li
228.671 156.852 li
230.32 157.557 li
232.205 158.264 li
233.854 158.969 li
235.74 159.676 li
237.389 160.381 li
239.274 160.852 li
241.16 161.557 li
242.809 162.028 li
244.694 162.499 li
246.344 163.204 li
248.229 163.44 li
249.878 163.911 li
251.764 164.381 li
253.413 164.852 li
255.297 165.087 li
257.182 165.557 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
FLXALB+NewCenturySchlbk-Roman*1 [9.66105 0 0 -9.64697 0 0 ]msf
44.1879 182.022 mo
(05101520)
[53.2537 50.1901 5.37155 48.1176 5.37152 47.8821 5.37152 0 ]xsh
92.8026 79.9599 mo
111.571 90.5222 li
5.8866 lw
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
95.3659 83.5851 mo
89.9039 77.9781 li
99.7669 80.9991 li
95.9989 81.7211 li
95.3659 83.5851 li
f
155.904 149.288 mo
180.565 134.805 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
175.683 135.098 mo
183.277 133.179 li
175.725 140.198 li
176.983 136.578 li
175.683 135.098 li
f
94.5208 108.145 mo
113.289 118.708 li
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
97.084 111.771 mo
91.6219 106.164 li
101.485 109.185 li
97.7169 109.907 li
97.084 111.771 li
f
44.8749 172.616 mo
47.7027 172.616 li
47.7027 169.793 li
44.8749 169.793 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
44.8746 172.616 mo
47.7016 172.616 li
47.7016 169.793 li
44.8746 169.793 li
44.8746 172.616 li
1 /0 /CSD get_res sepcs
1 sep
4.9055 lw
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
50.2949 170.969 mo
52.8867 170.969 li
52.8867 168.146 li
50.2949 168.146 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
50.2946 170.969 mo
52.8864 170.969 li
52.8864 168.145 li
50.2946 168.145 li
50.2946 170.969 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
55.4789 168.381 mo
58.3063 168.381 li
58.3063 165.558 li
55.4789 165.558 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
55.4783 168.38 mo
58.3054 168.38 li
58.3054 165.557 li
55.4783 165.557 li
55.4783 168.38 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
60.8979 163.44 mo
63.7257 163.44 li
63.7257 160.617 li
60.8979 160.617 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
60.8983 163.44 mo
63.7253 163.44 li
63.7253 160.616 li
60.8983 160.616 li
60.8983 163.44 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
66.082 156.381 mo
68.9097 156.381 li
68.9097 153.558 li
66.082 153.558 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
66.0821 156.381 mo
68.9091 156.381 li
68.9091 153.558 li
66.0821 153.558 li
66.0821 156.381 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
71.5019 146.499 mo
74.3297 146.499 li
74.3297 143.911 li
71.5019 143.911 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
71.501 146.498 mo
74.3291 146.498 li
74.3291 143.91 li
71.501 143.91 li
71.501 146.498 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
76.9219 134.499 mo
79.7493 134.499 li
79.7493 131.676 li
76.9219 131.676 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
76.921 134.499 mo
79.749 134.499 li
79.749 131.675 li
76.921 131.675 li
76.921 134.499 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
82.1059 120.852 mo
84.9333 120.852 li
84.9333 118.264 li
82.1059 118.264 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
82.1047 120.852 mo
84.9328 120.852 li
84.9328 118.264 li
82.1047 118.264 li
82.1047 120.852 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
87.5249 106.734 mo
90.3527 106.734 li
90.3527 103.911 li
87.5249 103.911 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
87.5247 106.734 mo
90.3528 106.734 li
90.3528 103.91 li
87.5247 103.91 li
87.5247 106.734 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
92.9449 91.9111 mo
95.7727 91.9111 li
95.7727 89.0873 li
92.9449 89.0873 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
92.9446 91.9112 mo
95.7717 91.9112 li
95.7717 89.0873 li
92.9446 89.0873 li
92.9446 91.9112 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
98.1289 78.0291 mo
100.957 78.0291 li
100.957 75.2056 li
98.1289 75.2056 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
98.1284 78.0284 mo
100.956 78.0284 li
100.956 75.2055 li
98.1284 75.2055 li
98.1284 78.0284 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
103.548 65.7941 mo
106.376 65.7941 li
106.376 62.9707 li
103.548 62.9707 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
103.547 65.7933 mo
106.375 65.7933 li
106.375 62.9704 li
103.547 62.9704 li
103.547 65.7933 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
108.968 56.6171 mo
111.796 56.6171 li
111.796 53.7937 li
108.968 53.7937 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
108.967 56.6171 mo
111.795 56.6171 li
111.795 53.7931 li
108.967 53.7931 li
108.967 56.6171 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
114.152 50.4991 mo
116.98 50.4991 li
116.98 47.6757 li
114.152 47.6757 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
114.152 50.4995 mo
116.979 50.4995 li
116.979 47.6756 li
114.152 47.6756 li
114.152 50.4995 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
119.572 46.7351 mo
122.4 46.7351 li
122.4 43.9117 li
119.572 43.9117 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
119.571 46.7353 mo
122.399 46.7353 li
122.399 43.9113 li
119.571 43.9113 li
119.571 46.7353 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
124.991 44.8531 mo
127.819 44.8531 li
127.819 42.0297 li
124.991 42.0297 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
124.991 44.8527 mo
127.818 44.8527 li
127.818 42.0287 li
124.991 42.0287 li
124.991 44.8527 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
130.175 44.8531 mo
133.003 44.8531 li
133.003 42.0297 li
130.175 42.0297 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
130.175 44.8527 mo
133.003 44.8527 li
133.003 42.0287 li
130.175 42.0287 li
130.175 44.8527 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
135.595 47.2051 mo
138.422 47.2051 li
138.422 44.3817 li
135.595 44.3817 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
135.595 47.2049 mo
138.422 47.2049 li
138.422 44.382 li
135.595 44.382 li
135.595 47.2049 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
141.015 51.4411 mo
143.843 51.4411 li
143.843 48.6176 li
141.015 48.6176 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
141.014 51.4408 mo
143.842 51.4408 li
143.842 48.6169 li
141.014 48.6169 li
141.014 51.4408 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
146.199 57.5581 mo
149.027 57.5581 li
149.027 54.7346 li
146.199 54.7346 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
146.198 57.5583 mo
149.026 57.5583 li
149.026 54.7354 li
146.198 54.7354 li
146.198 57.5583 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
151.618 64.3821 mo
154.446 64.3821 li
154.446 61.5587 li
151.618 61.5587 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
151.617 64.3813 mo
154.446 64.3813 li
154.446 61.5584 li
151.617 61.5584 li
151.617 64.3813 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
157.038 71.6761 mo
159.63 71.6761 li
159.63 68.8523 li
157.038 68.8523 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
157.037 71.676 mo
159.629 71.676 li
159.629 68.8521 li
157.037 68.8521 li
157.037 71.676 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
162.222 79.9111 mo
165.049 79.9111 li
165.049 77.0877 li
162.222 77.0877 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
162.221 79.911 mo
165.049 79.911 li
165.049 77.0881 li
162.221 77.0881 li
162.221 79.911 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
167.642 87.6761 mo
170.47 87.6761 li
170.47 84.8527 li
167.642 84.8527 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
167.641 87.6753 mo
170.469 87.6753 li
170.469 84.8524 li
167.641 84.8524 li
167.641 87.6753 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
172.826 95.4401 mo
175.654 95.4401 li
175.654 92.6167 li
172.826 92.6167 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
172.825 95.4407 mo
175.653 95.4407 li
175.653 92.6167 li
172.825 92.6167 li
172.825 95.4407 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
178.245 102.734 mo
181.073 102.734 li
181.073 99.9107 li
178.245 99.9107 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
178.245 102.734 mo
181.072 102.734 li
181.072 99.9104 li
178.245 99.9104 li
178.245 102.734 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
183.665 109.322 mo
186.493 109.322 li
186.493 106.499 li
183.665 106.499 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
183.664 109.323 mo
186.492 109.323 li
186.492 106.499 li
183.664 106.499 li
183.664 109.323 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
188.849 116.146 mo
191.677 116.146 li
191.677 113.323 li
188.849 113.323 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
188.848 116.145 mo
191.676 116.145 li
191.676 113.323 li
188.848 113.323 li
188.848 116.145 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
194.268 122.264 mo
197.095 122.264 li
197.095 119.441 li
194.268 119.441 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
194.268 122.263 mo
197.096 122.263 li
197.096 119.44 li
194.268 119.44 li
194.268 122.263 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
199.688 127.911 mo
202.516 127.911 li
202.516 125.088 li
199.688 125.088 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
199.688 127.911 mo
202.516 127.911 li
202.516 125.087 li
199.688 125.087 li
199.688 127.911 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
204.872 133.087 mo
207.7 133.087 li
207.7 130.264 li
204.872 130.264 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
204.871 133.087 mo
207.699 133.087 li
207.699 130.263 li
204.871 130.263 li
204.871 133.087 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
210.292 137.793 mo
213.12 137.793 li
213.12 134.97 li
210.292 134.97 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
210.291 137.793 mo
213.118 137.793 li
213.118 134.97 li
210.291 134.97 li
210.291 137.793 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
215.711 142.264 mo
218.538 142.264 li
218.538 139.441 li
215.711 139.441 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
215.711 142.263 mo
218.538 142.263 li
218.538 139.44 li
215.711 139.44 li
215.711 142.263 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
220.895 146.264 mo
223.722 146.264 li
223.722 143.441 li
220.895 143.441 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
220.895 146.263 mo
223.722 146.263 li
223.722 143.441 li
220.895 143.441 li
220.895 146.263 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
226.315 149.558 mo
229.143 149.558 li
229.143 146.97 li
226.315 146.97 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
226.314 149.558 mo
229.142 149.558 li
229.142 146.969 li
226.314 146.969 li
226.314 149.558 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
231.734 152.852 mo
234.562 152.852 li
234.562 150.028 li
231.734 150.028 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
231.734 152.852 mo
234.562 152.852 li
234.562 150.028 li
231.734 150.028 li
231.734 152.852 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
236.918 155.675 mo
239.746 155.675 li
239.746 152.852 li
236.918 152.852 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
236.918 155.676 mo
239.746 155.676 li
239.746 152.852 li
236.918 152.852 li
236.918 155.676 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
242.338 157.793 mo
245.166 157.793 li
245.166 154.97 li
242.338 154.97 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
242.338 157.793 mo
245.165 157.793 li
245.165 154.969 li
242.338 154.969 li
242.338 157.793 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
247.758 159.91 mo
250.585 159.91 li
250.585 157.087 li
247.758 157.087 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
247.758 159.91 mo
250.585 159.91 li
250.585 157.087 li
247.758 157.087 li
247.758 159.91 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
252.942 161.793 mo
255.769 161.793 li
255.769 159.205 li
252.942 159.205 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
252.941 161.793 mo
255.768 161.793 li
255.768 159.205 li
252.941 159.205 li
252.941 161.793 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
258.361 163.44 mo
261.189 163.44 li
261.189 160.617 li
258.361 160.617 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
258.361 163.44 mo
261.188 163.44 li
261.188 160.616 li
258.361 160.616 li
258.361 163.44 li
1 /0 /CSD get_res sepcs
1 sep
gsave
[.100073 0 0 -.0999269 -176.728 529.526 ]ct
@
grestore newpath
46.4059 171.436 mo
47.2689 171.436 47.9679 170.737 47.9679 169.876 cv
47.9679 169.015 47.2689 168.316 46.4059 168.316 cv
45.5439 168.316 44.8449 169.015 44.8449 169.876 cv
44.8449 170.737 45.5439 171.436 46.4059 171.436 cv
f
51.5609 169.23 mo
52.4239 169.23 53.1229 168.531 53.1229 167.67 cv
53.1229 166.809 52.4239 166.11 51.5609 166.11 cv
50.6989 166.11 49.9989 166.809 49.9989 167.67 cv
49.9989 168.531 50.6989 169.23 51.5609 169.23 cv
f
56.9609 162.122 mo
57.8239 162.122 58.5229 161.424 58.5229 160.562 cv
58.5229 159.701 57.8239 159.003 56.9609 159.003 cv
56.0989 159.003 55.3989 159.701 55.3989 160.562 cv
55.3989 161.424 56.0989 162.122 56.9609 162.122 cv
f
62.3609 151.093 mo
63.2239 151.093 63.9229 150.394 63.9229 149.533 cv
63.9229 148.672 63.2239 147.973 62.3609 147.973 cv
61.4989 147.973 60.7989 148.672 60.7989 149.533 cv
60.7989 150.394 61.4989 151.093 62.3609 151.093 cv
f
67.6379 135.774 mo
68.5009 135.774 69.2009 135.076 69.2009 134.215 cv
69.2009 133.353 68.5009 132.655 67.6379 132.655 cv
66.7759 132.655 66.0759 133.353 66.0759 134.215 cv
66.0759 135.076 66.7759 135.774 67.6379 135.774 cv
f
72.9159 118.985 mo
73.7779 118.985 74.478 118.287 74.478 117.426 cv
74.478 116.564 73.7779 115.865 72.9159 115.865 cv
72.0529 115.865 71.3539 116.564 71.3539 117.426 cv
71.3539 118.287 72.0529 118.985 72.9159 118.985 cv
f
185.088 133.201 mo
185.951 133.201 186.651 132.503 186.651 131.641 cv
186.651 130.78 185.951 130.081 185.088 130.081 cv
184.226 130.081 183.526 130.78 183.526 131.641 cv
183.526 132.503 184.226 133.201 185.088 133.201 cv
f
190.611 138.96 mo
191.474 138.96 192.173 138.262 192.173 137.401 cv
192.173 136.539 191.474 135.841 190.611 135.841 cv
189.749 135.841 189.049 136.539 189.049 137.401 cv
189.049 138.262 189.749 138.96 190.611 138.96 cv
f
195.766 142.76 mo
196.628 142.76 197.328 142.061 197.328 141.2 cv
197.328 140.338 196.628 139.64 195.766 139.64 cv
194.903 139.64 194.204 140.338 194.204 141.2 cv
194.204 142.061 194.903 142.76 195.766 142.76 cv
f
179.811 125.848 mo
180.674 125.848 181.373 125.149 181.373 124.288 cv
181.373 123.427 180.674 122.728 179.811 122.728 cv
178.949 122.728 178.249 123.427 178.249 124.288 cv
178.249 125.149 178.949 125.848 179.811 125.848 cv
f
174.411 120.088 mo
175.274 120.088 175.973 119.39 175.973 118.528 cv
175.973 117.667 175.274 116.969 174.411 116.969 cv
173.549 116.969 172.849 117.667 172.849 118.528 cv
172.849 119.39 173.549 120.088 174.411 120.088 cv
f
169.134 113.348 mo
169.997 113.348 170.696 112.65 170.696 111.788 cv
170.696 110.927 169.997 110.228 169.134 110.228 cv
168.271 110.228 167.572 110.927 167.572 111.788 cv
167.572 112.65 168.271 113.348 169.134 113.348 cv
f
163.611 104.647 mo
164.474 104.647 165.173 103.949 165.173 103.087 cv
165.173 102.226 164.474 101.528 163.611 101.528 cv
162.749 101.528 162.049 102.226 162.049 103.087 cv
162.049 103.949 162.749 104.647 163.611 104.647 cv
f
158.456 99.7451 mo
159.319 99.7451 160.018 99.0471 160.018 98.1851 cv
160.018 97.3241 159.319 96.6261 158.456 96.6261 cv
157.594 96.6261 156.895 97.3241 156.895 98.1851 cv
156.895 99.0471 157.594 99.7451 158.456 99.7451 cv
f
153.179 87.2451 mo
154.042 87.2451 154.742 86.5471 154.742 85.6851 cv
154.742 84.8241 154.042 84.1261 153.179 84.1261 cv
152.317 84.1261 151.617 84.8241 151.617 85.6851 cv
151.617 86.5471 152.317 87.2451 153.179 87.2451 cv
f
147.656 79.2801 mo
148.519 79.2801 149.218 78.5811 149.218 77.7201 cv
149.218 76.8581 148.519 76.1601 147.656 76.1601 cv
146.794 76.1601 146.095 76.8581 146.095 77.7201 cv
146.095 78.5811 146.794 79.2801 147.656 79.2801 cv
f
142.379 70.2111 mo
143.242 70.2111 143.942 69.5131 143.942 68.6511 cv
143.942 67.7901 143.242 67.0921 142.379 67.0921 cv
141.517 67.0921 140.817 67.7901 140.817 68.6511 cv
140.817 69.5131 141.517 70.2111 142.379 70.2111 cv
f
88.9929 59.9171 mo
89.8559 59.9171 90.5549 59.2191 90.5549 58.3571 cv
90.5549 57.4961 89.8559 56.7971 88.9929 56.7971 cv
88.1299 56.7971 87.4309 57.4961 87.4309 58.3571 cv
87.4309 59.2191 88.1299 59.9171 88.9929 59.9171 cv
f
137.102 57.3441 mo
137.965 57.3441 138.664 56.6451 138.664 55.7841 cv
138.664 54.9221 137.965 54.2241 137.102 54.2241 cv
136.239 54.2241 135.54 54.9221 135.54 55.7841 cv
135.54 56.6451 136.239 57.3441 137.102 57.3441 cv
f
78.4379 97.1721 mo
79.3009 97.1721 80.0009 96.4731 80.0009 95.6121 cv
80.0009 94.7511 79.3009 94.0521 78.4379 94.0521 cv
77.5759 94.0521 76.8759 94.7511 76.8759 95.6121 cv
76.8759 96.4731 77.5759 97.1721 78.4379 97.1721 cv
f
83.9609 79.2801 mo
84.8239 79.2801 85.5229 78.5811 85.5229 77.7201 cv
85.5229 76.8581 84.8239 76.1601 83.9609 76.1601 cv
83.0989 76.1601 82.3989 76.8581 82.3989 77.7201 cv
82.3989 78.5811 83.0989 79.2801 83.9609 79.2801 cv
f
94.2699 44.7211 mo
95.1329 44.7211 95.8319 44.0231 95.8319 43.1621 cv
95.8319 42.3001 95.1329 41.6021 94.2699 41.6021 cv
93.4079 41.6021 92.7079 42.3001 92.7079 43.1621 cv
92.7079 44.0231 93.4079 44.7211 94.2699 44.7211 cv
f
99.7929 31.9761 mo
100.656 31.9761 101.355 31.2781 101.355 30.4161 cv
101.355 29.5551 100.656 28.8561 99.7929 28.8561 cv
98.9299 28.8561 98.2309 29.5551 98.2309 30.4161 cv
98.2309 31.2781 98.9299 31.9761 99.7929 31.9761 cv
f
121.147 31.7311 mo
122.01 31.7311 122.71 31.0331 122.71 30.1711 cv
122.71 29.3101 122.01 28.6121 121.147 28.6121 cv
120.285 28.6121 119.585 29.3101 119.585 30.1711 cv
119.585 31.0331 120.285 31.7311 121.147 31.7311 cv
f
126.425 35.7751 mo
127.288 35.7751 127.987 35.0771 127.987 34.2151 cv
127.987 33.3541 127.288 32.6561 126.425 32.6561 cv
125.562 32.6561 124.863 33.3541 124.863 34.2151 cv
124.863 35.0771 125.562 35.7751 126.425 35.7751 cv
f
131.579 43.8641 mo
132.442 43.8641 133.142 43.1651 133.142 42.3041 cv
133.142 41.4421 132.442 40.7441 131.579 40.7441 cv
130.717 40.7441 130.017 41.4421 130.017 42.3041 cv
130.017 43.1651 130.717 43.8641 131.579 43.8641 cv
f
115.747 27.9321 mo
116.61 27.9321 117.31 27.2341 117.31 26.3721 cv
117.31 25.5111 116.61 24.8131 115.747 24.8131 cv
114.885 24.8131 114.185 25.5111 114.185 26.3721 cv
114.185 27.2341 114.885 27.9321 115.747 27.9321 cv
f
110.347 24.5011 mo
111.21 24.5011 111.91 23.8031 111.91 22.9411 cv
111.91 22.0801 111.21 21.3811 110.347 21.3811 cv
109.485 21.3811 108.785 22.0801 108.785 22.9411 cv
108.785 23.8031 109.485 24.5011 110.347 24.5011 cv
f
105.07 26.0941 mo
105.933 26.0941 106.632 25.3961 106.632 24.5341 cv
106.632 23.6721 105.933 22.9741 105.07 22.9741 cv
104.208 22.9741 103.508 23.6721 103.508 24.5341 cv
103.508 25.3961 104.208 26.0941 105.07 26.0941 cv
f
201.043 149.377 mo
201.906 149.377 202.605 148.679 202.605 147.817 cv
202.605 146.956 201.906 146.258 201.043 146.258 cv
200.18 146.258 199.481 146.956 199.481 147.817 cv
199.481 148.679 200.18 149.377 201.043 149.377 cv
f
206.443 151.46 mo
207.306 151.46 208.005 150.762 208.005 149.901 cv
208.005 149.039 207.306 148.341 206.443 148.341 cv
205.58 148.341 204.881 149.039 204.881 149.901 cv
204.881 150.762 205.58 151.46 206.443 151.46 cv
f
211.843 156.24 mo
212.706 156.24 213.405 155.542 213.405 154.68 cv
213.405 153.819 212.706 153.12 211.843 153.12 cv
210.98 153.12 210.281 153.819 210.281 154.68 cv
210.281 155.542 210.98 156.24 211.843 156.24 cv
f
217.12 158.568 mo
217.983 158.568 218.682 157.87 218.682 157.008 cv
218.682 156.147 217.983 155.449 217.12 155.449 cv
216.258 155.449 215.558 156.147 215.558 157.008 cv
215.558 157.87 216.258 158.568 217.12 158.568 cv
f
222.52 160.774 mo
223.383 160.774 224.082 160.076 224.082 159.214 cv
224.082 158.353 223.383 157.655 222.52 157.655 cv
221.658 157.655 220.958 158.353 220.958 159.214 cv
220.958 160.076 221.658 160.774 222.52 160.774 cv
f
227.797 162.735 mo
228.66 162.735 229.36 162.037 229.36 161.175 cv
229.36 160.314 228.66 159.615 227.797 159.615 cv
226.935 159.615 226.235 160.314 226.235 161.175 cv
226.235 162.037 226.935 162.735 227.797 162.735 cv
f
233.075 163.96 mo
233.938 163.96 234.637 163.262 234.637 162.401 cv
234.637 161.539 233.938 160.841 233.075 160.841 cv
232.212 160.841 231.513 161.539 231.513 162.401 cv
231.513 163.262 232.212 163.96 233.075 163.96 cv
f
238.352 164.451 mo
239.215 164.451 239.914 163.752 239.914 162.891 cv
239.914 162.029 239.215 161.331 238.352 161.331 cv
237.489 161.331 236.79 162.029 236.79 162.891 cv
236.79 163.752 237.489 164.451 238.352 164.451 cv
f
243.875 166.656 mo
244.738 166.656 245.437 165.958 245.437 165.097 cv
245.437 164.235 244.738 163.537 243.875 163.537 cv
243.012 163.537 242.313 164.235 242.313 165.097 cv
242.313 165.958 243.012 166.656 243.875 166.656 cv
f
249.152 168.005 mo
250.015 168.005 250.714 167.306 250.714 166.445 cv
250.714 165.583 250.015 164.885 249.152 164.885 cv
248.289 164.885 247.59 165.583 247.59 166.445 cv
247.59 167.306 248.289 168.005 249.152 168.005 cv
f
254.429 168.617 mo
255.292 168.617 255.992 167.919 255.992 167.057 cv
255.992 166.196 255.292 165.497 254.429 165.497 cv
253.567 165.497 252.867 166.196 252.867 167.057 cv
252.867 167.919 253.567 168.617 254.429 168.617 cv
f
259.829 169.475 mo
260.692 169.475 261.392 168.777 261.392 167.915 cv
261.392 167.054 260.692 166.355 259.829 166.355 cv
258.967 166.355 258.267 167.054 258.267 167.915 cv
258.267 168.777 258.967 169.475 259.829 169.475 cv
f
%ADOBeginSubsetFont: YEKBAA+CMBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YEKBAA+CMBX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 70 /F put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 114 /r put
dup 117 /u put
def
/FontBBox {0 -201 1051 700} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 686 697 444 453 655 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [47] def
/StdVW [114] def
/StemSnapH [40 47] def
/StemSnapV [114 142] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/period <1C60D8A8C9B08A9560D4C2F3A74D92838E83B7DC14B89478B799496
0CFDC6D2144A34A20CA36052335682902BE7739DD> |-
/zero <1C60D8A8C9B7FCB6A4F5AE229546C202C5032D8F8EB44882D629B5F50
C400D4D7370FFBFDEE1A7A80D601B7D96A84E71663306395E49353C98889DE37
8DE26DF76984DC1BCB2DE501879767AC3F7E6A6BF4D63C61476EA4E158042F97
224D611A916B12EC87A0E1E7D1A31A3A91928658851BD6EEA872263A3> |-
/two <1C60D8A8C9B7FCB6AFCECEBCE3C644D61BF80000A7C384C11F8205E5F4
EA22B1F87E7A5F44BD17A6CF109FE3AE9F709DB8358F13296E50DD9E329B12B6
2BE9C6512386E96E53EC60D92469DE71E7B48CB1868A87C7273B968AB345F370
A417DA2B11E60D38F3166D980E52D10C3DB1EB074C4E9FB27FFFD375F4B1AFB8
A82D569603EAE115AA23BDBA> |-
/three <1C60D8A8C9B7FCB6A4EC6CFF5B7E8A646CFA99E79027FA1E27F1D442
DE8AB71A39759F5525E707D743CC0FEAB4033857D7F0B4C7A6F8FBFB5A935099
B429C99C13203178EEA9B1073B247ECB796B06FE996B3D05FBD6A7E0F21BE1EA
DC781E6E7F5E6ABC5A7404FA09CF5B65949D8D09BFC8DE32902F3BAC8BD07286
D74960DD2AB72945FAF8256AADFA01A34A0D1646636F1A5CD2616092FFCCA26E
BF6D5C28875F2B3DBAFD204CC9431C3EAEB60A528610CD3C52A0484A51A3990E
2EE8A4670066476DEAB7B4E111D8989AC76A29> |-
/colon <1C60D8A8C9B08A9560D4C2F3A74D92838E839CD10B5F2E89DEFFDE1A
C7B613A4FD845CCA9FC62F87825C132DFC991C37EE277DB4A45132955C172F95
186C5797B64B0868EC1CADE0DAFD3719564A> |-
/F <1C60D8A8C9B08A9500F7EB6A988AF7A2C8FBCF0B49197E6A3FC29F9710B3
349C15FB7441BF2E67FC3D25734B99D28CFF8B7FD860513FE9849FEF33F8AF77
259FFCE8D33935AFA6296ED6A4A3A81309696BE340A66C6250D5E85DEDD83E9D
502C3BF709CC82FEC26BC74D6C9DB44EE6E0A3F2527A817492EDE144> |-
/e <1C60D8A8C9B08A95D1DE8AA71D3914AC9DDC5BFDDE55301EE17DAE184B08
E53C36FBF9A44FDF3309DBE08895DBFECCF103737D7326528346FD01CD1D9FC3
874638E8C50ADE3B494897353EB3188B512405DD1BA5DA59E8C179230F7C8D15
AFCEA2228DAC03C77D614B36A41126CE831B41CDF160A67B175BB36C52353A72
5460F4256C> |-
/g <1C60D8A8C9B7FCB6DFB00D66717576F7B799683D0F5985C2246017DDC428
352C02EA59B62BD175A5C1AEE9FFA12F15BA4161F01FE8694270C56D17F21CBD
B64DA822FA21CEFD4517B854A2279161A8F41C47F6A56223D32DE25F5E52A145
523392C61B5AA8CE6619D515DA7BEA118DB74C0CDAFC9B42271C138086AD4AF8
6E128215E239A8F23CB86490189FD57296C000CC97B906523F983B72A12C7CDB
4BDD169A2DC6443C0A27795759747910583C3EACAA83288E17AFD04205739782
6822E42F2626AAF47EA87B71144518319B78D5C78FCDB5E5EBDB361EE0D79EFE
F2DB02CAE6013851BBF48FAB27ECC8CB96A410FF9BAE7AAAC169BA1532EB5D46
A6FE4F9B1C6921AED89A02C684> |-
/i <1C60D8A8C9B08A9560D4C2F3A74D92CE39CCD31B31259F7AEFD031A58831
B571C841E0136D10024EE2DD1AD2E3360D2309F9F321AD6D54682C9AA0537A81
01D580386AD2DCA0A7052F8B37637F4FD33680FADEDC669BC7E5D9EBF1E1DD4C
25DB61CF6B56B045016A365FD6FAFA0816F527A8AB8877> |-
/r <1C60D8A8C9B08A95A5BEE1199161ADD44E11DF3EE5256B86CB844423336D
E46331FBB74D12BB9F1AEFB0A2D71E0DF1B1DC77B76B07C229AACC6761DB2E5D
20458478ACD0A771C83355B8FC81A73D829FB4F43E6F698652C8F5D32976536B
BF9A5F05ED7F73E5DF2B81BA043D0A8270F63D03627E6ED4C69187B17F057818
B58504577A> |-
/u <1C60D8A8C9B08A95E5CBCB515510AF055BEAA5A885DDAB81EBFFFCE14329
4E1BBFD5670B8388C50AC1CAB0C81124E37F366F454C400F382B92CCAF7F4525
99ADD355F754F39DD40E715E763BF3CAF9D37080D3EFFC3F0635D04D45C4121C
5E910B7FA9B692888395C347C99C7D24FA37D1D1FE460550A781D9E9186E41> |-
/.notdef <1C60D8A8C9B08A95899606B6B060A7> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALE+CMBX10 /YEKBAA+CMBX10 findfont ct_VMDictPut
/FLXALE+CMBX10*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /three 6{/.notdef}rp 
/colon 11{/.notdef}rp /F 30{/.notdef}rp /e /.notdef /g /.notdef 
/i 8{/.notdef}rp /r 2{/.notdef}rp /u 138{/.notdef}rp]
FLXALE+CMBX10 nf
FLXALE+CMBX10*1 [11.9552 0 0 -11.9552 0 0 ]msf
-73.0481 214.166 mo
(Figure32.20:)
[8.64478 3.83474 6.83998 7.68147 5.64471 10.559 6.83998 6.83998 3.83475 6.83998 6.84 0 
]xsh
%ADOBeginSubsetFont: GFNBAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
FLXAKX+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quotedblright <1C60D8A8C9B7A73DB6A586101AFC0BF178782BB237688374
70E0907A1945F095B30A45FFC68E12E9790383455FA55D95CD33DFB2DC630B04
EBD552C571E6E7284EC246D1E1385E5022F1FFA3D2FA7491DBBF5045A3931A0C
30E9EA4528804489547F4D11ED067281A2C66FAF2DB8AE6ACB6627056EDE385E
F1F13516924B5D63EDB291C6CF39647863CDAEDF91C3CCD44DA1D00E9A2C773C
03> |-
/quoteright <1C60D8A8C9B08A957081098167591BEF4B3A9D4F19CA1434DE7
FAD749B25F3083564DA07E11BCDD9EEDD273B86641C0682199379CDB86FD7EDE
921BFD1FED9D31D3E59D64AFBAC1D093714C274C0953106FABD06A18FFC1D99C
0EE15> |-
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065F9D4190A646C
4B6AEC0EE9FA16CBD7A614FBA5C7797971DF7C6EA57394603F00B98324AF84E1
D747CBDA8BF6ACE99B270F3634D0598A7799230B2FA53F37697C8FB04996EB79
CA1E39DB1488D8A5A85F57D049C7AE31C6F8A6F15F2EE8FAE7CD4D80767B9> |-
/seven <1C60D8A8C9B7A73D3B2C65B72E3853584348C1AA0EC611B673546899
CAC2F5881F734271F745E6BED9150871364812C182076C7FE649F3BB3D5FD146
09E37BA29EC4E0DD0D9315F7FA96EE3C3E071336C6F3889037BBC9D4C9A05041
1D6417B8A488787A8C755BFD89BE81986B96036872806293> |-
/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF09EF454D03FB6CE0741
835DFEA276F2BD9DA1E567C1E2AA272C9AF9AA6DE082183B6B06B110AD19A95E
B7E4DF541495BB98EE61CCB080A42D64DF1FC55075E90898D74F5BD66A3B7E79
6EB7D1A2531A03B3A15C447C7878675F786C2958D8D170FECAAEB79653062A89
C24C3F187B500D1CE71547CC2DD4654566FBE73FC2C8B09F> |-
/C <1C60D8A8C9B08A9454CA4C75C5C983901A105955FD02AB95A1D9A8A1EF86
541AF97FFF68AEDD6EF3F9788853DEF093D0FBD78A3FC5DB04802F61AEF127B4
D274CEA5A0495BD438B2F75833238070F9A0DEDDCFDFABEF5BEDD017B6BBEB22
A7AE0ECB6D46586699459E2B529F0C643928AD0C60B989B7B119C20E74352A5B
2677AF404D34EE8C876EF19CEC> |-
/F <1C60D8A8C9B08A95E211B68BD74B7CA2EA30EA4FC2444F1F126966AA7729
7BA7EB9B6F06068DCAA13C02B3588F5A46379A5072E7E2DBF343C097B55CA4D5
88C6753F362DD28478A1BC56804A66D1A6D1CB247FEE04B2647D343D14D14B66
B993C73F534C4128A2626BB2404D5D4FD30D29B727A906D4DCB574AC37C31D5E
5DAFB5704A4D0DA0711E1E> |-
/G <1C60D8A8C9B08A947C9D95A245F89039778B2173C1A591D9FE30270E0480
C1E99B55DAE8B4C513847176229A7952AA796157257E7AC944F6B278AD8A2DA5
AC46FF1C6D6F110CDFB4BB3914A9408F9C2AFCFA4434A091705F2099CF49830C
283515B1505AE428BBF04FE983D31A3E7AD873D9507C8FC142F3EF9AFBA92745
F95FD70E4BD6793422BAB5B4084FD440EDBAC94D7F7359EBCE65824B100DE1CA
30069239B01791B073785F8D6AD778F75C7F30B8C1E9CA7CCDA3254888A48B0F
67AFFAD2D140> |-
/L <1C60D8A8C9B66482C0AC2637AE818322843640782B4084B6BCB7EAC5B87B
B576EB951099027BB2082BCC7485557848EF03B40B2EB92530435BB00C45D615
C96475683CC7E08881B1B27444928202F03C5C87C466F5A1BE71B5B95971F09E
1717B5E5FD97DD51> |-
/M <1C60D8A8C9B08A94284B5EFFFA832408F063995C68AF9F6C00E3E870C312
931E0B60FD6BA55DD706D9BAC1CDC4ABA061AE96D501262822550D2CE4A4A00F
6BD783C7102AF89E0EF96D5EE2ACE1FE1F52AF7541EC9D3A0E4C6534E1F6AB39
5548EA6C044439A83E2FEB7EDD83B7568D1F5B2617A2398301102CB3E00F37B0
ADA59D1B42243231CABCF7C376428EDD02AA8DED74A29E9D26B1EF5601D72EC7
E72FFDECD0A088325B7F4EAE4DB260E1F591819112> |-
/R <1C60D8A8C9B08A9451E2C198C46CF0D9EABFA9FD85792390C749BB6A88FA
7917DCB59892FD0C5009977DF79610519F2C9B4981160954D87B28067B64902F
CA672A1EA4467509C61E197E33F24FCA5EFBDFB729B55B5C4117ECDB5BECF27E
38689E84ACC3DB0FC92B91213DD4A7E85FA5734C4E13F3F79A0D32FDD8C93C62
AE6FCB0157C6098018B88A9792212F13C7D0A1033F2D5084E094BAD54582913E
E91D18A8548EFC0A88E1E44D93AF30413B31D6EB8A83F584066D1B1BAAEDC943
46D88042D1DFD12BF62633AA55A8138483062D74A9EFC7B33F2C50BB370D726B
76FB1D1FC63806D916CC235BF380> |-
/S <1C60D8A8C9B08A95C58E492442892BD9E7F4F57919B0701E6E25EA5D422F
9C397DF42B2B4BCA66E1E632A933346AC08B32A319078CBB9C8790BD0797A0C8
D7037D9990944D6E89A8A0F0AAA1FB21BB3A6E177F143C1945D15647FEE591CE
37C775F523E736A97F5B4B355025F52910E1BB67A45650FE60FBD7EAB8B55253
C03F7277A289FD5E636694B522459FBC5D4691B78605010D03A98DF70394DEA9
E1FE4901D57E4AD3188F2DF845C7CF9C9FC6E1FF3F6717E9888DD3E1C3037C47
A1E4D646D9D8762C30C0651F2B38B9E2374B673FC694E64AECD8FF20E9FAF1> |-
/V <1C60D8A8C9B6E3FADD48816EB8424E8F57A41D8613F7E968C9BB1B02E143
FC7795C1D8E1E37AD719890D7D53E909D22C88A07AEFAFF169ACC297D24BF513
3224E2C95DFEADE8DFAF1A90741C19BB36E6F63644F0671C897D60E3A5D8FC19
B0E99BCFFB27E0637D9B26D4542E1B5687A32DF3215C09807526F293DDFD910A
C7449B1657> |-
/bracketleft <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED9132
1AEA14D2F111E25129A9F55A9BBE788FBBDFF0F6C2244EC994> |-
/quotedblleft <1C60D8A8C9B7A73DB6A4ADEB3BA4EDC9F571D3C053FFD4AD8
FBA6865DB43394DF92D6C86A6181E2569D5A9E72F557137ADF8BE91A54CAF411
7D02DBD741E9C897C13C568253649838671DA193045802525C0E953D17009DCF
FCF564E1D3B2BE1B68F4281362F4DCDF43C34D6A601604368AD87FDF16638B22
2082D3831BE11151FC5DC0C7407919A726682211BD2D88B353728C69F1C16EE7
0> |-
/bracketright <1C60D8A8C9B08A95708109816759180BF1DB309B19B6ED900
1F8A271BD99A5836DA462259FB45E4CA899E39083E4FD8D8818> |-
/q <1C60D8A8C9B08A95D222871B45C8677AD60861C3F92152D679EC046FD508
04EE7440261F7F760EFE5BDA37735333B634AEF0E39D128EC81BD50CEED93A00
645B5D6515E247CEC7B0C61191F67893C528A900762C59FAEA845D61ACA5F7E7
B106031460E4734AA4EE85618EEC80B1ED1E754561578DABED479BE37358B263
04EF9BF65844BFE482C31643A7466E43F6E32A0E02E6EBB6652EB71BB9780CA6
2F7BC7305363> |-
/Pi <1C60D8A8C9B6E3FA234780EB2783B44B516457A987B930E21FAB3139D29
100AF884163DC3326F86D8474E4D5E0C3B0D8429277543B27E33D679CE70B6F8
0A5896959CAE5A6BF9B2EF55E8C37A158770890EE28A2567790F834D6C1EEAED
5C359687D3D3EB4178DC809D273BCA82501EF109DE51C75419609D4948A2F993
5D9> |-
/ff <1C60D8A8C9B08A95FF8CEA8AF5E07F63E9F1B5E8F4CA1683A21DE95D58D
6C3E29BB233906DDCCD8BFB1899CEB485D08A458F58F7C89DA0E8F7FA2A99EF5
BBF85169B3739B6CE7D7BCC177E28ADCAFF9E7612E422A5FACC2A3820045F970
113E2ECECDB4DEDC4C2BFD1202B58918251821CFAFBB17063F0526B848F9C2D3
235FDD0BCE8FB0612E98650091EE577E3405A8C64E028FC04E263E89BA1DF280
B546CF896C4032381BBC5877FBCF8A65393530D72111F3424F86F277D183FBC7
9A030BB79C66013D11CC2B017E467BB2B8034E9D3B6F68F43CDD67C1CACE7684
B735F961CF345B55743> |-
/fi <1C60D8A8C9B08A95C58E49244289D52DBFA6654D4AB3AC250E722460DC0
119768B44448789DCE428D4B2686C9F8385BCDBA347ED18E5F8268BB459FBE6D
A582F0AC156A72C43EF61DCDC141B2ABF4134B679E977460AEDBF3A60B5A8D73
C83FC43588A14B23741E85F6A11BCFE9BB989CF004E031BA85CF8919936A7CC3
2851BCF15ECE282B9835B48BD31C631A09A28FEE1D4E836442C263C4136AA681
0F1D9D7F4914F2439D688B73E7E7440361FDFA0D6D48AC5F6D04F232189E118B
694EB4D333AF5307053422C90A957BC9AE12504F7FEF7C0E6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FLXAKX+CMR10 /Encoding get
dup 34 /quotedblright put
dup 39 /quoteright put
dup 48 /zero put
dup 49 /one put
dup 52 /four put
dup 55 /seven put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 71 /G put
dup 76 /L put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 91 /bracketleft put
dup 92 /quotedblleft put
dup 93 /bracketright put
dup 113 /q put
dup 166 /Pi put
dup 174 /ff put
dup 175 /fi put
pop
%ADOEndSubsetFont
/FLXAKX+CMR10*1 
[34{/.notdef}rp /quotedblright 4{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp /comma 
/hyphen /period /.notdef /zero /one /two /three /four 
/five /.notdef /seven 5{/.notdef}rp /equal 3{/.notdef}rp /A /.notdef 
/C /.notdef /E /F /G /.notdef /I 2{/.notdef}rp 
/L /M 4{/.notdef}rp /R /S /T /.notdef /V 
/W 3{/.notdef}rp /bracketleft /quotedblleft /bracketright 3{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
43{/.notdef}rp /Pi 7{/.notdef}rp /ff /fi 80{/.notdef}rp]
FLXAKX+CMR10 nf
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
11.3121 214.166 mo
(AnEGS4simulationofa30GeVelectron-inducedcascadeinir)
[9.00002 10.8053 8.16534 9.36342 6.60533 10.3199 4.6747 3.36266 9.59583 6.60535 3.36267 6 
4.68146 3.3627 6 10.9253 6.00003 7.92526 10.3199 6.00003 10.2 9.36343 5.27472 13.3202 
5.27475 3.36264 5.27475 5.27472 4.68146 4.68402 6 6.60535 3.95587 3.36267 6.60535 6.60532 
6.60535 5.27475 5.27469 11.1654 5.27469 6.00003 4.67471 5.27472 6 6.60535 9.7149 3.36264 
10.9254 3.36267 0 ]xsh
348.392 214.166 mo
(on.)
[6 6.60535 0 ]xsh
-73.0479 228.566 mo
(Thehistogramshowsfractionalenergydepositionperradia)
[8.63742 6.60534 10.6747 6.60535 3.36267 4.6747 4.68146 6 6.00002 4.68401 6.00003 15.3561 
4.6747 6.60535 5.63994 8.63739 10.1945 3.60532 4.68404 6.00002 5.27473 4.68144 3.36269 6.00002 
6.60535 6 8.76285 5.27475 6.60535 5.27472 4.68402 6 11.8826 6.60535 5.27472 6.96518 
6.00003 4.67468 3.36267 4.68146 3.36267 6.00003 12.0054 6.96548 5.27475 10.2041 4.68402 6 
6.60532 3.36264 0 ]xsh
248.672 228.566 mo
(tionlength,andthe)
[4.68149 3.36258 6.00003 11.8855 3.36267 5.27469 6.60535 6.00003 4.68146 6.60535 9.12247 6.00003 
6.60535 12.1253 4.6814 6.60535 0 ]xsh
-73.0479 242.846 mo
(curveisagamma-function\257ttothedistribution.Circlesind)
[5.27475 6.60533 4.68401 6.00283 10.3147 3.36267 9.7148 11.0399 6 6.00002 9.95596 9.95598 
6.00002 3.95595 3.60533 6.60533 6.60532 5.27473 4.68147 3.36269 6.00002 11.6452 6.64708 9.72147 
4.68146 10.92 4.68149 6.60535 10.3147 6.60535 3.36267 4.67468 4.68146 4.68402 3.36267 6.60535 
6.60532 4.68149 3.36267 6 6.60535 9.36267 8.63742 3.36267 4.68402 5.27472 3.36267 5.27472 
9.71463 3.36264 6.60535 0 ]xsh
254.594 242.846 mo
(icatethenumberof)
[3.36264 5.27472 6.00003 4.68143 10.3148 4.68143 6.60535 10.3148 6.24518 6.60535 9.59595 6.96548 
5.27472 9.96387 6.00006 0 ]xsh
-73.0479 257.246 mo
(electronswithtotalenergygreaterthan1.5MeVcrossingpl)
[5.27475 3.36267 5.27473 5.27475 4.68145 4.68401 6.00002 6.60533 8.99487 8.63742 3.36267 4.68144 
10.9254 4.68146 6.00002 4.68144 6.00003 7.56259 5.27473 6.60533 5.27475 4.68399 6.00002 10.8025 
6.00002 4.68404 5.27472 6 4.68146 5.27475 9.00397 4.68149 6.60532 6.00003 10.9254 6 
3.36267 10.3201 10.9241 5.27475 13.3199 5.27472 4.68402 6.00003 4.67465 4.67471 3.36267 6.60535 
10.4399 6.60532 0 ]xsh
246.272 257.246 mo
(anesat)
[6 6.60535 5.27472 9.11487 6 0 ]xsh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
288.272 257.246 mo
(X)sh
FLXAKZ+CMR8*1 [9.56413 0 0 -9.56413 0 0 ]msf
298.232 259.286 mo
(0)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
303.872 257.246 mo
(=)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
309.872 257.246 mo
(2intervals)
[10.2 3.36267 6.24533 4.68143 5.27475 4.68396 5.64276 6.00006 3.36261 0 ]xsh
-73.0479 271.526 mo
(\(scaleonright\)andthesquaresthenumberofphotonswith)
[4.68147 4.67469 5.27475 6.00002 3.36267 9.47482 6.00003 10.8053 4.68402 3.36267 6 6.24542 
4.68146 8.76132 6 6.60535 10.8054 4.68146 6.60535 9.59482 4.6747 6.36266 6.60533 6.00002 
4.68402 5.27475 8.87476 4.68149 6.60532 9.59485 6.24518 6.60535 9.59595 6.96552 5.27472 9.00409 
6.00003 7.80536 6.60532 6.60535 6.00003 4.68146 6.00003 6.60532 8.99478 8.63739 3.36267 4.68143 
0 ]xsh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
248.913 271.526 mo
(E)sh
%ADOBeginSubsetFont: LLIAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LLIAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 184 /greaterequal put
def
/FontBBox {0 -960 943 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/greaterequal <1C60D8A8C9B08A9461828376290081FDEE89FFCA15C371D7A
DA3F7F5C66FB4205DA2D3B4A244B4AA69B65BF3ED88CD94580A72A7A9E9BA6FB
94400CC73E9C5589571049888D35390EC0D4C134D43E3491B6BA10C65598F238
31A29AB5B1BF73536FB4D67B81158EDFB970EE9E45E7112A124419584A6C54F3
BE78870B41E0A8EECB5BF00> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALF+CMSY10 /LLIAAA+CMSY10 findfont ct_VMDictPut
/FLXALF+CMSY10*1 
[184{/.notdef}rp /greaterequal 71{/.notdef}rp]
FLXALF+CMSY10 nf
FLXALF+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
261.993 271.526 mo
(\270)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
274.772 271.526 mo
(1)sh
FLXAKY+CMMI10*1 [11.9552 0 0 -11.9552 0 0 ]msf
280.772 271.526 mo
(:)sh
FLXAKX+CMR10*1 [11.9552 0 0 -11.9552 0 0 ]msf
284.132 271.526 mo
(5MeVcrossing)
[10.2 10.9242 5.27469 13.2001 5.27472 4.68402 6.00003 4.67462 4.67474 3.36261 6.60535 0 
]xsh
-73.0471 285.926 mo
(theplanes\(scaleddowntohavesameareaastheelectrondist)
[4.68147 6.60534 9.23468 6.60533 3.36267 6.00002 6.60535 5.27472 8.75473 4.68146 4.67471 5.27475 
6 3.36267 5.27475 10.6855 6.60533 5.63985 8.63741 10.6853 4.68147 9.83994 6.60535 5.63983 
6.00269 9.35492 4.67468 6 9.95599 9.35474 6 4.68402 5.27475 9.95993 6.00003 8.63455 
4.68146 6.60535 9.35458 5.27472 3.36267 5.27472 5.27472 4.68149 4.68399 6.00003 10.5653 6.60535 
3.36264 4.67468 0 ]xsh
253.352 285.926 mo
(ribution\).)
[4.68399 3.36264 6.60535 6.60535 4.6814 3.36267 6 6.60535 4.68143 0 ]xsh
-73.0471 318.086 mo
(Longitudinalpro\257lesfromanEGS4[57]simulationofa30GeVe)
[7.44002 6.00002 6.60534 6.00001 3.36267 4.68146 6.60533 6.60533 3.36267 6.60535 6.00002 8.40254 
6.60535 4.68399 6 6.64709 3.36269 5.27473 14.9947 3.60535 4.68402 6.00002 15.116 6.00002 
11.6452 8.16534 9.3634 6.60535 11.1601 3.36267 6.00003 6.00003 13.4427 4.67468 3.36267 9.59583 
6.60535 3.36264 6.00003 4.68146 3.36267 6 11.6452 6 8.76553 11.0399 6.00003 11.0399 
9.36346 5.27469 14.1601 0 ]xsh
293.474 318.086 mo
(lectron-induced)
[3.36264 5.27478 5.27472 4.68143 4.68402 6 6.60535 3.9559 3.36264 6.60535 6.60535 6.60535 
5.27478 5.27466 0 ]xsh
-87.4471 332.246 mo
(cascadeinironareshowninFig.32.20.Thenumberofparticl)
[5.27473 6.00002 4.67469 5.27475 6.00002 6.60533 9.95476 3.36267 11.1653 3.36267 4.68401 6.00002 
11.1653 6.00003 4.68399 9.83469 4.67471 6.60533 5.63992 8.63739 11.2853 3.36269 11.1653 7.80269 
3.36269 6 7.80286 6.00003 6 3.36267 6 6 9.1228 8.63739 6.60535 9.95474 
6.24521 6.60532 9.59598 6.96548 5.27475 9.36386 6.00003 8.2854 6.60535 6 4.68405 4.68146 
3.36264 5.27472 0 ]xsh
246.873 332.246 mo
(escrossingaplane\(very)
[5.27472 9.23477 5.27472 4.68402 6.00003 4.67465 4.67474 3.36261 6.60532 10.5599 10.5602 6.60535 
3.36264 6.00003 6.60535 9.83472 4.68146 6.00275 5.27472 4.68402 0 ]xsh
-87.4471 346.526 mo
(closetoRossi's\246function[2]\)issensitivetothecuto\256ene)
[5.27473 3.36267 6.00002 4.6747 10.0748 4.68146 10.6802 8.75862 6.00002 4.6747 4.67471 3.36267 
3.36267 9.47464 13.6465 3.60533 6.60535 6.60532 5.27475 4.68146 3.36267 6.00002 11.4053 3.36269 
6.00002 3.36264 14.0417 3.36267 9.47455 4.67468 5.27475 6.60532 4.67468 3.36267 4.68146 3.36267 
6.0025 10.0748 4.68146 10.6802 4.68149 6.60532 10.0749 5.27472 6.60535 4.68146 6 11.6497 
5.27472 6.60535 0 ]xsh
235.213 346.526 mo
(rgy,herechosenasatotal)
[4.68399 6 5.40253 8.28275 6.60535 5.27469 4.68405 10.1949 4.91467 6.60532 6.00003 4.67465 
5.27478 11.5254 6 9.35486 10.8 4.6814 6.00006 4.68146 6 0 ]xsh
-87.4471 360.807 mo
(energyof1.5MeVforbothelectronsandphotons.Theelectro)
[5.27473 6.60535 5.27473 4.68401 6.00001 11.2826 6 8.40535 6.00002 3.36267 10.8002 10.9241 
5.27475 13.92 3.60533 6 9.48413 6.96548 6.00002 4.68147 11.5253 5.27473 3.36266 5.27473 
5.27475 4.68146 4.68402 6 6.60535 9.59488 6.00003 6.60532 11.5253 6.60535 6.60532 6.00003 
4.68149 6 6.60535 4.67465 9.36273 8.63739 6.60535 10.1946 5.27475 3.36264 5.27472 5.27475 
4.68143 4.68402 0 ]xsh
249.993 360.807 mo
(nnumberfallso\256more)
[11.4055 6.24518 6.60535 9.59595 6.96552 5.27472 9.724 3.60532 6.00003 3.36264 3.36264 9.5946 
6 11.7698 9.95593 6.00006 4.68396 0 ]xsh
-87.4471 375.086 mo
(quicklythanenergydeposition.Thisisbecause,withincre)
[6.36267 6.60535 3.36266 4.9146 6.36267 3.36267 10.5628 4.68147 6.60533 6 11.0453 5.27475 
6.60533 5.27475 4.68401 6.00003 10.8025 6.60533 5.27473 6.96518 6.00002 4.6747 3.36266 4.68146 
3.36269 6.00002 6.60535 9.2426 8.63739 6.60535 3.36267 9.11462 3.36267 8.99481 6.96552 5.27472 
5.27475 6.00003 6.60529 4.67471 5.27472 7.92255 8.63739 3.36267 4.68149 10.9254 3.36267 6.60535 
5.27469 4.68402 0 ]xsh
224.673 375.086 mo
(asingdepth,alargerfraction)
[6 4.67468 3.36264 6.60535 10.4401 6.60535 5.27472 6.60535 4.68146 6.60535 7.92273 10.3199 
3.36264 6.00003 4.68396 6.00003 5.27475 9.00391 3.60535 4.68396 6 5.27478 4.6814 3.36267 
6 0 ]xsh
-87.4471 389.366 mo
(ofthecascadeenergyiscarriedbyphotons.Exactlywhataca)
[6.00002 7.08542 4.68146 6.60534 8.7546 5.27475 6 4.67471 5.27475 6 6.60533 8.75476 
5.27477 6.60532 5.27475 4.68402 6.00002 9.84276 3.3627 8.1546 5.27473 6.00002 4.68402 4.68401 
3.36269 5.27473 10.0855 6.24519 9.84253 6.60535 6.60535 6 4.68146 6.00003 6.60532 4.67468 
9.36273 8.16534 6.36267 6 5.27472 4.68149 3.36264 9.60254 8.63739 6.60535 6 8.04156 
9.4801 5.27472 0 ]xsh
236.913 389.366 mo
(lorimetermeasuresdepends)
[3.36264 6.00003 4.68402 3.36261 9.95596 5.27472 4.68146 5.27472 8.04395 9.95596 5.27472 6 
4.67471 6.60535 4.68399 5.27469 8.2749 6.60535 5.27466 6.96521 5.27478 6.60529 6.60535 0 
]xsh
-87.4471 403.646 mo
(onthedevice,butitisnotlikelytobeexactlyanyofthepro\257l)
[6.00002 10.6854 4.68147 6.60534 9.3546 6.60535 5.27473 6.36269 3.36267 5.27473 5.27475 7.44269 
6.60535 6.60533 8.76164 3.36266 8.7614 3.36266 8.63472 6.60533 6.00002 8.76164 3.36269 3.36266 
6.00259 5.27475 3.36264 10.3228 4.68149 9.95984 6.96552 9.35492 5.27472 6.36267 6 5.27472 
4.68149 3.36264 10.3228 6.00003 6.24518 10.4425 6 7.68542 4.68146 6.60535 9.35458 6.60535 
4.68402 6 6.64709 0 ]xsh
245.115 403.646 mo
(esshown.Ingascounters)
[5.27475 8.87476 4.67465 6.60535 5.63995 8.63742 6.60535 9.36267 4.3186 10.6853 6.00003 6 
8.75488 5.27466 6.00006 6.60529 6.2453 4.68146 5.27472 4.68402 0 ]xsh
-87.4471 417.927 mo
(itmaybeveryclosetotheelectronnumber,butinglassChere)
[3.36267 8.88131 9.95597 5.64001 10.5628 6.96549 9.59476 6.00269 5.27475 4.68401 10.6825 5.27475 
3.36267 6.00002 4.6747 9.59468 4.68146 10.2001 4.68149 6.60533 9.59482 5.27473 3.36266 5.27473 
5.27475 4.68146 4.68402 6 10.9255 6.24518 6.60535 9.59595 6.96552 5.27472 4.68402 7.92273 
6.60535 6.60535 9.0015 3.36267 10.9254 6.00003 3.36267 6 4.67468 8.87463 8.63742 6.60532 
5.27475 4.68399 0 ]xsh
247.473 417.927 mo
(nkovdetectorsandother)
[6.60535 6.00278 5.63983 10.6828 6.60535 5.27472 4.68146 5.27472 5.27478 4.68143 6 4.68399 
9.11472 6 6.60538 10.9252 6.00006 4.6814 6.60535 5.27478 0 ]xsh
-87.4471 432.207 mo
(deviceswith\\thick"sensitiveregionsitisclosertotheen)
[6.60534 5.27474 6.36269 3.36266 5.27474 5.27475 9.83472 8.63741 3.36267 4.68146 11.7652 6.00002 
4.68147 6.60532 3.36269 4.9149 6.36267 11.04 4.67471 5.27473 6.60533 4.67468 3.36269 4.68146 
3.36266 6.00252 10.4346 4.68404 5.27472 6 3.36267 6 6.60535 9.83487 3.36267 9.72156 
3.36267 9.71481 5.27472 3.36264 6.00003 4.67468 5.27472 9.84387 4.68149 11.0399 4.68149 6.60535 
10.4347 5.27472 0 ]xsh
226.713 432.207 mo
(ergydeposition\(totaltrack)
[5.27475 4.68396 6.00003 11.5228 6.60535 5.27472 6.96521 6 4.67468 3.36264 4.68149 3.36261 
6 11.7652 4.68143 4.68146 6 4.68146 6 8.28259 4.6814 4.68402 6.00006 4.91479 
0 ]xsh
%ADOBeginSubsetFont: NQPBAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NQPBAA+CMR7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 65 /A put
dup 103 /g put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/FontBBox {0 -205 897 713} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 446 664 674] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/comma <1C60D8A8C9B08A9562EC537D4CD725EF19C5EAE073D9553498DA0A35
AF6F4B7D7E994235CB5767A568ABB68B70BDAE78EDA91560F832391691656D95
613B57C76E69946785B690638DC13DD9D811AD> |-
/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B1
17D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2E
BEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC
959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AE
B3E78ECCEF035CFEC> |-
/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5
871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D45
82A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101
B8> |-
/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A
514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899
C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E39
72B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA
7C3147D75D44707368> |-
/three <1C60D8A8C9B08A95C25148D4A67F69EFB9DDFA5ECA5AE37566D87066
172F8CABE2B2CB84CA762EB5E603C8A9A699CCCFA6A0578E3DA76E6C9E7B5A84
45F01D818A380DD4AC46AFDB5422B8800FEF2E8AFDA86EDD8199C34D64992E4F
43992CF1D54B07E3F575480A9A0B868375A4E2A9893BE0AEBB713690AB6C5B93
E6D8D619357F90F56F58A8525CC0A1BD91DA9365507B440F549B60D4E7E5CBB3
769D4C82F061F9E20A25AD23418551374D804A6B25C8CE003D> |-
/four <1C60D8A8C9B08A95C25148D4A67F95114132C30B0FFEF5844041B0814
D8B5602C3A3ED6436A3BB27B9947660B00ADBD11E09A535CB602661F508AB189
4FEFD2ABB583E236F32BAF823F57979D611B136667A3040D05648E88338BFED2
EC443EEA05C554128C67AC3003820FAF1AA9D3D90> |-
/eight <1C60D8A8C9B08A95C25148D4A67F69EFB9F9AE504F2C52346D54C5F7
623B9C8365F3EE35C4195D96D6314C58DBAA719DBB6D55226E3740499CDB01E0
AC465C6B589049E46827308D8D35A8C54894143A53934399D93B828D235C25B0
02B8830BEF7407587148B5707DE7398D109B3E5F2821BB0793280FBB70845FC6
EC97E6E5C37875E07B2D86AA6A1A771AB42E786497B8102F6CF258601C6320DE
75E9DF61F7771E70A630C79065923227> |-
/colon <1C60D8A8C9B08A9562EC537D4CD7559A24C182180E12A17BABB8A7EB
E29A2AFE0FD7F4FF1A8534340DB130661B35AF00175D1534C8EF18D286DD3591
DC0667D108E4758D791353C511B99A93650B> |-
/A <1C60D8A8C9B08A9407DB08AE8730401ED4D58A1543B5E275631719E5B2EE
35BE7B9036FA847635646AF4E812ABC197B41EB4CB0F01087E686F9B2804E76E
49531B21B9D316CA95BDFCD6478F17D3A0D8E5E57123F91BCC2352659A4B6D3D
15B52682B0E1F7FA74D2AF82CDBDDD1EA2FB591C9FC7272EC9CB253875221CE0
2A0AD03B7C9F2800884A6517D18F64FA2FAC9123DA06B8EC756B> |-
/g <1C60D8A8C9B08A95C25148D4A67FE521C19A0253E6CBCB8A27BFC961A038
797FF9A13EC7A71E988E414B51D0168C780B7A59705C766DDC1AE943CC0A18A4
A2E03A5BC02F69CB11E9660FCA891121B7FBB074B3E7AC70C220C850FE370181
432FDFDDBEABD2A23C2DFC25E9BD16CC4118A5BB5F62FB1B6800708FA09FC249
F65041041D9ED1FB50CFCEA15641C3C91BD4624B641F4D09B5A80D07C962B530
79692487B6B05FA538FF02B3F482C8295C6659BEE2BB09F6CEA40827AA66BF7D
320B3928204535E22AAFF8E7C648CCFF88DAA105F22C09E395C084275223D1D4
F5D8BAF836DEE167BA0FDD76707E3ECA1EC5219E02FABB7A354C9E9108BB1B09
73C4EAF1677238> |-
/s <1C60D8A8C9B08A95ACAE8FF537AF9F8AD4B2E222EF5AC1123D62C64D03A9
E8A2291EA9289F8837B785FF2329651B5A6F43E296C863DBDA54EA99CE040104
DAD32244073DAC24D4514FE8F86E5222D5F7AB8C683707B5901D3C78F758EE64
F18E101580AC15818ACD8C61C87EAC7CAE022F316C4A8CF1DFA30EA2612E287F
214DDC2ACB4385C7D2CFF15BD62AA77BF871BC7A51F3E3BED42DBEC87D9F6631
A7CD8A11B151B23B7BB91DBEE380870F5B01773CD8A6F8ECE552EAD1> |-
/t <1C60D8A8C9B08A95B2584918684CFCAE38CCD4F5EC3C10852D7A214B7F43
FEC677207504434B2BFC75A028F5328EEA1E980E6ED52A54B66EAFFB58C74CBD
BEC0674195736BFB32823B1B5B8C84D4D189334FD9BC333E2EDEE6DD4109FA00> |-
/u <1C60D8A8C9B08A95EA1589819D01FDDF9141BCCE0A4F6EBE69B95887DA43
74A577E00F4F81329511DDAE0E1D68CCFB4821728E872A0CF8DC48B98A113753
38B5E67C053F6B8A225CF765BB14B73F4711683EBDA64B8C69276C712CA0B9D6
14952349023771F9413B> |-
/.notdef <1C60D8A8C9B08A958AA685092D4752> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FLXALG+CMR7 /NQPBAA+CMR7 findfont ct_VMDictPut
/FLXALG+CMR7*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three /four 
3{/.notdef}rp /eight /.notdef /colon 6{/.notdef}rp /A 37{/.notdef}rp /g 
11{/.notdef}rp /s /t /u 138{/.notdef}rp]
FLXALG+CMR7 nf
FLXALG+CMR7*1 [8.36862 0 0 -8.36862 0 0 ]msf
96.2729 460.886 mo
(August21,201413:18)
[7.07785 5.28058 4.79633 5.28058 3.84357 7.67657 4.79633 4.79633 6.59656 4.7963 4.79633 4.79633 
14.1564 4.79633 4.79633 2.75653 4.79633 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/FLXALG+CMR7*1 uf
/FLXALG+CMR7 uf
/NQPBAA+CMR7 uf
/FLXALF+CMSY10*1 uf
/FLXALF+CMSY10 uf
/LLIAAA+CMSY10 uf
/FLXALE+CMBX10*1 uf
/FLXALE+CMBX10 uf
/YEKBAA+CMBX10 uf
/FLXALC+NewCenturySchlbk-Italic*1 uf
/FLXALC+NewCenturySchlbk-Italic uf
/AXNBAA+NewCenturySchlbk-Italic uf
/FLXALB+NewCenturySchlbk-Roman*1 uf
/FLXALB+NewCenturySchlbk-Roman uf
/ELRBAA+NewCenturySchlbk-Roman uf
/FLXAKY+CMMI10*1 uf
/FLXAKY+CMMI10 uf
/HJCBAA+CMMI10 uf
/FLXAKX+CMR10*1 uf
/FLXAKX+CMR10 uf
/GFNBAA+CMR10 uf
/FLXAKW+CMBX12*1 uf
/FLXAKW+CMBX12 uf
/QJJAAA+CMBX12 uf
/FLXAKV+CMSSBX10*1 uf
/FLXAKV+CMSSBX10 uf
/ONKBAA+CMSSBX10 uf
/FLXALA+CMMI8*1 uf
/FLXALA+CMMI8 uf
/MZQAAA+CMMI8 uf
/FLXAKZ+CMR8*1 uf
/FLXAKZ+CMR8 uf
/UGXAAA+CMR8 uf
/FLXAKU+CMBXTI10*1 uf
/FLXAKU+CMBXTI10 uf
/WGJAAA+CMBXTI10 uf
/FLXALD+Symbol*1 uf
/FLXALD+Symbol uf
/Symbol uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
